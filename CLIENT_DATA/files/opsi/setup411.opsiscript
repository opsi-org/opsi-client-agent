; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/


encoding=utf8
requiredWinstVersion >= "4.11.4.12"
ScriptErrorMessages = False

Message=opsi-client-agent installation
ShowBitmap "%scriptpath%\uninst\opsi.png" "opsi-client-agent"

; Variables:
; Config Variables with prefixes
; GEN = general
; SHI = share information
; OCD = opsiclientd
; OLB = opsiLoginBlocker
; INST = used while installation
; Script variables with prefix INST

;******** installation vars **********
DefVar $INST_AktGina$
DefVar $INST_AllowReboot$
DefVar $INST_Authenticated$
DefVar $INST_BaseDir$
DefVar $INST_Cfgini$
DefVar $INST_custom_Cfgini$
DefVar $INST_ClientExists$
DefVar $INST_ClientId$
DefVar $INST_ComputerName$
DefVar $INST_Debug$
DefVar $INST_DepotServer$
DefVar $INST_DnsDomainName$
DefVar $INST_Error$
DefVar $INST_ExitCode$
DefVar $INST_IPAddress$
DefVar $INST_ImmediateRebootFlag$
DefVar $INST_MAC$
DefVar $INST_MinorOS$
DefVar $INST_NTVersion$
DefVar $INST_Modus$
DefVar $INST_NetBootProductname$
DefVar $INST_NicIndex$
DefVar $INST_NotifierDir$
DefVar $INST_OS$
DefVar $INST_OpensslConfigFile$
DefVar $INST_OpensslBaseDir$
DefVar $INST_OpsiClientdCertificateFile$
DefVar $INST_OpsiclientdDir$
DefVar $INST_OpsiclientdConf$
DefVar $INST_OpsiclientdRPCDir$
DefVar $INST_OpsiUtilitiesdDir$
DefVar $INST_ActionProcessorStarterDir$
DefVar $INST_Paramstr$
DefVar $INST_Pcname$
DefVar $INST_RebootFlag$
DefVar $INST_Result$
DefVar $INST_SetAclDir$
DefVar $INST_ServiceName$
DefVar $INST_Service_Password$
DefVar $INST_Service_User$
DefVar $INST_ShortServiceUrl$
DefVar $INST_SubModus$
DefVar $INST_Sysconfini$
DefVar $INST_SystemType$
DefVar $INST_WinstDir$
DefVar $INST_WinstRegKey$
DefVar $INST_gina_to_chain$
DefVar $INST_old_reg_gina_installed$
DefVar $INST_preloginvistaInstalled$
DefVar $INST_preloginloaderInstalled$
DefVar $INST_GinaDll$
DefVar $INST_service_hidden_password$
DefVar $INST_DefaultLoglevel$
DefVar $INST_PasswdLogLevel$
DefVar $INST_ConfigServerIP$
DefVar $INST_ConfigServerPort$
DefVar $INST_ProductType$
DefVar $INST_vcredistx86_installed$
;DefVar $INST_uac_level$
DefVar $ProductVersion$
DefVar $INST_tmpstr$
;moved to subconfig.opsiscript
;DefVar $INST_create_software_on_demand_menue_entry$
DefVar $INST_pcDescription$
DefVar $INST_pcNotes$
DefVar $INST_userIsAdmin$
DefVar $INST_product4setup$




DefVar $INST_SearchKey$
DefVar $INST_SearchValue$
DefVar $INST_SearchResult$

DefStringlist $INST_Adapterlist$
DefStringlist $INST_FullServicelist$
DefStringList $INST_ServiceResult$
DefStringList $INST_ResultList$
DefStringList $INST_ResultList2$
DefStringList $INST_ResultList3$
DefStringList $INST_ParamstrList$
DefStringList $INST_productList4setup$
DefStringList $INST_ErrorList$



;******** Sektion general **********

DefVar $GEN_bootmode$


;******** Sektion shareinfo **********

DefVar $SHI_pckey$

;******** Sektion opsiclientd **********

DefVar $OCD_global.log_level$
DefVar $OCD_config_service.url$
DefVar $OCD_config_service.connection_timeout$
DefVar $OCD_control_server.port$
DefVar $OCD_notification_server.port$
DefVar $OCD_open_firewall_for_control_server$
DefVar $OCD_OpsiVarDir$
DefVar $OCD_depot_server__username$
DefVar $OCD_depServices$
DefVar $OCD_notifier_dir$

DefStringlist $OCD_depServicelist$

;******** Sektion opsiLoginBlocker **********
;DefVar $OLB_ServiceConnectionTimeout$
DefVar $OLB_LogLevel$
DefVar $OLB_LoginBlockerStart$
DefVar $OLB_LoginBlockerTimeoutConnect$
;DefVar $OLB_LoginBlockerTimeoutInstall$
;opsiServiceType=0 (default), 1 (prelogin.exe/pcptch.exe), 2 (opsiclientd)
DefVar $OLB_opsiServiceType$


;******** Sektion preloginloader **********

DefVar $PLG_BaseDir$
DefVar $PLG_CfgDir$
DefVar $PLG_DebugOutput$
DefVar $PLG_PcptchExe$
DefVar $PLG_RebootOnBootmodeReins$
DefVar $PLG_RebootOnServicePackChange$
DefVar $PLG_RunWithUser$
DefVar $PLG_RunWithUserDelay$
DefVar $PLG_RunWithUserPassword$
DefVar $PLG_RunWithUserReboot$
DefVar $PLG_RunWithUserTask$
DefVar $PLG_RunWithUserTaskParms$
DefVar $PLG_RunWithUserUsername$
DefVar $PLG_UtilsDir$
DefVar $PLG_WinstRegKey$
DefVar $PLG_RunServiceAs$
DefVar $PLG_RunServiceAsDom$
DefVar $PLG_RunServiceAsUsr$
DefVar $PLG_RunServiceAsPas$

;******** Sektion shareinfo **********

DefVar $SHI_pckey_file$
DefVar $SHI_user$
DefVar $SHI_smbusername1$
DefVar $SHI_try_secondary_user$

;******** Sektion pcptch **********

DefVar $PCP_Bitmap1$
DefVar $PCP_Bitmap2$
DefVar $PCP_button_stopnetworking$
DefVar $PCP_copyDefaultUser$
DefVar $PCP_label1$
DefVar $PCP_label2$
DefVar $PCP_loadBitmap$
DefVar $PCP_makeLocalCopyOfIniFile$
DefVar $PCP_makeLocalWinst$
DefVar $PCP_mountdrive$
DefVar $PCP_opsiServiceURL$
DefVar $PCP_patchleveltyp$
DefVar $PCP_pcprotoname$
DefVar $PCP_opsiServerType$
DefVar $PCP_winstLocalDirectory$
DefVar $PCP_SecsUntilConnectionTimeOut$
DefVar $PCP_pingcheck$

;******** Sektion on_shutdown **********
;moved to subconfig.opsiscript
;DefVar $on_shutdown_GPOname$
;DefVar $on_shutdown_active$
;DefVar $on_shutdown_RegKeyA$
;DefVar $on_shutdown_RegKeyB$
;DefVar $on_shutdown_found$
;DefVar $on_shutdown_last_val$
;Defvar $on_shutdown_install$
;DefVar $on_shutdown_install_set_policy$
;DefVar $on_shutdown_RunScript$

;DefStringList $on_shutdown_configStates$
;DefStringList $on_shutdown_keylist$

;******** Sektion sub_restore_productOnClient **********

DefVar $LogDir$
DefVar $objectStr$
DefVar $oldPattern$
DefVar $fix_shutdown_starter$
DefVar $resultstr$
DefVar $ArrayStr$
DefVar $pid$
DefVar $oldclientId$
DefVar $identstr$
DefVar $do_not_change_setup_requests$
DefVar $lockdir$

DefStringlist $resultlist$
DefStringlist $resultlist1$
DefStringlist $productIdList$
DefStringlist $productIdInstalledList$
DefStringlist $productIdSetupList$
DefStringlist $productIdOnceList$
DefStringlist $pocList$

Set $LogDir$ = "%opsiLogDir%"


;******** sections end **********

; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)
DefVar               $OCD_WORKING_config_service.url$
DefStringList      $OCD_POSSIBLE_config_service.urls$
DefVar               $OCD_TEST_URL_IP$
DefVar               $OCD_PING_RESULT$
DefVar		     $OCD_DIST_DIR$

;*********************************************************
; static initial values for variables
;*********************************************************

Set $INST_Debug$ = "on"

if $INST_debug$ = "off"
	set $INST_DefaultLoglevel$ = "7"
	Set $INST_PasswdLogLevel$="7"
else
	set $INST_DefaultLoglevel$ = "8"
	comment " set $INST_PasswdLogLevel$ to 2 for production"
	Set $INST_PasswdLogLevel$="8"
endif

set $INST_ResultList$ = getProductMap

Set $INST_AktGina$ = ""
set $INST_service_hidden_password$ =""
Set $INST_AllowReboot$ = "true"
Set $INST_BaseDir$   = "%ProgramFiles32Dir%\opsi.org\opsi-client-agent"
Set $INST_OpsiclientdDir$   = $INST_BaseDir$+"\opsiclientd"
Set $INST_OpsiUtilitiesdDir$   = $INST_BaseDir$+"\utilities"
Set $INST_Cfgini$ = "%ScriptPath%\cfg\config.ini"
set $INST_custom_Cfgini$ = "%ScriptPath%\custom\config.ini"
Set $INST_DepotServer$ = ""
Set $INST_IPAddress$ = ""
Set $INST_ImmediateRebootFlag$ = ""
Set $INST_MAC$ = ""
Set $INST_NetBootProductname$ = ""
Set $INST_NicIndex$ = ""
Set $INST_NotifierDir$ = $INST_BaseDir$+"\notifier"
Set $INST_OpensslConfigFile$ = "%opsiTmpDir%\opsiclientd.cnf"
Set $INST_OpensslBaseDir$ = $INST_BaseDir$+"\openssl"
Set $INST_OpsiclientdCertificateFile$ = $INST_OpsiclientdDir$+"\opsiclientd.pem"
Set $INST_OpsiclientdConf$ = $INST_OpsiclientdDir$+"\opsiclientd.conf"
Set $INST_OpsiclientdRPCDir$ = $INST_BaseDir$+"\opsiclientd_rpc"
Set $INST_ActionProcessorStarterDir$ = $INST_BaseDir$+"\action_processor_starter"
Set $INST_Pcname$ = EnvVar ("COMPUTERNAME")
Set $INST_RebootFlag$ = ""
Set $INST_Service_Password$ = "pcpatch"
Set $INST_Service_User$ = "pcpatch"
;Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$ + "\SetACL 2.3.0\SetACL 2.3.0\Command line version\x86"
; The setacl.exe 2.3.0 hangs some times
Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$
;Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$ + "\SetACL 2.1.1\SetACL 2.1.1\Command line version\x86"
Set $INST_Sysconfini$ = "%ScriptPath%\cfg\sysconf.ini"
Set $INST_WinstDir$   = $INST_BaseDir$+"\opsi-winst"
Set $INST_WinstRegKey$ = "HKLM\SOFTWARE\opsi.org\winst"
set $INST_gina_to_chain$ = "msgina.dll"
Set $INST_preloginvistaInstalled$ = 'false'
set $INST_preloginloaderInstalled$ = 'false'
set $ProductVersion$ = "%installingProdVersion%"
if ($ProductVersion$="")
  ; service_setup.cmd
  set $ProductVersion$=GetValueFromInifile("c:\opsi.org\tmp\opsi\product.ini","opsi-client-agent","ProductVersion","")
  if ($ProductVersion$="")
    ; opsi-deploy
    set $ProductVersion$=GetValueFromInifile("c:\tmp\opsi-client-agent_inst\files\opsi\product.ini","opsi-client-agent","ProductVersion","")
    if ($ProductVersion$="")
	 LogWarning "empty productversion results in empty displayversion in [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\opsi-client-agent]"
    endif
  endif
endif
set $OCD_OpsiVarDir$ = "c:\opsi.org"
;set $INST_uac_level$ = "0"
;moved to subconfig.opsiscript
;set $INST_create_software_on_demand_menue_entry$ = "true"
set $INST_pcDescription$ = ""
set $INST_pcNotes$ = ""

SetLogLevel=$INST_DefaultLoglevel$




;******** Sektion general **********

Set $GEN_bootmode$    = "BKSTD"


;******** Sektion opsiclientd **********

Set $OCD_config_service.url$         = ""
set $OCD_config_service.connection_timeout$ = "10"

Set $OLB_LoginBlockerStart$          = "1"
Set $OLB_LoginBlockerTimeoutConnect$ = "120"
;Set $OLB_LoginBlockerTimeoutInstall$ = "180"
Set $OLB_opsiServiceType$            = "2"
set $OCD_depot_server__username$ = "pcpatch"
set $OCD_DIST_DIR$ = "dist"
set $OCD_notifier_dir$ = "opsi-notifier"

;******** Sektion prelogin **********
Set $PLG_UtilsDir$ = $INST_BaseDir$+"\prelogin"

;******** Sektion preloginloader **********

Set $PLG_BaseDir$                    = $INST_BaseDir$
Set $PLG_UtilsDir$                   = $PLG_BaseDir$+"\prelogin"
Set $PLG_CfgDir$                     = $PLG_BaseDir$+"\cfg"
Set $PLG_DebugOutput$                = "0"
Set $PLG_PcptchExe$                  = $PLG_UtilsDir$+"\pcptch.exe"
Set $PLG_RebootOnBootmodeReins$      = "1"
Set $PLG_RebootOnServicePackChange$  = "1"
Set $PLG_RunWithUser$                = "0"
Set $PLG_RunWithUserDelay$           = "1000"
Set $PLG_RunWithUserPassword$        = ""
Set $PLG_RunWithUserReboot$          = "0"
Set $PLG_RunWithUserTask$            = ""
Set $PLG_RunWithUserTaskParms$       = ""
Set $PLG_RunWithUserUsername$        = "pcpatch"
Set $PLG_WinstRegKey$                = "SOFTWARE\opsi.org\winst"
Set $PLG_RunServiceAs$               = "1"
Set $PLG_RunServiceAsDom$            = ""
Set $PLG_RunServiceAsUsr$            = ""
Set $PLG_RunServiceAsPas$            = ""


;******** Sektion shareinfo **********

Set $SHI_pckey$       = ""
Set $SHI_pckey_file$  = $PLG_CfgDir$+"\locked.cfg"
Set $SHI_user$        = ""
Set $SHI_smbusername1$= ""
Set $SHI_try_secondary_user$="0"


;******** Sektion pcptch **********

Set $PCP_Bitmap1$                = ""
Set $PCP_Bitmap2$                = ""
Set $PCP_button_stopnetworking$  = ""
Set $PCP_copyDefaultUser$        = ""
Set $PCP_label1$                 = ""
Set $PCP_label2$                 = ""
Set $PCP_loadBitmap$             = ""
Set $PCP_makeLocalCopyOfIniFile$ = ""
Set $PCP_makeLocalWinst$         = ""
Set $PCP_mountdrive$             = ""
Set $PCP_opsiServiceURL$ 	  = ""
Set $PCP_patchleveltyp$          = ""
Set $PCP_pcprotoname$            = ""
Set $PCP_opsiServerType$ 		  = "service"
Set $PCP_winstLocalDirectory$    = $INST_WinstDir$
Set $PCP_SecsUntilConnectionTimeOut$ = "180"
Set $PCP_pingcheck$		= ""

;******** section on_shutdown **********
;Set $on_shutdown_RegKeyA$ = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine\Scripts\Shutdown"
;set $on_shutdown_GPOname$ = "opsi shutdown install policy"

;******** sections end **********

;*********************************************************
; Let's work
;*********************************************************

set $INST_OS$ = GetOS

if not($INST_OS$ = "Windows_NT")
	LogError "Wrong OS: Product: opsi-client-agent is only for Windows"
	isFatalError "Wrong OS"
endif

set $INST_MinorOS$ = GetNTVersion
set $INST_NTVersion$ = GetMsVersionInfo
Set $INST_SystemType$ = GetSystemType
set $INST_Resultlist$ = getMSVersionMap
set $INST_ProductType$ = getValue("product_type_nr",$INST_Resultlist$)
set $INST_vcredistx86_installed$ = "false"
if GetRegistryStringValue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{1F1C2DFC-2D24-3E06-BCB8-725134ADF989}] DisplayVersion") = "9.0.30729.4148"
	comment "vcredistx86 Version 9.0.30729.4148 is installed"
	set $INST_vcredistx86_installed$ = "true"
endif
if GetRegistryStringValue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}] DisplayVersion") = "9.0.21022"
	comment "vcredistx86 Version 9.0.21022 is installed"
	set $INST_vcredistx86_installed$ = "true"
endif
 
if CompareDotSeparatedNumbers($INST_NTVersion$,"4.0") <= "0"
	logError "Installation aborted: wrong OS version: only win2k and above alowed"
	isFatalError
endif
if CompareDotSeparatedNumbers($INST_NTVersion$,"6.1") < "0"
	set $OCD_DIST_DIR$ = "dist.nt5"
	logWarning "New opsiclientd will not run under nt5 and nt6.0, you will get the last stable version (4.0.83)"
endif

Switch $INST_NTVersion$
	Case "6.1"
		set $OCD_DIST_DIR$ = "dist.win7"
	Endcase
	Case "6.2"
		set $OCD_DIST_DIR$ = "dist.win8"
	Endcase
	Case "6.3"
		set $OCD_DIST_DIR$ = "dist.win81"
	Endcase
Endswitch

if CompareDotSeparatedNumbers($INST_NTVersion$,"10.0") >= "0"
	set $OCD_DIST_DIR$ = "dist.win10"
endif

if not (HasMinimumSpace ("%systemdrive%", "10 MB"))
	logError "Not enough space on drive %systemdrive% (we need 10 MB): Aborting"
	isFatalError
endif

if $INST_vcredistx86_installed$ = "false"
	comment "vc_redist not found - install it"
		comment "install via msi"
		ExecWith_autoit_vc_redist "%SCRIPTPATH%\autoit3.exe" WINST /letThemGo /EscapeStrings
		Winbatch_vc_redist_msi
		Sub_check_exitcode
		killtask "autoit3.exe"
endif

;*********************************************************
comment "set mode"
;*********************************************************

Set $INST_Paramstr$=PARAMSTR
set $INST_ParamstrList$ = splitstring($INST_Paramstr$, ":")

comment "Modus normally set by commandline argument"
if count($INST_ParamstrList$) > "0"
	Set $INST_MODUS$=takestring(0,$INST_ParamstrList$)
endif
if count($INST_ParamstrList$) > "1"
	Set $INST_SubModus$=takestring(1,$INST_ParamstrList$)
endif
if count($INST_ParamstrList$) > "2"
	Set $INST_tmpstr$ = takestring(2,$INST_ParamstrList$)
	if lower(trim($INST_tmpstr$)) = "noreboot"
		Set $INST_AllowReboot$ = "false"
	else
		if lower(trim($INST_tmpstr$)) = "reboot"
			Set $INST_AllowReboot$ = "true"
		endif
	endif
endif

comment "old Modes are remaped for backward compatibility"
if $INST_MODUS$ = "LOCAL"
	Set $INST_MODUS$="INSTALL"
endif
if $INST_MODUS$ = "LOCAL_REINSTALL"
	Set $INST_MODUS$="INSTALL"
endif
if $INST_MODUS$ = "SERVICE_INTERACTIVE"
	Set $INST_MODUS$="INSTALL"
	Set $INST_SubModus$="CREATE_CLIENT"
endif
if $INST_MODUS$ = "TFTP"
	Set $INST_MODUS$="INSTALL"
	Set $INST_SubModus$="BOOTIMAGE"
endif

comment "default submode of INSTALL is CONFIG_INI"
if $INST_MODUS$ = "INSTALL"
	if $INST_SubModus$ = ""
		Set $INST_SubModus$="CONFIG_INI"
	endif
endif

comment "map Mode REMOTEDEPLOY"
if $INST_MODUS$ = "REMOTEDEPLOY"
	Set $INST_MODUS$="INSTALL"
	Set $INST_SubModus$="CONFIG_INI"
	Set $INST_AllowReboot$ = "false"
endif

comment "if no commandline argument we default to update"
if $INST_MODUS$ = ""
	Set $INST_MODUS$="UPDATE"
endif

;if ($INST_MODUS$ = "UPDATE")
;	if GetProductProperty("forceConfigurationUpdate","off") = "on"
;		Set $INST_MODUS$="INSTALL"
;	endif
;endif

if $INST_SubModus$ = "BOOTIMAGE"
	comment "do not reboot in BOOTIMAGE mode because:"
	comment "    opsi-client-agent installation is part of the postinst.d mechanism"
	comment "    if the machine reboots no script will run after the opsi-client-agent script"
	Set $INST_AllowReboot$ = "false"
else
	Set $INST_AllowReboot$ = GetProductProperty("allow_reboot", $INST_AllowReboot$)
endif

sub_shutdown_starter_fix
sub_read_configuration
sub_copy_files
sub_write_configuration
comment "is there a custom sub file ..."
if fileexists("%ScriptPath%\custom\custom.opsiscript")
	comment "Start the custom sub file ..."
	sub "%ScriptPath%\custom\custom.opsiscript"
endif
sub "%scriptpath%\subconfig.opsiscript"
noUpdateScript
sub_restore_productOnClient
sub_set_installation_status
sub_clean_up

if count($INST_ErrorList$) > "0"
	Logerror "There where important errors while running:"
	setloglevel = 6
	for %err% in $INST_ErrorList$ do logError "%err%"
endif

comment "all is done but make a reboot after terminating with the script"
if ($INST_AllowReboot$ = "true")
	ExitWindows /Reboot
endif
		

;******************************End main action***************************************
;*********************************************************************
;*********************************************************************

[DosInAnIcon_open_winsxs]
takeown /r /f c:\windows\winsxs
"%SCRIPTPATH%\xcacls" c:\windows\winsxs /t /e /g %USERNAME%:F /y
move C:\windows\winsxs\pending.xml C:\windows\winsxs\pending.xml.orig

;*****************************start of main sub sections ****************************************

;***************************read configuration***************************************

[sub_shutdown_starter_fix]
comment "Check for initial shutdown_starter fix ...."
comment "Do we run in shutdown - mode ...."
set $resultlist$ = GetProcessList
set $resultstr$ = takeFirstStringContaining($resultlist$,"opsiclientd_event_starter.exe")
if not ($resultstr$ = "")
	comment "on_shutdown is running we - look if we need to fix the event starter before install ..."
	set $fix_shutdown_starter$ = "false"
	if fileexists32($INST_BaseDir$+"\on_shutdown\opsiclientd_event_starter.exe")
		set $resultlist$ = getFileInfoMap($INST_BaseDir$+"\on_shutdown\opsiclientd_event_starter.exe")
		if "4.0.7.0" = getValue("FileVersion", $resultlist$)
			set $fix_shutdown_starter$ = "true"
			LogWarning "Fix for opsiclientd_event_starter.exe needed. Wrong version in: "+$INST_BaseDir$+"\on_shutdown\opsiclientd_event_starter.exe"
		endif
	endif
	if $fix_shutdown_starter$ = "true"
		Files_install_on_shutdown_copy_files
		comment "we ignore allow_reboot because we are in shutdown mode"
		ExitWindows /ImmediateReboot
	else
		comment "No fix for opsiclientd_shutdown_starter.exe needed - going on"
	endif
else
	comment "We do not run in shutdown - mode ...."
endif


[sub_read_configuration]
comment "get installed gina"
set $INST_AktGina$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon] GinaDLL")

comment "get nextgina to chain"
set $INST_gina_to_chain$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-client-agent] NextGina")

if $INST_gina_to_chain$ = ""
	comment "no nextGina entry at opsi-client-agent - let us look at the old preloginloader key"
	set $INST_gina_to_chain$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\preloginloader] NextGina")
endif

if $INST_gina_to_chain$ = ""
	comment "no new opsigina installed - let us look for opsi pgina installation"
	set $INST_gina_to_chain$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\preloginloader] pathMSGina")
endif

if $INST_gina_to_chain$ = ""
	comment "no new opsi pgina installed - let us look for legacy opsi installation"
	set $INST_old_reg_gina_installed$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\pGina\Opsi] Installed")
	if $INST_old_reg_gina_installed$ = "1"
		set $INST_gina_to_chain$ = GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\pGina] pathMSGina")
	endif
endif

if ($INST_gina_to_chain$ = "") and ("64 Bit System" = $INST_SystemType$)
	comment "perhaps opsi-client-agent previously installed into wrong registry tree with 32-bit settings"
	set $INST_gina_to_chain$ = GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-client-agent] NextGina")
endif


if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") < "0"
	if ($INST_AktGina$ = "")
		comment "opsigina seems not be installed and we are on a fresh XP"
		set $INST_gina_to_chain$ = "msgina.dll"
	else
		if ($INST_gina_to_chain$ = "")
			comment "opsigina seems not be installed and there is active gina"
			set $INST_gina_to_chain$ = $INST_AktGina$
		else
			if NOT ( $INST_gina_to_chain$ = $INST_AktGina$ )
				comment "WARNING: opsigina seems installed and there is active gina different from opsi.org\opsi-client-agent] NextGina"
				LogWarning "opsigina seems installed and there is active gina different from opsi.org\opsi-client-agent] NextGina"
				set $INST_gina_to_chain$ = $INST_AktGina$
			else
				comment "opsigina seems be installed and so don't change the gina to chain"
			endif
		endif
	endif
	if strPos($INST_gina_to_chain$, "'") = "1"
		comment "Path to gina is quoted with single marks - we need double marks to avoid syntax errors"
		set $INST_gina_to_chain$ = unquote($INST_gina_to_chain$,"'")
		set $INST_gina_to_chain$ = '"'+ $INST_gina_to_chain$ + '"'
	endif
endif ; winxp / win2k
Set $GEN_bootmode$    	 = GetValueFromInifile($INST_cfgini$, "general", "bootmode", $GEN_bootmode$)

comment "Getting dns domain from config file"
Set $INST_DnsDomainName$ = GetValueFromInifile($INST_cfgini$, "general", "dnsdomain", $INST_DnsDomainName$)
comment "Getting dns domain from custom config file"
Set $INST_DnsDomainName$ = GetValueFromInifile($INST_custom_Cfgini$, "general", "dnsdomain", $INST_DnsDomainName$)

if ($INST_DnsDomainName$ = "")
	comment "Failed to get dns from config file, trying dns domain from wmic"
	Set $INST_ResultList$ = getOutStreamFromSection("DosInAnIcon_getDnsByWmic")
	Set $INST_DnsDomainName$ = TakeString(1,splitString(TakeString(0,$INST_ResultList$),"="))
endif

; dont log the pckey
SetLogLevel=$INST_PasswdLogLevel$
Set $SHI_pckey$ = GetValueFromInifile($INST_cfgini$, "shareinfo", "pckey", "")
; start logging again
SetLogLevel=$INST_DefaultLoglevel$

comment "Getting values from from config file"
Set $OCD_global.log_level$ 		    = GetValueFromInifile($INST_cfgini$, "opsiclientd", "global.log_level", $OCD_global.log_level$)
Set $OCD_config_service.url$ 		    = GetValueFromInifile($INST_cfgini$, "opsiclientd", "config_service.url", $OCD_config_service.url$)
Set $OCD_config_service.connection_timeout$ = GetValueFromInifile($INST_cfgini$, "opsiclientd", "config_service.connection_timeout", $OCD_config_service.connection_timeout$)
Set $OCD_control_server.port$ 		    = GetValueFromInifile($INST_cfgini$, "opsiclientd", "control_server.port", $OCD_control_server.port$)
Set $OCD_notification_server.port$ 	    = GetValueFromInifile($INST_cfgini$, "opsiclientd", "notification_server.port", $OCD_notification_server.port$)
Set $OCD_open_firewall_for_control_server$  = GetValueFromInifile($INST_cfgini$, "opsiclientd", "open_firewall_for_control_server", $OCD_open_firewall_for_control_server$)
Set $OLB_LogLevel$ 			    = GetValueFromInifile($INST_cfgini$, "opsiLoginBlocker", "LogLevel", $OLB_LogLevel$)
Set $OLB_LoginBlockerStart$          	    = GetValueFromInifile($INST_cfgini$, "opsiLoginBlocker", "LoginBlockerStart", $OLB_LoginBlockerStart$)
Set $OLB_LoginBlockerTimeoutConnect$	    = GetValueFromInifile($INST_cfgini$, "opsiLoginBlocker", "LoginBlockerTimeoutConnect", $OLB_LoginBlockerTimeoutConnect$)

comment "Getting values (overwrite)from from custom config file"
Set $OCD_global.log_level$ 		    = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "global.log_level", $OCD_global.log_level$)
Set $OCD_config_service.url$ 		    = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "config_service.url", $OCD_config_service.url$)
Set $OCD_config_service.connection_timeout$ = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "config_service.connection_timeout", $OCD_config_service.connection_timeout$)
Set $OCD_control_server.port$ 		    = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "control_server.port", $OCD_control_server.port$)
Set $OCD_notification_server.port$ 	    = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "notification_server.port", $OCD_notification_server.port$)
Set $OCD_open_firewall_for_control_server$  = GetValueFromInifile($INST_custom_Cfgini$, "opsiclientd", "open_firewall_for_control_server", $OCD_open_firewall_for_control_server$)
Set $OLB_LogLevel$ 			    = GetValueFromInifile($INST_custom_Cfgini$, "opsiLoginBlocker", "LogLevel", $OLB_LogLevel$)
Set $OLB_LoginBlockerStart$          	    = GetValueFromInifile($INST_custom_Cfgini$, "opsiLoginBlocker", "LoginBlockerStart", $OLB_LoginBlockerStart$)
Set $OLB_LoginBlockerTimeoutConnect$	    = GetValueFromInifile($INST_custom_Cfgini$, "opsiLoginBlocker", "LoginBlockerTimeoutConnect", $OLB_LoginBlockerTimeoutConnect$)

; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)
if contains( $OCD_config_service.url$, "," )
	Set $OCD_POSSIBLE_config_service.urls$ = splitString( $OCD_config_service.url$, "," )
	for %possible_config_service_url% in $OCD_POSSIBLE_config_service.urls$ do sub_test_config_service_url
	Set $OCD_config_service.url$ = $OCD_WORKING_config_service.url$
endif

; change value given by config.ini only if property present
if GetProductProperty ("LoginBlockerStart","") = "on"
	Set $OLB_LoginBlockerStart$ = "1"
endif
if GetProductProperty ("LoginBlockerStart","") = "off"
	Set $OLB_LoginBlockerStart$ = "0"
endif

comment "Getting values from from config file"
Set $INST_Service_User$          	= GetValueFromInifile($INST_cfgini$, "installation", "service_user", $INST_Service_User$)
Set $INST_Service_Password$      	= GetValueFromInifile($INST_cfgini$, "installation", "service_password", $INST_Service_Password$)
Set $INST_service_hidden_password$      	= GetValueFromInifile($INST_cfgini$, "installation", "service_hidden_password", $INST_service_hidden_password$)

comment "Getting values (overwrite)from from custom config file"
Set $INST_Service_User$          	= GetValueFromInifile($INST_custom_Cfgini$, "installation", "service_user", $INST_Service_User$)
Set $INST_Service_Password$      	= GetValueFromInifile($INST_custom_Cfgini$, "installation", "service_password", $INST_Service_Password$)
Set $INST_service_hidden_password$      	= GetValueFromInifile($INST_custom_Cfgini$, "installation", "service_hidden_password", $INST_service_hidden_password$)

if not ($INST_service_hidden_password$ = "")
	SetLogLevel=$INST_PasswdLogLevel$
	Set $INST_Service_Password$ = base64DecodeStr($INST_service_hidden_password$)
	SetLogLevel=$INST_DefaultLoglevel$
endif

; ******* sysconfini wird bei PXE-basierter Grundinstallation vom Bootimage angelegt.
if (FileExists ($INST_sysconfini$))
	DefVar $DepotUrl$
	Set $INST_NetBootProductname$ = GetValueFromInifile($INST_sysconfini$, "general", "productid", $INST_NetBootProductname$)
	Set $INST_pcname$             = GetValueFromInifile($INST_sysconfini$, "general", "pcname", $INST_pcname$)
	Set $INST_DnsDomainName$      = GetValueFromInifile($INST_sysconfini$, "general", "dnsdomain", $INST_DnsDomainName$)
	Set $DepotUrl$                = GetValueFromInifile($INST_sysconfini$, "general", "depoturl", $DepotUrl$)
	set $INST_DepotServer$ = takeString(2,splitString($DepotUrl$,"/"))
endif

if $INST_pcname$ = ""
	set $INST_pcname$ = %pcname%
	comment "This is normally the hostname but some times it is the FQDN - so we have to get the hostname from the fqdn"
	set $INST_pcname$ = takeString(0,splitstring($INST_pcname$,"."))
endif
Set $INST_pcname$ = lower($INST_pcname$)
Set $INST_pcname$ = stringReplace($INST_pcname$,"_","-")
if not ($INST_DnsDomainName$ = "")
	Set $INST_ClientId$ = $INST_pcname$ + "." + $INST_DnsDomainName$
endif

if $GEN_bootmode$ = ""
	Set $GEN_bootmode$ = "BKSTD"
endif

if $INST_Modus$ = "INSTALL"
	if $INST_SubModus$ = "BOOTIMAGE"
		Set $GEN_bootmode$    = "REINS"
	endif ; BOOTIMAGE

	if $INST_SubModus$ = "CREATE_CLIENT"
		sub_sub_create_client
	endif ; CREATE_CLIENT
endif ; INSTALL  

if (($SHI_pckey$ = "") or ($SHI_pckey$ = "#@PCKEY#"))
	; dont log the pckey
	SetLogLevel=$INST_PasswdLogLevel$
	if FileExists ($INST_OpsiclientdConf$)
		Set $SHI_pckey$       = GetvalueFromInifile($INST_OpsiclientdConf$, "global", "opsi_host_key", $SHI_pckey$)
		Set $INST_ClientId$   = GetvalueFromInifile($INST_OpsiclientdConf$, "global", "host_id", $INST_ClientId$)
		Set $INST_pcname$     = TakeString(0,SplitString($INST_ClientId$,"."))
	else
		if FileExists ("%ProgramFilesDir%\opsi.org\preloginloader\opsiclientd\opsiclientd.conf")
			Set $SHI_pckey$       = GetvalueFromInifile("%ProgramFilesDir%\opsi.org\preloginloader\opsiclientd\opsiclientd.conf", "global", "opsi_host_key", $SHI_pckey$)
			Set $INST_ClientId$   = GetvalueFromInifile("%ProgramFilesDir%\opsi.org\preloginloader\opsiclientd\opsiclientd.conf", "global", "host_id", $INST_ClientId$)
			Set $INST_pcname$     = TakeString(0,SplitString($INST_ClientId$,"."))
		else
			if FileExists ($INST_BaseDir$+"\cfg\locked.cfg")
				Set $SHI_pckey$       = GetvalueFromInifile($INST_BaseDir$+"\cfg\locked.cfg", "shareinfo", "pckey", $SHI_pckey$)
			else
				if FileExists ("%ProgramFilesDir%\opsi.org\preloginloader\cfg\locked.cfg")
					Set $SHI_pckey$       = GetvalueFromInifile("%ProgramFilesDir%\opsi.org\preloginloader\cfg\locked.cfg", "shareinfo", "pckey", $SHI_pckey$)
				else
					SetLogLevel=$INST_DefaultLoglevel$
					logError "pckey not found - please reinstall opsi-client-agent"
					isFatalError
				endif
			endif
		endif
	endif
	; start logging again
	SetLogLevel=$INST_DefaultLoglevel$
endif

; not a property since 4.0.7
;set $INST_uac_level$ = GetProductProperty ("UAC_level", $INST_uac_level$)

;if ($INST_SubModus$="BOOTIMAGE") and ($INST_uac_level$ = "0")
;	comment "if we come from a new installation set UAC to MS Standard if not other value is given ..."
;	set $INST_uac_level$ = "2"
;endif

;moved to subconfig.opsiscript
;set $INST_create_software_on_demand_menue_entry$ = GetProductProperty ("create_software_on_demand_menue_entry", $INST_create_software_on_demand_menue_entry$)

if $INST_MAC$ = ""
	sub_sub_try_to_get_my_mac
endif

if ($INST_DepotServer$ = "")
	sub_sub_get_depot_netbiosname
endif

if $INST_MODUS$ = "INSTALL"
	comment "Connect to service if not connected yet...."
	set $INST_Authenticated$ = "false"
	markErrorNumber
	opsiservicecall_authenticated 
	if errorsOccuredSinceMark > 0
		comment "was not authenticated -> retry scripted login by client ID and hostkey"
		comment "Try to open new network connection"
		markErrorNumber
		SetLogLevel=$INST_PasswdLogLevel$
		opsiservicecall_authenticated /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$
		if errorsOccuredSinceMark > 0
			markErrorNumber
			comment "scripted login by client id / hostkey failed -> we don't retry "
			comment "giving up"
			set $INST_Authenticated$ = "false"
		else
				comment "now authenticated "
				set $INST_Authenticated$ = "true"
		endif
		SetLogLevel=$INST_DefaultLoglevel$
	else
		set $INST_Authenticated$ = "true"
	endif
	if ($INST_Authenticated$ = "true") and (CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.8")>="0")
		LoadProductProperties $INST_ClientId$ "opsi-client-agent"
	endif
endif ; INSTALL



sub_sub_read_preloginvista_installation_state
sub_sub_read_preloginloader_installation_state

; moved to subconfig.opsiscript
;comment "read on_shutdown settings"
;if $INST_SystemType$ = "64 Bit System"
;	set $on_shutdown_RunScript$ = $INST_BaseDir$+"\on_shutdown\doinstall64.cmd"
;else
;	set $on_shutdown_RunScript$ = $INST_BaseDir$+"\on_shutdown\doinstall32.cmd"
;endif
;if $INST_NTVersion$ < "6"
;	Set $on_shutdown_RegKeyB$ = "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\System\Scripts\Shutdown"
;else
;	Set $on_shutdown_RegKeyB$ = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Shutdown"
;endif
;
;Set $on_shutdown_install$ = GetProductProperty("on_shutdown_install", "off")
;Set $on_shutdown_install_set_policy$ = GetProductProperty("on_shutdown_install_set_policy", "on")

comment "get user which should mount the depot share from service"
markErrorNumber
Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getGeneralConfigValue_depotuser')
if errorsOccuredSinceMark > 0
	comment "Servicall failed - retry ..."
	sleepseconds 2
	markErrorNumber
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getGeneralConfigValue_depotuser')
	if errorsOccuredSinceMark > 0
		comment "Servicall failed - giving up -using default ..."
	endif
endif
if errorsOccuredSinceMark = 0
	set $INST_tmpstr$ = takestring(0, $INST_ServiceResult$)
	if not ("" = $INST_tmpstr$)
		Set $OCD_depot_server__username$ = $INST_tmpstr$
	endif
endif

if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.6") >= "0"
	; use newer function with list as default
	set $INST_ResultList2$ = createStringList("Dhcp","Dnscache")
	if CompareDotSeparatedNumbers("%WinstVersion%", "<", "4.11.6.2")
		set $INST_ResultList$ = GetProductPropertyList("depends_on_service",$INST_ResultList2$)
	else
		comment " using 4 argument GetProductPropertyList"
		set $INST_ResultList$ = GetProductPropertyList("depends_on_service",$INST_ResultList2$,$INST_ClientId$,"opsi-client-agent")
	endif
else
	set $INST_ResultList$ = GetProductPropertyList("depends_on_service","Dhcp")
endif
comment " get list of all services ..."
set $INST_FullServicelist$ = shellCall("%System%\sc queryex type= service state= all")
set $INST_FullServicelist$ = getListContaining($INST_FullServicelist$,"SERVICE_NAME")
set $OCD_depServicelist$ = emptyList($OCD_depServicelist$)
comment "check if requested services are existing ...."
for %servicestr% in $INST_ResultList$ do sub_check_services
if count($OCD_depServicelist$) INT> "0"
	set $OCD_depServices$ = composeString($OCD_depServicelist$,"|")
endif


comment "Handle setup_after_install ..."
if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.6") >= "0"
	; use newer function with list as default
	set $INST_ResultList2$ = emptylist($INST_ResultList2$)
	if CompareDotSeparatedNumbers("%WinstVersion%", "<", "4.11.6.2")
		; 2 argument version my crash here because productId is not known inside opsi-script outside service context
		set $INST_ResultList$ = GetProductPropertyList("setup_after_install",$INST_ResultList2$)
	else
		comment " using 4 argument GetProductPropertyList"
		set $INST_ResultList$ = GetProductPropertyList("setup_after_install",$INST_ResultList2$,$INST_ClientId$,"opsi-client-agent")
	endif
else
	set $INST_ResultList$ = GetProductPropertyList("setup_after_install","")
endif

if count($INST_ResultList$) > "0"
	for %product4setup% in $INST_ResultList$ do opsiServiceCall_setActionRequest
endif

; show what we have
comment "$INST_AllowReboot$ -> "+               $INST_AllowReboot$
comment "$INST_BaseDir$ -> "+                   $INST_BaseDir$
comment "$INST_Cfgini$ -> "+                    $INST_Cfgini$
comment "$INST_custom_Cfgini$ -> "+             $INST_custom_Cfgini$
comment "$INST_ClientExists$ -> "+              $INST_ClientExists$
comment "$INST_ClientId$ -> "+                  $INST_ClientId$
comment "$INST_ComputerName$ -> "+              $INST_ComputerName$
comment "$INST_Debug$ -> "+                     $INST_Debug$
comment "$INST_DepotServer$ -> "+               $INST_DepotServer$
comment "$INST_DnsDomainName$ -> "+             $INST_DnsDomainName$
comment "$INST_IPAddress$ -> "+                 $INST_IPAddress$
comment "$INST_ImmediateRebootFlag$ -> "+       $INST_ImmediateRebootFlag$
comment "$INST_MAC$ -> "+                       $INST_MAC$
comment "$INST_MinorOS$ -> "+                   $INST_MinorOS$
comment "$INST_Modus$ -> "+                     $INST_Modus$
comment "$INST_NetBootProductname$ -> "+        $INST_NetBootProductname$
comment "$INST_NicIndex$ -> "+                  $INST_NicIndex$
comment "$INST_NotifierDir$ -> "+               $INST_NotifierDir$
comment "$INST_NTVersion$ -> "+                 $INST_NTVersion$
comment "$INST_ProductType$ -> "+               $INST_ProductType$
comment "$INST_OS$ -> "+                        $INST_OS$
comment "$INST_OpensslConfigFile$ -> "+         $INST_OpensslConfigFile$
comment "$INST_OpensslBaseDir$ -> "+            $INST_OpensslBaseDir$
comment "$INST_OpsiClientdCertificateFile$ -> "+$INST_OpsiClientdCertificateFile$
comment "$INST_OpsiclientdDir$ -> "+            $INST_OpsiclientdDir$
comment "$INST_OpsiclientdConf$ -> "+           $INST_OpsiclientdConf$
comment "$INST_OpsiclientdRPCDir$ -> "+         $INST_OpsiclientdRPCDir$
comment "$INST_ActionProcessorStarterDir$ -> "+ $INST_ActionProcessorStarterDir$
comment "$INST_Paramstr$ -> "+                  $INST_Paramstr$
comment "$INST_Pcname$ -> "+                    $INST_Pcname$
comment "$INST_RebootFlag$ -> "+                $INST_RebootFlag$
comment "$INST_Result$ -> "+                    $INST_Result$
comment "$INST_SYSTEMDRIVE$ -> "+               $INST_SYSTEMDRIVE$
comment "$INST_SYSTEMROOT$ -> "+                $INST_SYSTEMROOT$
comment "$INST_SYSTEMSYS$ -> "+                 $INST_SYSTEMSYS$
comment "$INST_ServiceName$ -> "+               $INST_ServiceName$
comment "$INST_Service_User$ -> "+              $INST_Service_User$
comment "$INST_service_hidden_password$ -> "+   $INST_service_hidden_password$
if not ($INST_service_hidden_password$ = "")
	SetLogLevel=$INST_PasswdLogLevel$
	comment "$INST_Service_Password$ -> "+          $INST_Service_Password$
	SetLogLevel=$INST_DefaultLoglevel$
endif
comment "$INST_pcDescription$ -> "+                 $INST_pcDescription$
comment "$INST_pcNotes$ -> "+                 $INST_pcNotes$

comment "$INST_ShortServiceUrl$ -> "+           $INST_ShortServiceUrl$
comment "$INST_SubModus$ -> "+                  $INST_SubModus$
comment "$INST_Sysconfini$ -> "+                $INST_Sysconfini$
comment "$INST_SystemType$ -> "+                $INST_SystemType$
comment "$INST_WinstDir$ -> "+                  $INST_WinstDir$
comment "$INST_WinstRegKey$ -> "+               $INST_WinstRegKey$
comment "$INST_AktGina$ -> "+                   $INST_AktGina$
comment "$INST_gina_to_chain$ -> "+             $INST_gina_to_chain$

comment "$INST_preloginvistaInstalled$ -> "+    $INST_preloginvistaInstalled$
comment "$INST_preloginloaderInstalled$ -> "+   $INST_preloginloaderInstalled$
comment "$INST_vcredistx86_installed$ -> "+     $INST_vcredistx86_installed$
;comment "$INST_uac_level$ -> "+                 $INST_uac_level$
;comment "$INST_create_software_on_demand_menue_entry$ -> "+  $INST_create_software_on_demand_menue_entry$


;******** Sektion general **********      

comment "$GEN_bootmode$ -> "+                   $GEN_bootmode$

;******** Sektion shareinfo **********         
if  ($INST_debug$ = "on")
	comment "$SHI_pckey$ -> "+$SHI_pckey$
endif

;******** Sektion opsiclientd **********     

comment "$OCD_global.log_level$ -> "+                   $OCD_global.log_level$
comment "$OCD_config_service.url$ -> "+                 $OCD_config_service.url$
comment "$OCD_config_service.connection_timeout$ -> "+  $OCD_config_service.connection_timeout$
comment "$OCD_control_server.port$ -> "+                $OCD_control_server.port$
comment "$OCD_open_firewall_for_control_server$ -> "+   $OCD_open_firewall_for_control_server$
comment "$OCD_notification_server.port$ -> "+           $OCD_notification_server.port$
comment "$OCD_depot_server__username$ -> "+             $OCD_depot_server__username$
comment "$OCD_depServices$ -> "+                        $OCD_depServices$

;******** Sektion opsiLoginBlocker **********   
;comment "$OLB_ServiceConnectionTimeout$ -> "+           $OLB_ServiceConnectionTimeout$
comment "$OLB_LogLevel$ -> "+                           $OLB_LogLevel$
comment "$OLB_LoginBlockerStart$ -> "+                  $OLB_LoginBlockerStart$
comment "$OLB_LoginBlockerTimeoutConnect$ -> "+         $OLB_LoginBlockerTimeoutConnect$
;comment "$OLB_LoginBlockerTimeoutInstall$ -> "+         $OLB_LoginBlockerTimeoutInstall$
comment "$OLB_opsiServiceType$ -> "+                    $OLB_opsiServiceType$

;******** Sektion prelogin **********
comment "$PLG_UtilsDir$ -> "+                           $PLG_UtilsDir$

;******** Sektion on_shutdown **********
;comment "$on_shutdown_install$ -> "+                    $on_shutdown_install$
;comment "$on_shutdown_install_set_policy$ -> "+         $on_shutdown_install_set_policy$

;*********************************************************************

[sub_check_services]
if "" = takeFirstStringContaining($INST_FullServicelist$,"%servicestr%")
	logwarning "Requested service: %servicestr% not found. - will be ignored."
else
	comment "Requested service: %servicestr% found. - will be used."
	set $OCD_depServicelist$ = addtolist($OCD_depServicelist$, "%servicestr%")
endif

[sub_sub_create_client]
if ($OCD_config_service.url$ = "")
	set $OCD_config_service.url$ = "https://<opsiserver>:4447"
endif

comment "Connect to service....."
set $INST_userIsAdmin$ = "false"
markErrorNumber
opsiservicecall_authenticated 
if errorsOccuredSinceMark > 0
	set $INST_error$ = "true"
	comment "was not authenticated -> retry scripted login by default user/password"
else
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
endif 
if (takeString(0,$INST_ServiceResult$) = "false") or ($INST_error$ = "true") 
	comment "was not authenticated as admin-> retry scripted login by default user/password"
	markErrorNumber
	set $INST_error$ = "false"
	SetLogLevel=$INST_PasswdLogLevel$
	opsiservicecall_authenticated /username $INST_Service_User$ /password $INST_Service_Password$ /serviceurl $OCD_config_service.url$
	SetLogLevel=$INST_DefaultLoglevel$
	if errorsOccuredSinceMark > 0
		set $INST_error$ = "true"
		comment "scripted login by default user/password failed -> retry interactive"
	else
		markErrorNumber
		Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
		if errorsOccuredSinceMark > 0
			;set $INST_error$ = "true"
			;comment "check for user is admin failed failed -> retry interactive"
			LogWarning "Authenitcated user: " + $INST_Service_User$ + " is not a opsiadmin"
			comment "We go on and will see if this user has the credentilas to create a client"
			Set $INST_ServiceResult$ = createStringList("true")
		else
			set $INST_userIsAdmin$ = "true"
			comment "logged in as admin"
		endif
	endif	
	if (takeString(0,$INST_ServiceResult$) = "false") or ($INST_error$ = "true")
		set $INST_error$ = "false"
		;markErrorNumber
		SetLogLevel=$INST_PasswdLogLevel$
		opsiservicecall_authenticated /interactive /serviceurl $OCD_config_service.url$
		SetLogLevel=$INST_DefaultLoglevel$
		; we don't check for errors because /interactive loops at wrong logins
		; and increment errors
		;if errorsOccuredSinceMark > 0
		;  set $INST_error$ = "true"
		;  comment "interactive login by default user/password failed -> retry interactive"
		;else
		;  Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
		;endif
		markErrorNumber
		Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
		if errorsOccuredSinceMark > 0
			;set $INST_error$ = "true"
			;comment "check for user is admin failed failed -> retry interactive"
			LogWarning "Authenitcated user: " + $INST_Service_User$ + " is not a opsiadmin"
			comment "We go on and will see if this user has the credentilas to create a client"
			Set $INST_ServiceResult$ = createStringList("true")
		else
			set $INST_userIsAdmin$ = "true"
			comment "logged in as admin"
		endif
		if (takeString(0,$INST_ServiceResult$) = "false") or ($INST_error$ = "true")
			logerror "No admin login"
			pause "Error: No admin login - exiting"
			isFatalError
		endif
	else
		;comment "logged in as admin"
	endif
	if ($INST_userIsAdmin$ = "true") and (CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.8")>="0")
		LoadProductProperties $INST_ClientId$ "opsi-client-agent"
	endif
endif


comment "get MAC and IP for Service connection"
sub_sub_try_to_get_my_mac

if ($INST_DnsDomainName$ = "") and ($INST_userIsAdmin$ = "true")
	comment "*** Get domain ***"
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getDomain')
	Set $INST_DnsDomainName$ = takestring(0, $INST_ServiceResult$)
endif

comment "*** does the client exist? ***"
Set $INST_pcname$ = lower($INST_pcname$)
Set $INST_ClientId$ = $INST_pcname$ + "." + $INST_DnsDomainName$

if (($SHI_pckey$ = "") or ($SHI_pckey$ = "#@PCKEY#"))
	; dont log the pckey
	SetLogLevel=$INST_PasswdLogLevel$
	set $SHI_pckey$ = createNewOpsiHostKey
	SetLogLevel=$INST_DefaultLoglevel$
endif

if ($INST_userIsAdmin$ = "true")
	if ("" = takeFirstStringContaining(getReturnListFromSection('opsiservicecall_host_getIdents_for_clientId'), $INST_ClientId$))
		 comment "*** Create client ***"
		 Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_createClient')
	else
		SetLogLevel=$INST_PasswdLogLevel$
		Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getOpsiHostKey')
		Set $SHI_pckey$ = takestring(0, $INST_ServiceResult$)
		SetLogLevel=$INST_DefaultLoglevel$
	endif
else
	comment "*** Create client ***"
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_createClient')
endif

if not ($INST_userIsAdmin$ = "true")
	;  4.0.4.2-1 after creation use host/key autheticated service:
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_close_session')
	comment "after creation use host/key autheticated service"
	markErrorNumber
	SetLogLevel=$INST_PasswdLogLevel$
	opsiservicecall_authenticated /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$
	if errorsOccuredSinceMark > 0
		markErrorNumber
		comment "scripted login by client id / hostkey failed -> we don't retry "
		comment "giving up"
		set $INST_Authenticated$ = "false"
		isFatalError
	else
			comment "now authenticated "
			set $INST_Authenticated$ = "true"
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.8")>="0"
				LoadProductProperties $INST_ClientId$ "opsi-client-agent"
			endif
	endif
	SetLogLevel=$INST_DefaultLoglevel$
endif

; *** Get active service url ***
Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getNetworkconfig_hash')
set $OCD_config_service.url$ = takestring(1, splitString(takeFirstStringContaining($INST_ServiceResult$,"nextBootServiceURL"), '='))

; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)
if contains( $OCD_config_service.url$, "," )
	Set $OCD_POSSIBLE_config_service.urls$ = splitString( $OCD_config_service.url$, "," )
	for %possible_config_service_url% in $OCD_POSSIBLE_config_service.urls$ do sub_test_config_service_url
	Set $OCD_config_service.url$ = $OCD_WORKING_config_service.url$
endif


if $OCD_config_service.url$ = ""
	comment "Getting values from from config file"
	Set $OCD_config_service.url$ = GetvalueFromInifile($INST_cfgini$, "opsiclientd", "config_service.url", "")
	comment "Getting values (overwrite)from from custom config file"
	Set $OCD_config_service.url$ = GetvalueFromInifile($INST_custom_Cfgini$, "opsiclientd", "config_service.url", $OCD_config_service.url$)
	; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)
	if contains( $OCD_config_service.url$, "," )
		Set $OCD_POSSIBLE_config_service.urls$ = splitString( $OCD_config_service.url$, "," )
		for %possible_config_service_url% in $OCD_POSSIBLE_config_service.urls$ do sub_test_config_service_url
		Set $OCD_config_service.url$ = $OCD_WORKING_config_service.url$
	endif
	
endif

; uncommented for experimental 4.0.4.2-1 :
;; *** Get hostkey1 ***
;	SetLogLevel=$INST_PasswdLogLevel$
;markErrorNumber
;Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getOpsiHostKey')
;Set $SHI_pckey$ = takestring(0, $INST_ServiceResult$)
;SetLogLevel=$INST_DefaultLoglevel$
;if errorsOccuredSinceMark > 0
;	; *** Get hostkey1 ***
;	SetLogLevel=$INST_PasswdLogLevel$
;	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_createClient')
;	markErrorNumber
;	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getOpsiHostKey')
;	if errorsOccuredSinceMark > 0
;		LogError "Could not get hostkey - aborting"
;		Pause "Could not get hostkey - aborting"
;		isFatalError
;	else
;		Set $SHI_pckey$ = takestring(0, $INST_ServiceResult$)
;		SetLogLevel=$INST_DefaultLoglevel$
;	endif
;endif

;********************** end read configuration ******************************      

;***************************copy files***************************************
[sub_copy_files]
DosInAnIcon_Stop_Preloginloader_Service
Registry_DeletePreloginloader
Files_del_loginblocker_log

if ($INST_Modus$ = "INSTALL")
	comment "clean all up"
	if FileExists($INST_BaseDir$+"\")
		comment "Stopping and removing existing services...."
		DosInAnIcon_Stop_opsiclientd_Service
		DosInAnIcon_unregister_opsiclientd_service
		Registry_DeleteOpsiclientd
		comment "Deleting old files...."
		Files_Delete_OCA_BaseDir
	endif
endif ; INSTALL
markErrorNumber
Files_copy_winst
Files_copy_uninst
Files_copy_custom
if errorsOccuredSinceMark > 0
	comment "copy failed - let us abort"
	logerror "Copy of files are failed -exiting"
	if $INST_SubModus$="CREATE_CLIENT"
		pause "Error: Copy of files are failed - Did you run this script with elevated rights 'as administrator' - aborting"
	endif
	isFatalError
endif

if ($INST_SystemType$ = "64 Bit System") and (CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") < "0")
	comment "we need vc_redist X64 at xp64 and 2003x64 to run the loginblocker"
	Winbatch_vc_redist_exe_64
	;Sub_check_exitcode
	comment "Test for installation success via exit code"
	set $INST_ExitCode$ = getLastExitCode
	if not (($INST_ExitCode$ = "0") or ($INST_ExitCode$ = "1603"))
		comment "installation seems to be failed - lets try with msi"
		Winbatch_vc_redist_msi_64
		;Sub_check_exitcode
	endif
endif

comment "try to kill opsibinaries before installing them"
KillTask "notifier.exe"
KillTask "opsiclientd_rpc.exe"

comment "install openssl ...."
Files_indy_OpenSSL
comment "installing opsiclientd py2exe files and required libraries"
if CompareDotSeparatedNumbers($INST_NTVersion$,"6.2") >= "0"
	; (Deactivated): Workarround for W8.1+10 DLL Load Problem
	; comment "Using old opsiclientd version to first deploy on client"
	; set $OCD_DIST_DIR$ = "dist.nt5"
	; Files_copy_py2exe
	; After that everything should work with new version
	; set $OCD_DIST_DIR$ = "dist"
	Files_copy_py2exe
else
	Files_copy_py2exe
endif

comment "copy lazarus based notifier over old pythen version"
Files_copy_opsinotifier


;comment "unzip opsicleintd.exe ... (W8.1 + 10 workaround)"
;Files_copy_opsiclientd_exe2
comment "Update SSL DLLs from opsi-script to opsiclientd"
if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
	Files_copy_ssl_to_py2exe
endif
comment "copy custom files for opsiclientd (notifier, opsiclientd.conf, ..)"
Files_copy_custom_opsiclientd
; http://indy.fulgan.com/SSL/
;Files_copy_shining_light_OpenSSL_exe
;http://innounp.sourceforge.net/
;DosInAnIcon_shining_light_OpenSSL_unpack
;Files_copy_shining_light_OpenSSL_files
;Registry_shining_light_OpenSSL
;Registry_shining_light_OpenSSL_uninstall
if (FileExists($INST_BaseDir$+"\utils") or FileExists($INST_BaseDir$+"\prelogin"))
	comment "removing detected old prelogin files..."
	DosInAnIcon_Stop_Preloginloader_Service
	Registry_DeletePreloginloader
	Files_del_utils
	Files_del_prelogin
endif

comment "copying loginblocker"
if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
	comment "we are on vista or above "
	if ($INST_SystemType$ = "64 Bit System")
		Files_copy_vista_loginblocker_64 /Sysnative
	else
		Files_copy_vista_loginblocker_32
		Files_del_cmd64
	endif ; 32/64
endif ; nt6

if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") < "0"
	if ($INST_SystemType$ = "64 Bit System")
		Files_copy_xp_loginblocker_64
	else
		if CompareDotSeparatedNumbers($INST_NTVersion$,"5.0") = "0"
			Files_copy_xp_loginblocker_win2k
			;Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$ + "\SetACL 2.2.0\SetACL 2.2.0\Command line version\x86"
			Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$ 
			;Set $INST_SetAclDir$ = $INST_OpsiUtilitiesdDir$ + "\SetACL 2.1.1\SetACL 2.1.1\Command line version\x86"
		else
			Files_copy_xp_loginblocker_32
		endif
		Files_del_cmd64
	endif
endif

comment "copy files for install_on_shutdown"
Files_install_on_shutdown_copy_files

;**************************** end copy files *****************************************

;***************************write configuration***************************************
[sub_write_configuration]
if $INST_Modus$ = "INSTALL"
	Registry_SetGeneralEntries
	if ($INST_debug$ = "on") 
		Files_save_config_for_debug
	endif 
	
	;if $INST_MinorOS$ = "WinXP"
	if ($INST_NTVersion$ = "5.1") or ($INST_NTVersion$ = "5.2")
		if $INST_AktGina$ = ""
			Registry_SetRemoveMsginaOnDeinst
		endif
	endif ; winxp
endif ; INSTALL  

;*********************************************************
comment "configurations we do also at update mode"
;*********************************************************
comment "uninstall registry entries"
Registry_SetUninstallEntries
comment "standard registry entries"
Registry_SetGeneralEntries
comment "add registry key for shutdown requests"
Registry_add_shutdown_key
comment "make all depotshares trusted for the 32 Bit opsi-client-agent"
comment "get all depot servers :"
if ($INST_SubModus$ = "BOOTIMAGE") or ($INST_SubModus$ = "CONFIG_INI")
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getDepotshares /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$')
else
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getDepotshares')
endif 
comment " take the string :"
set $INST_Result$ = takeString(0, $INST_ServiceResult$)
comment " remove trailing brackets and quote :"
set $INST_Result$ = takeString(0, splitstring($INST_Result$,'"]'))
comment " remove heading brackets and quote :"
set $INST_Result$ = takeString(1, splitstring($INST_Result$,'["'))
comment " split servers in to list :"
set $INST_ResultList$ = splitstring($INST_Result$,'","')
comment "write all depots to the registry :"
for %depotId% in $INST_ResultList$ do Registry_hklm_set_depotshare_trusted
for %depotId% in $INST_ResultList$ do Registry_hklm_set_depotshare_trusted /Sysnative
comment "get netbiosnames from depots :"
comment "first clear the resultlist:"
set $INST_ResultList2$ = getsubList(0:0,$INST_ResultList2$)
; this is a dirty hack. It is used until we can ask host_getObjects with filter
; so we assume, that the first part of the fqdn is identical with the netbiosname
for %depotId% in $INST_ResultList$ do set $INST_ResultList2$ = addtolist($INST_ResultList2$, takeString(0,splitString("%depotId%",".")))
for %depotId% in $INST_ResultList2$ do Registry_hklm_set_depotshare_trusted
for %depotId% in $INST_ResultList2$ do Registry_hklm_set_depotshare_trusted /Sysnative

comment "tell server my mac address"
if not ($INST_MAC$ = "")
	opsiservicecall_setMacAddress
endif
comment "Open c:\tmp worldwide writable"
Files_create_ctmp
DosInAnIcon_open_ctmp
comment "create c:\opsi.org"
Files_create_c_opsiorg
comment "lock c:\opsi.org -> for administrators only"
;DosInAnIcon_lock_c_opsiorg
set $lockdir$ = $OCD_OpsiVarDir$+"\log"
DosInAnIcon_lock_lockdir
set $lockdir$ = $OCD_OpsiVarDir$+"\opsiclientd"
DosInAnIcon_lock_lockdir
set $lockdir$ = $OCD_OpsiVarDir$+"\tmp"
DosInAnIcon_lock_lockdir
set $lockdir$ = $OCD_OpsiVarDir$+"\log"
DosInAnIcon_lock_lockdir
set $lockdir$ = $OCD_OpsiVarDir$+"\cache"
DosInAnIcon_lock_lockdir
set $lockdir$ = $OCD_OpsiVarDir$+"\data"
DosInAnIcon_lock_lockdir

; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)
opsiservicecall_setGeneralConfigValue_clientconfig_configserver_url
Set $OCD_config_service.url$ = stringReplace( $OCD_config_service.url$, "/rpc", "" )
comment "$OCD_config_service.url$ = " + $OCD_config_service.url$

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.10")
	Patches_opsiclientd_conf_rest $INST_OpsiclientdConf$ /encoding "utf8" 
else
	Patches_opsiclientd_conf_rest $INST_OpsiclientdConf$
endif

if not (($SHI_pckey$ = "") or ($SHI_pckey$ = "#@PCKEY#"))
	comment "dont log the pckey"
	SetLogLevel=$INST_PasswdLogLevel$
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.10")
		Patches_opsiclientd_conf_key $INST_OpsiclientdConf$ /encoding "utf8" 
	else
		Patches_opsiclientd_conf_key $INST_OpsiclientdConf$ 
	endif
	comment "start logging again"
	SetLogLevel=$INST_DefaultLoglevel$
endif
Patches_opsiclientd_cnf $INST_opensslConfigFile$
DosInAnIcon_generate_opsiclientdCertificate
comment "First try to install service ...."
DosInAnIcon_opsiclientd_register_service_exe
if not ("0" = getlastexitcode)
	logerror "opsiclientd_register_service failed"
endif
comment "set start to auto (2) if it was deactivated (4)"
Registry_ActivateOpsiclientd
if ($INST_NTVersion$ = "5.0")
else
	if ($INST_NTVersion$ = "5.1") or ($INST_NTVersion$ = "5.2")
	else
		if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
			;if $INST_uac_level$ > "0"
			;	comment "setting UAC Level to: "+$INST_uac_level$"
			;	if $INST_uac_level$ = "1"
			;		Registry_UAC_on_1 /Sysnative
			;	else
			;		if $INST_uac_level$ = "2"
			;			Registry_UAC_on_2 /Sysnative
			;		else
			;			if $INST_uac_level$ = "3"
			;				Registry_UAC_on_3 /Sysnative
			;			else
			;				if $INST_uac_level$ = "4"
			;					Registry_UAC_on_4 /Sysnative
			;				else
			;					LogWarning "no or unknown $INST_uac_level$ set: "+$INST_uac_level$
			;				endif
			;			endif
			;		endif
			;	endif
			;endif ; change uac
			;Registry_UAC_on_special /Sysnative
			;Registry_UAC_off /Sysnative
		else
			LogError "unknown OS: "+$INST_MinorOS$+ " Version: "+$INST_NTVersion$
		endif
	endif
endif
if $OCD_open_firewall_for_control_server$ = "1"
	if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
		DosInAnIcon_open_firewall_for_control_server_nt6
	else
		DosInAnIcon_open_firewall_for_control_server
	endif
else
	if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
		DosInAnIcon_close_firewall_for_control_server_nt6
	else
		DosInAnIcon_close_firewall_for_control_server
	endif
endif
;;; comment "enable login logging - needed to detect logins by wmi"
;;; comment "export the existing policy"
;;; ;DosInAnIcon_export_security_policy
;;; comment "patch the exported policy: login monitoring: success,failed"
;;; ;Patches_secedit_pll "c:\tmp\secedit_pll.ini"
;;; comment "reimport the patched policy"
;;; ;DosInAnIcon_enable_login_looging
;;; DosInAnIcon_auditpol_enable_login_looging
comment "disable Data Execution Prevention (DEP) for opsiclientd.exe"
comment "This should be prevent problems on win2003"
DosInAnIcon_wmic_get_os_DataExecutionPrevention_SupportPolicy
Registry_disable_dep_opsiclientd /Sysnative
comment "make opsiclientd depending on dhcp and dnscache services"
Registry_opsiclientd_Service_depend_dhcp_dns
comment "Configure opsiclientd service restarts after failure"
; https://stackoverflow.com/questions/42620216/how-to-install-a-windows-service-with-first-failure-set-to-restart-the-servic
; https://technet.microsoft.com/de-de/library/cc742019(v=ws.10).aspx
if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
	set $INST_ExitCode$ = shellCall('sc failure "opsiclientd" reset= 0 actions= restart/10000/restart/20000/restart/60000')
	if not($INST_ExitCode$ = "0")
		LogError "Failed to configure opsiclientd service restarts after failure"
	endif
	shellCall('sc qfailure "opsiclientd"')
else
	set $INST_ResultList$ = shellCall('sc failure "opsiclientd" reset= 0 actions= restart/10000/restart/20000/restart/60000')
	if not(getLastexitCode = "0")
		LogError "Failed to configure opsiclientd service restarts after failure"
	endif
	set $INST_ResultList$ = shellCall('sc qfailure "opsiclientd"')
endif

if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") >= "0"
	if $OLB_LoginBlockerStart$ = "1"
		Registry_vista_loginblocker /Sysnative
	else
		Registry_vista_del_loginblocker /Sysnative
	endif
endif ; win vista

;if ($INST_MinorOS$ = "WinXP") or ($INST_MinorOS$ = "Win2k")
if CompareDotSeparatedNumbers($INST_NTVersion$,"6.0") < "0"
	if $OLB_LoginBlockerStart$ = "1"
		Registry_opsigina_opsi_Config /Sysnative
		Registry_set_loginblocker_start /Sysnative
	else
		Registry_set_loginblocker_start /Sysnative
	endif ; loginblocker start
	if ($INST_SystemType$ = "64 Bit System")
		winbatch_test_opsigina_64
	else
		winbatch_test_opsigina_32
	endif
	set $INST_ExitCode$ = getLastExitCode
	if $INST_ExitCode$ = "0"
		comment "opsigina test passed - install it"
		Registry_opsigina_winlogon_Config /Sysnative
	else
		LogError "opsigina test failed, so we don't install it. Test Exitcode was: " + $INST_ExitCode$
	endif
endif ; winXP

comment "protect opsi-clientagent against non administrative manipulations"
DosInAnIcon_lock_opsiclientagent

comment "*.opsiscript should be opend by winst32.exe"
Registry_open_opsiscript /sysnative

[Registry_open_opsiscript]
openkey [HKEY_CLASSES_ROOT\.opsiscript]
set "" = 'OpsiOrg.opsi-script.opsiscript'
openkey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript]
set "" = 'opsi-script command file'
openkey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\DefaultIcon]
set "" = '%ProgramFiles32Dir%\opsi.org\opsi-client-agent\images\opsi.ico'
openkey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open]
set "Icon" = '%ProgramFiles32Dir%\opsi.org\opsi-client-agent\images\opsi.ico'
openkey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open\Command]
set "" = '"%ProgramFiles32Dir%\opsi.org\opsi-client-agent\opsi-winst\winst32.exe" "%1"'

[Registry_open_opsiscript_hkcu]
openkey [HKEY_CLASSES_ROOT\*\shell\opsi log viewer\command]


;*****************************end write configuration****************************************

;*****************************clean up****************************************

[sub_clean_up]
if fileExists("c:\tmp\opsi")
	Files_Delete_ctmpopsi
endif
if fileExists("c:\tmp\opsi-client-agent")
	Files_Delete_ctmpopsi-client-agent
endif
if fileExists("c:\tmp\python")
	Files_Delete_ctmppython
endif
Files_del_utils
if FileExists("%ProgramFilesDir%\opsi.org\preloginloader\")
	Files_Delete_PLG_BaseDir
endif
if fileExists("c:\tmp\ssl_tmp")
	Files_Delete_ctmpssl
endif

Files_redist_cleanup_c
if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.3") >= "0"
	comment "checking if there is a drive d: ..."
	if isDriveReady("d:")
		Files_redist_cleanup_d
	endif
else
	if fileExists("d:\vcredist.bmp")
		Files_redist_cleanup_d
	endif
endif

;***********************

[Files_Delete_ctmpopsi]
del -sfc "c:\tmp\opsi\"

[Files_Delete_ctmpssl]
del -sfc "C:\tmp\ssl_tmp\"

[Files_Delete_ctmppython]
del -sfc "c:\tmp\python\"

[Files_Delete_ctmpopsi-client-agent]
del -sfc "c:\tmp\opsi-client-agent\"

[Files_del_utils]
del -sfc "$INST_BaseDir$\utils\"

[Files_del_prelogin]
del -sfc "$INST_BaseDir$\prelogin\"

[Files_redist_cleanup_c]
delete -fc c:\eula*.*
delete -fc c:\install*.*
delete -fc c:\vc_red.*
del -fc c:\vcredist.bmp
del -fc c:\.rnd
del -fc c:\globdata.ini

[Files_redist_cleanup_d]
delete -fc d:\eula*.*
delete -fc d:\install*.*
delete -fc d:\vc_red.*
del -fc d:\vcredist.bmp
del -fc d:\.rnd
del -fc d:\globdata.ini

[Files_del_loginblocker_log]
del -fc c:\opsi.org\log\opsi_loginblocker.txt
del -fc c:\opsi.org\log\opsiclientd_timeout.txt


;*****************************end clean up****************************************

;**************************** end of main sub sections*****************************************
;*********************************************************************
;*********************************************************************

;*************************** basic sections******************************************
[Files_copy_winst]
; do not use -V because it leads to broken winst on downgrade
copy -sc "%SCRIPTPATH%\opsi-winst\*.*" "$INST_WinstDir$"
copy -sVc "%SCRIPTPATH%\utilities\*.*" "$INST_BaseDir$\utilities\"
copy -sc "%SCRIPTPATH%\images\*.*" "$INST_BaseDir$\images\"

[Files_copy_uninst]
copy -sVc "%SCRIPTPATH%\uninst\*.*" "$INST_BaseDir$\uninst\"

[Files_copy_custom]
copy -sc "%SCRIPTPATH%\custom\winstskin\*.*" "$INST_BaseDir$\custom\winstskin"
copy -c "%SCRIPTPATH%\custom\config.ini" "$INST_BaseDir$\custom\"
copy -sc "%SCRIPTPATH%\custom\opsiclientkioskskin\*.*" "$INST_BaseDir$\custom\opsiclientkioskskin"

[Files_copy_custom_opsiclientd]
copy -sc "%SCRIPTPATH%\custom\notifier\*.*" "$INST_NotifierDir$"
copy -c "%SCRIPTPATH%\custom\opsiclientd.conf" "$INST_OpsiclientdDir$"

[Files_Delete_OCA_BaseDir]
del -sfc "$INST_BaseDir$\"

[Files_Delete_PLG_BaseDir]
del -sfc "%ProgramFilesDir%\opsi.org\preloginloader\"

[Registry_SetGeneralEntries]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\general]
Set "opsiconf"=REG_DWORD:1
Set "configlocal"=REG_DWORD:0
Set "bootmode" = "$GEN_bootmode$"

[Registry_SetUninstallEntries]
deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\opsi-preloginloader]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\opsi-client-agent]
set "DisplayName" = "opsi-client-agent"
set "DisplayVersion" = "$ProductVersion$"
set "DisplayIcon" = "$INST_WinstDir$\winst32.exe"
set "DisplayPublisher" = "uib gmbh, Mainz, Germany"
set "UninstallString" = '"$INST_WinstDir$\winst32.exe" /batch "$INST_BaseDir$\uninst\uninstall.opsiscript" "%opsiLogDir%\deinstall_opsi-client-agent.log" /PARAMETER DEINSTALL'
set "URLInfoAbout" = "http://opsi.org"
set "HelpLink" = "http://www.opsi.org/support/"

[DosInAnIcon_lock_opsiclientagent]
rem see http://setacl.sourceforge.net/


rem set rights for the base dir
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc" -rec cont_obj
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn setprot -op "dacl:so;sacl:nc" -rec cont_obj -actn setowner -ownr "n:S-1-5-32-544;s:y" -actn ace -ace "n:S-1-5-32-544;p:full;s:y"
rem remove users from dacl
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem remove power users from dacl
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn trustee -trst n1:S-1-5-32-547;s1:y;ta:remtrst;w:dacl"
rem Propagation of inherited permissions is enabled for all sub-objects whose permissons are also reset, resulting in only the specified permissions being active for a whole directory tree.
rem set the complete dir full access for admin and (read and execute) only for user
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -ace "n:S-1-5-32-545;p:read;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"

rem revoke users access for configuration file (opsi-hostkey)
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$INST_OpsiclientdDir$" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc"
"$INST_SetAclDir$\setacl.exe" -on "$INST_OpsiclientdDir$" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_OpsiclientdDir$" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"

rem revoke users access for uninst
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\uninst" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc"
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\uninst" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\uninst" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"

rem revoke users access for utilities
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\utilities" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc"
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\utilities" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\utilities" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"


rem grant user execute to the winst directory
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$INST_WinstDir$" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc" -rec cont_obj
rem therefore remove users from dacl
"$INST_SetAclDir$\setacl.exe" -on "$INST_WinstDir$" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem therefore set new rights
"$INST_SetAclDir$\setacl.exe" -on "$INST_WinstDir$" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -ace "n:S-1-5-32-545;p:read_ex;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"

rem grant user execute to the opsiclientdkiosk directory see subconfig.opsiscript
rem rem make the dacl not inherited
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\opsiclientkiosk" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc" -rec cont_obj
rem rem therefore remove users from dacl
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\opsiclientkiosk" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem rem therefore set new rights
rem "$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$\opsiclientkiosk" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -ace "n:S-1-5-32-545;p:read_ex;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"
rem 
rem show the resulting acl
"$INST_SetAclDir$\setacl.exe" -on "$INST_BaseDir$" -ot file -actn list -lst "f:own;w:d,s,o,g;i:y;s:b"
"$INST_SetAclDir$\setacl.exe" -on "$INST_OpsiclientdDir$" -ot file -actn list -lst "f:own;w:d,s,o,g;i:y;s:b"
"$INST_SetAclDir$\setacl.exe" -on "$INST_WinstDir$" -ot file -actn list -lst "f:own;w:d,s,o,g;i:y;s:b"



;*************************** end basic sections******************************************

;***************************vista sections******************************************
; Registry and UAC
;http://www.winfaq.de/faq_html/Content/tip2500/onlinefaq.php?h=tip2526.htm
;http://www.winfaq.de/faq_html/Content/tip2000/onlinefaq.php?h=tip2217.htm
;http://msdn.microsoft.com/en-us/library/cc232761%28v=prot.10%29.aspx
;http://www.rawcomputing.co.uk/vistatips36.html
;http://www.win-tipps-tweaks.de/cms/vista-tipps/vista-sicherheit/benutzerkontensteuerung-deaktivieren-teil-2.html


[Registry_UAC_off]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000000
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000000
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000000
Set "FilterAdministratorToken"   = REG_DWORD:00000000

[Registry_UAC_on_special]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000000
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000001
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000001
Set "FilterAdministratorToken"   = REG_DWORD:00000000


[Registry_UAC_on_1]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000002
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000001
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000001
Set "FilterAdministratorToken"   = REG_DWORD:00000000

[Registry_UAC_on_2]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000005
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000001
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000001
Set "FilterAdministratorToken"   = REG_DWORD:00000000

[Registry_UAC_on_3]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000005
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000001
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000000
Set "FilterAdministratorToken"   = REG_DWORD:00000000

[Registry_UAC_on_4]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
Set "ConsentPromptBehaviorAdmin" = REG_DWORD:00000000
Set "EnableInstallerDetection"   = REG_DWORD:00000001
Set "EnableLUA"                  = REG_DWORD:00000000
Set "EnableVirtualization"       = REG_DWORD:00000001
Set "PromptOnSecureDesktop"      = REG_DWORD:00000000
Set "FilterAdministratorToken"   = REG_DWORD:00000000


[Registry_hklm_set_depotshare_trusted]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\%depotId%] 
set "file"=reg_dword:0x00000001 
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap]
set "AutoDetect"=reg_dword:0x00000000 
set "IntranetName"=reg_dword:0x00000001 
set "ProxyByPass"=reg_dword:0x00000001 
set "UNCAsIntranet"=reg_dword:0x00000001 

;***************************end vista sections******************************************

; ******************** login blockers sections*****************************************
; ******************** credential provider login blockers sections********************

[Files_copy_vista_loginblocker_32]
copy -Vc "%SCRIPTPATH%\opsiloginblocker\32bit\*.dll" "%SYSTEM%"

[Files_copy_vista_loginblocker_64]
copy -Vc "%SCRIPTPATH%\opsiloginblocker\64bit\*.dll" "%SYSTEM%"

[Registry_vista_loginblocker]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
;set ""="OpsiLoginBlocker"
openkey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
set ""="OpsiLoginBlocker"
openkey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}\InprocServer32]
set ""="OpsiLoginBlocker.dll"
set "ThreadingModel"="Apartment"
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
set ""="OpsiLoginBlocker"
set "LoginBlockerStart"=reg_dword:0x00000001
set "LoginBlockerTimeoutConnect"=reg_dword:$OLB_LoginBlockerTimeoutConnect$
set "LoginBlockerLogLevel"=reg_dword:$OLB_LogLevel$
set "LoginBlockerLogDir"="%opsiLogDir%"

[Registry_vista_del_loginblocker]
deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
deletekey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]

; ******************** end credential provider login blockers sections********************
;************************ opsigina loginblocker sections **********************

[Files_copy_xp_loginblocker_32]
copy -Vc "%SCRIPTPATH%\opsigina\32bit\opsigina.dll" "$INST_BaseDir$\opsigina\"

[Files_copy_xp_loginblocker_win2k]
;copy -Vc "%SCRIPTPATH%\opsigina\win2k\opsigina.dll" "$INST_BaseDir$\opsigina\"
copy -Vc "%SCRIPTPATH%\opsigina\32bit\opsigina.dll" "$INST_BaseDir$\opsigina\"

[Files_copy_xp_loginblocker_64]
copy -Vc "%SCRIPTPATH%\opsigina\64bit\opsigina.dll" "$INST_BaseDir$\opsigina\"

[Registry_SetRemoveMsginaOnDeinst]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\preloginloader]
Set "RemoveMsginaOnDeinst"=REG_DWORD:1 
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-client-agent]
Set "RemoveMsginaOnDeinst"=REG_DWORD:1 

[Registry_opsigina_opsi_Config]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\preloginloader]
Set "NextGina" = '$INST_gina_to_chain$'
set "LoginBlockerLogLevel" = REG_DWORD:$OLB_LogLevel$
Set "LoginBlockerTimeoutConnect" = REG_DWORD:$OLB_LoginBlockerTimeoutConnect$
Set "opsiServiceType"            = REG_DWORD:$OLB_opsiServiceType$
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-client-agent]
Set "NextGina" = '$INST_gina_to_chain$'
set "LoginBlockerLogLevel" = REG_DWORD:$OLB_LogLevel$
Set "LoginBlockerTimeoutConnect" = REG_DWORD:$OLB_LoginBlockerTimeoutConnect$
Set "opsiServiceType"            = REG_DWORD:$OLB_opsiServiceType$

[Registry_opsigina_winlogon_Config]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon]
Set "GinaDLL" = "%ProgramFilesDir%\opsi.org\opsi-client-agent\opsigina\opsigina.dll"
set "DisableCAD" = REG_DWORD:0

[Registry_set_loginblocker_start]
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\preloginloader]
Set "LoginBlockerStart" = REG_DWORD:$OLB_LoginBlockerStart$
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-client-agent]
Set "LoginBlockerStart" = REG_DWORD:$OLB_LoginBlockerStart$

[winbatch_test_opsigina_64]
"%SCRIPTPATH%\opsigina\test\64bit\opsiginatest.exe" --testdll="$INST_BaseDir$\opsigina\opsigina.dll"

[winbatch_test_opsigina_32]
"%SCRIPTPATH%\opsigina\test\32bit\opsiginatest.exe" --testdll="$INST_BaseDir$\opsigina\opsigina.dll"



; ******************** end opsigina loginblocker sections *****************************************
; ******************** end loginblockers sections *****************************************


; ******************** opsiclientd sections *****************************************
[Patches_opsiclientd_conf_key]
Set [global] opsi_host_key=$SHI_pckey$
Set [global] host_id=$INST_ClientId$

[Patches_opsiclientd_conf_rest]
Set [config_service] url=$OCD_config_service.url$/rpc
Set [config_service] connection_timeout=$OCD_config_service.connection_timeout$
Set [control_server] port=$OCD_control_server.port$
Set [notification_server] port=$OCD_notification_server.port$
Set [global] log_level=$OCD_global.log_level$
Set [depot_server] username=$OCD_depot_server__username$

[Patches_opsiclientd_cnf]
Add [req] default_bits = 1024
Add [req] encrypt_key = yes
Add [req] distinguished_name = req_dn
Add [req] x509_extensions = cert_type
Add [req] prompt = no
Add [req_dn] C = DE
Add [req_dn] ST = RP
Add [req_dn] L = Mainz
Add [req_dn] O = UIB
Add [req_dn] OU = -
Set [req_dn] CN = $INST_ClientId$
Add [req_dn] emailAddress = info@uib.de
Add [cert_type] nsCertType = server

[DosInAnIcon_generate_opsiclientdCertificate]
;"%ProgramFilesDir%\OpenSSL\bin\openssl" req -new -x509 -days 1000 -nodes -config "$INST_opensslConfigFile$" -out "$INST_opsiclientdCertificateFile$" -keyout "$INST_opsiclientdCertificateFile$"
;"$INST_OpensslBaseDir$\bin\openssl" req -new -x509 -days 1000 -nodes -config "$INST_opensslConfigFile$" -out "$INST_opsiclientdCertificateFile$" -keyout "$INST_opsiclientdCertificateFile$"
"$INST_OpensslBaseDir$\openssl" req -new -x509 -days 1000 -nodes -config "$INST_opensslConfigFile$" -out "$INST_opsiclientdCertificateFile$" -keyout "$INST_opsiclientdCertificateFile$"
exit %ERRORLEVEL%

[DosInAnIcon_Stop_opsiclientd_Service]
net stop opsiclientd

[DosInAnIcon_unregister_opsiclientd_service]
"$INST_OpsiclientdDir$\opsiclientd.py" remove
"$INST_BaseDir$\opsiclientd.exe" -remove

[DosInAnIcon_open_firewall_for_control_server]
netsh firewall add portopening protocol = TCP port = $OCD_control_server.port$ name = opsiclientd-control-port

[DosInAnIcon_close_firewall_for_control_server]
netsh firewall delete portopening protocol = TCP port = $OCD_control_server.port$

[DosInAnIcon_open_firewall_for_control_server_nt6]
rem netsh firewall add portopening protocol = TCP port = $OCD_control_server.port$ name = opsiclientd-control-port
netsh advfirewall firewall delete rule name="opsiclientd-control-port"
netsh advfirewall firewall add rule name="opsiclientd-control-port" dir=in action=allow protocol=TCP localport=$OCD_control_server.port$

[DosInAnIcon_close_firewall_for_control_server_nt6]
rem netsh firewall delete portopening protocol = TCP port = $OCD_control_server.port$
netsh advfirewall firewall delete rule name="opsiclientd-control-port"


[Registry_DeleteOpsiclientd]
DeleteKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]

[Registry_DeactivateOpsiclientd]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "Start" = REG_DWORD:4
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\opsiclientd]
Set "Start" = REG_DWORD:4
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\opsiclientd]
Set "Start" = REG_DWORD:4

[Registry_ActivateOpsiclientd]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "Start" = REG_DWORD:2
set "ImagePath" = REG_EXPAND_SZ:'"$INST_BaseDir$\opsiclientd.exe"'

[Winbatch_opsiclientd_register_service_exe]
"$INST_BaseDir$\opsiclientd.exe" -auto -install

[DosInAnIcon_opsiclientd_register_service_exe]
"$INST_BaseDir$\opsiclientd.exe" -auto -install

[DosInAnIcon_opsiclientd_register_service_exe2]
copy /Y /V "%SCRIPTPATH%\$OCD_DIST_DIR$\opsiclientd.exe" "$INST_BaseDir$\"
"$INST_BaseDir$\opsiclientd.exe" -auto -install


[Registry_opsiclientd_Service_depend_win2k]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "DependOnService" = REG_MULTI_SZ:"Tcpip|LanmanWorkstation|Eventlog|winmgmt"

[Registry_opsiclientd_Service_depend_winxp]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "DependOnService" = REG_MULTI_SZ:"Tcpip|LanmanWorkstation|Eventlog|winmgmt|Nla"

[Registry_opsiclientd_Service_depend_winvista]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "DependOnService" = REG_MULTI_SZ:"Tcpip|LanmanWorkstation|Eventlog|winmgmt|NlaSvc"

[Registry_opsiclientd_Service_depend_dhcp_dns]
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\opsiclientd]
Set "DependOnService" = REG_MULTI_SZ:"$OCD_depServices$"

[Registry_opsiclientd_Service_set_timeout]
; default timeout is 30000 millis increase to 60000 millis
OpenKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control]
Set "ServicesPipeTimeout" = REG_DWORD:60000

[DosInAnIcon_wmic_get_os_DataExecutionPrevention_SupportPolicy]
@echo off
wmic os get DataExecutionPrevention_SupportPolicy

[Registry_disable_dep_opsiclientd]
OpenKey [HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers]
set "%ProgramFilesDir%\opsi.org\opsi-client-agent\opsiclientd.exe" = "DisableNXShowUI"

; ******************** end opsiclientd sections *****************************************

; ******************** Install helpers sections *****************************************
[sub_restore_productOnClient]
if fileExists("%opsiTmpDir%\productOnClients.json")
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.0") >= "0"
		comment "Found WIM-Capture meta data file. Try to rename it ...."
		Files_rename_poc
		if not(fileExists("%opsiTmpDir%\restored_productOnClients.json"))
			LogError "Renaming of productOnClients.json failed. So we do not change any opsi meta data."
			set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in sub_restore_productOnClient: Renaming of productOnClients.json failed. So we do not change any opsi meta data.")
		else
			;if fileExists("%opsiTmpDir%\switch_existing_products_to_setup.txt")
			opsiservicecall_setOption_addConfigStateDefaults_true
			comment "get configState capture.switch_installed_products_to_setup"
			Set $resultlist$ = getReturnListFromSection('opsiservicecall_get_configState_switch_installed_products_to_setup')
			Set $ArrayStr$ = takestring(0, $resultlist$)
			set $objectStr$ = jsonAsArrayGetElementByIndex($ArrayStr$,"0")
			Set $ArrayStr$ = jsonAsObjectGetValueByKey($objectStr$,"values")
			set $resultstr$ = jsonAsArrayGetElementByIndex($ArrayStr$,"0")
			;if (TakeString(0,SplitString(TakeString(1,SplitString(TakeString(0,$INST_ResultList$), '"values":[')), ']')) = "true")
			if lower($resultstr$) = "true"
				comment "get configState capture.do_not_change_setup_requests"
				Set $resultlist$ = getReturnListFromSection('opsiservicecall_get_configState_do_not_change_setup_requests')
				Set $ArrayStr$ = takestring(0, $resultlist$)
				set $objectStr$ = jsonAsArrayGetElementByIndex($ArrayStr$,"0")
				Set $ArrayStr$ = jsonAsObjectGetValueByKey($objectStr$,"values")
				set $do_not_change_setup_requests$ = lower(jsonAsArrayGetElementByIndex($ArrayStr$,"0"))
				comment "Mode: switch_installed_products_to_setup=true"
				if $do_not_change_setup_requests$ = "true"
					comment "Mode: do_not_change_setup_requests=true"
				else
					comment "Mode: do_not_change_setup_requests=false"
				endif
				Message "Restore opsi meta data from capturimage ..."
				comment "first get productId list from all existing poc to productIdInstalledList..."
				if $do_not_change_setup_requests$ = "true"
					comment "next get productId list from all setup poc to productIdSetupList..."
				endif
				comment "than restore captured backup data from file..."
				comment "than remove retored productIds from actual productIdInstalledList..."
				comment "than set for all in actual productIdInstalledList action request setup ..."
				if $do_not_change_setup_requests$ = "true"
					comment "than set for all in actual productIdSetupList action request setup ..."
				endif
				comment "Remove POC for oli-sysprep and opsi-wim-capture..."
				
				comment "load data from web service (installed) to $productIdInstalledList$..."
				markErrorNumber
				comment "load data from web service (installed)..."
				set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_installed_objects")
				Set $ArrayStr$ = takestring(0, $resultlist$)
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
				endif
				comment "extract productIds ..."
				comment "clean target list"
				set $productIdInstalledList$ = emptylist($productIdInstalledList$)
				set $pocList$ = emptylist($pocList$)
				comment "get stringlist "
				if jsonAsArrayCountElements($ArrayStr$) > "0"
					set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
					for %aktpoc% in $pocList$ do set $productIdInstalledList$ = addToList($productIdInstalledList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
					comment "These produtIds will be set to setup again after restore of backuped meta data"
				endif
				
				if $do_not_change_setup_requests$ = "true"
					comment "load data from web service (setup)..."
					set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_setup_objects")
					Set $ArrayStr$ = takestring(0, $resultlist$)
					if not(jsonIsValid($ArrayStr$))
						LogError "got no valid json from Service"
						;isFatalError
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
					endif
					if not(jsonIsArray($ArrayStr$))
						LogError "got no json Array from Service"
						;isFatalError
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
					endif
					comment "extract productIds ..."
					comment "clean target list"
					set $productIdSetupList$ = emptylist($productIdSetupList$)
					set $pocList$ = emptylist($pocList$)
					comment "get stringlist "
					if jsonAsArrayCountElements($ArrayStr$) > "0"
						set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
						for %aktpoc% in $pocList$ do set $productIdSetupList$ = addToList($productIdSetupList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
						comment "These produtIds will be set to setup again after restore of backuped meta data"
					endif
					comment "---------------------------"
					comment "load data from web service (once)..."
					set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_once_objects")
					Set $ArrayStr$ = takestring(0, $resultlist$)
					if not(jsonIsValid($ArrayStr$))
						LogError "got no valid json from Service"
						;isFatalError
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
					endif
					if not(jsonIsArray($ArrayStr$))
						LogError "got no json Array from Service"
						;isFatalError
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
					endif
					comment "extract productIds ..."
					comment "clean target list"
					set $productIdOnceList$ = emptylist($productIdOnceList$)
					set $pocList$ = emptylist($pocList$)
					comment "get stringlist "
					if jsonAsArrayCountElements($ArrayStr$) > "0"
						set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
						for %aktpoc% in $pocList$ do set $productIdOnceList$ = addToList($productIdOnceList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
						comment "These produtIds will be set to once again after restore of backuped meta data"
					endif
				endif
				
				Message "Restore productOnClient from file ..."
				comment " get Restore data from file ..."
				Set $ArrayStr$ = strLoadTextFile("%opsiTmpDir%\restored_productOnClients.json")
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from file"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from file" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from file"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from file" )
				endif
				comment "get list from array"
				set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
				set $productIdList$ = emptylist($productIdList$)
				comment "get stringlist "
				for %aktpoc% in $pocList$ do set $productIdList$ = addToList($productIdList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				comment "loop over list"
				if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.6.5")
					for %pocindex% = "0" to calculate(count($pocList$)+"-1") do sub_set_clientid_in_poclist2
				else
					; old opsi-script
					for %pocindex% = "0" to calculate(count($pocList$)+"-1") do sub_set_clientid_in_poclist
				endif
				comment "convert modified list to json array"
				set $ArrayStr$ = jsonStringListToJsonArray($pocList$)
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json "
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array after handlinge" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array "
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array after handlinge" )
				endif
				if errorsOccuredSinceMark = 0
					markErrorNumber
					comment "write back " + jsonAsArrayCountElements($ArrayStr$)+ " objects"
					;set $ArrayStr$ = unquote2($ArrayStr$,"[]")
					opsiServiceCall_updatePOC
					
					comment "remove restored productIds from actual productIdInstalledList..."
					for %aktpid% in $productIdList$ do set $productIdInstalledList$ = removeFromListByMatch('%aktpid%',$productIdInstalledList$)
					
					if errorsOccuredSinceMark = 0
						;comment "No Errors - we can now delete the original data file ..."
						;Files_rename_poc
						comment "No Errors - we can now switch to BKSTD mode ..."
						Set $GEN_bootmode$    = "BKSTD"
						Registry_SetGeneralEntries
						
						comment "restore installed to  setup..."
						if count($productIdInstalledList$) > "0"
							for %aktProductId% in $productIdInstalledList$ do opsiServiceCall_set_setup
						endif
						
						if $do_not_change_setup_requests$ = "true"
							comment "restore old setup to setup..."
							if count($productIdSetupList$) > "0"
								for %aktProductId% in $productIdSetupList$ do opsiServiceCall_set_setup
							endif
							comment "restore old once to once..."
							if count($productIdOnceList$) > "0"
								for %aktProductId% in $productIdOnceList$ do opsiServiceCall_set_once
							endif
						endif
					else
						LogError "Error while write back product On Client from captured image ..."
						;isFatalError 
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: Error while write back product On Client from captured image ..." )
					endif ; errors
				else
					LogError "Error while handling product On Client from captured image ..."
					;isFatalError 
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: Error while handling product On Client from captured image ..." )
				endif ; errors
				set $productIdList$ = createStringList('opsi-local-image-sysprep','opsi-wim-capture')
				for %aktProductId% in $productIdList$ do opsiServiceCall_del_productOnClient
			else ; no switch_existing_products_to_setup
				comment "Mode: switch_installed_products_to_setup=false"
				Message "Restore opsi meta data from capturimage ..."
				comment "first delete actual data and than restore backup data ..."
				comment "Do not delete action request setup..."
				comment "load data from web service (no action)..."
    		
				set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_noaction_objects")
				Set $ArrayStr$ = takestring(0, $resultlist$)
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no valid json from Service1" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no json Array from Service1" )
				endif
				comment "extract productIds ..."
				comment "clean target list"
				set $productIdList$ = emptylist($productIdList$)
				comment "get stringlist "
				if jsonAsArrayCountElements($ArrayStr$) = "0" 
					set $pocList$ = emptylist($pocList$)
				else
					set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
				endif
				;for %aktpoc% in $pocList$ do addToList($productIdList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				for %aktpoc% in $pocList$ do sub_fill_product_ids
				;for %pocindex% = "0" to jsonAsArrayCountElements($ArrayStr$) do set $productIdList$ = addToList($productIdList$,jsonAsObjectGetValueByKey(jsonAsArrayGetElementByIndex($ArrayStr$,"%pocindex%"), "productId" ))
				for %aktProductId% in $productIdList$ do opsiServiceCall_del_productOnClient
				
				markErrorNumber
				comment "load data from web service (actionrequest setup)..."
				set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_setup_objects")
				Set $ArrayStr$ = takestring(0, $resultlist$)
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no valid json from Service2" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no json Array from Service2" )
				endif
				comment "extract productIds ..."
				comment "clean target list"
				set $productIdList$ = emptylist($productIdList$)
				comment "get stringlist "
				if jsonAsArrayCountElements($ArrayStr$) = "0" 
					set $pocList$ = emptylist($pocList$)
				else
					set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
				endif
					
				;for %aktpoc% in $pocList$ do addToList($productIdList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				for %aktpoc% in $pocList$ do set $productIdList$ = addToList($productIdList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				comment "Action requests (setup) will be set again after restore of backuped meta data"
				comment "---------------------------"
				comment "load data from web service (actionrequest once)..."
				set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_once_objects")
				Set $ArrayStr$ = takestring(0, $resultlist$)
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no valid json from Service2" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from Service"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no json Array from Service2" )
				endif
				comment "extract productIds ..."
				comment "clean target list"
				set $productIdOnceList$ = emptylist($productIdOnceList$)
				comment "get stringlist "
				if jsonAsArrayCountElements($ArrayStr$) = "0" 
					set $pocList$ = emptylist($pocList$)
				else
					set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
				endif
					
				;for %aktpoc% in $pocList$ do addToList($productIdList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				for %aktpoc% in $pocList$ do set $productIdOnceList$ = addToList($productIdOnceList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
				comment "Action requests (once) will be set again after restore of backuped meta data"
				comment "---------------------------"
				Message "Restore productOnClient from file ..."
				comment " get Restore data from file ..."
				Set $ArrayStr$ = strLoadTextFile("%opsiTmpDir%\restored_productOnClients.json")
				if not(jsonIsValid($ArrayStr$))
					LogError "got no valid json from file"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no valid json from file" )
				endif
				if not(jsonIsArray($ArrayStr$))
					LogError "got no json Array from file"
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: got no json Array from file" )
				endif
				
				comment "get list from array"
				set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
				comment "loop over list"
				if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.6.5")
					for %pocindex% = "0" to calculate(count($pocList$)+"-1") do sub_set_clientid_in_poclist2
				else
					; old opsi-script
					for %pocindex% = "0" to calculate(count($pocList$)+"-1") do sub_set_clientid_in_poclist
				endif
				comment "convert modified list to json array"
				set $ArrayStr$ = jsonStringListToJsonArray($pocList$)
					;set $ArrayStr$ = unquote2($ArrayStr$,"[]")
				if errorsOccuredSinceMark = 0
					markErrorNumber
					comment "write back"
					opsiServiceCall_updatePOC
					
					if errorsOccuredSinceMark = 0
						;comment "No Errors - we can now delete the original data file ..."
						;Files_rename_poc
						comment "No Errors - we can now switch to BKSTD mode ..."
						Set $GEN_bootmode$    = "BKSTD"
						Registry_SetGeneralEntries
						comment "restore actionrequest setup..."
						if count($productIdList$) > "0"
							for %aktProductId% in $productIdList$ do opsiServiceCall_set_setup
						endif
						comment "restore actionrequest once..."
						if count($productIdOnceList$) > "0"
							for %aktProductId% in $productIdOnceList$ do opsiServiceCall_set_once
						endif
					else
						LogError "Error while write back product On Client from captured image ..."
						;isFatalError 
						set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: Error while write back product On Client from captured image ..." )
					endif ; errors
				else
					LogError "Error while handling product On Client from captured image ..."
					;isFatalError 
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=false: Error while handling product On Client from captured image ..." )
				endif ; errors
				set $productIdList$ = createStringList('opsi-local-image-sysprep','opsi-wim-capture')
				for %aktProductId% in $productIdList$ do opsiServiceCall_del_productOnClient
			endif ; switch_existing_products_to_setup
		endif ; renamed successfully
	else ; 4.11.6
		comment "We are on a old opsi-scrip below 4.11.6 ..."
		Message "Restore opsi meta data from capturimage ..."
		comment "first delete actual data and than restore backup data ..."
		comment "Do not delete action request setup..."
		comment "load data from web service (no action)..."
		set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_noaction_idents")
		comment "extract productIds ..."
		set $resultlist$ = splitString(takestring(0, $resultlist$), '",')
		if count($resultlist$) > "0" and not ("[]" = takestring(0, $resultlist$))
			for %aktIdent% in $resultlist$ do set $resultlist1$ = addToList($resultlist1$, takeString(1,splitString('%aktIdent%','"')))
			;set $productIdList$ = emptylist($productIdList$)
			for %aktIdent% in $resultlist1$ do set $productIdList$ = addToList($productIdList$, takeString(0,splitString("%aktIdent%",";")))
			comment "delete the objects step by step (all in once lead to errors)..."
			for %aktProductId% in $productIdList$ do opsiServiceCall_del_productOnClient
		endif
		
		comment "load data from web service (actionrequest setup)..."
		set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_setup_idents")
		comment "extract productIds ..."
		set $resultlist$ = splitString(takestring(0, $resultlist$), '",')
		set $productIdList$ = emptylist($productIdList$)
		if count($resultlist$) > "0" and not ("[]" = takestring(0, $resultlist$))
			set $resultlist1$ = emptylist($resultlist1$)
			for %aktIdent% in $resultlist$ do set $resultlist1$ = addToList($resultlist1$, takeString(1,splitString('%aktIdent%','"')))
			for %aktIdent% in $resultlist1$ do set $productIdList$ = addToList($productIdList$, takeString(0,splitString("%aktIdent%",";")))
			comment "Action requests will be set again after restore of backuped meta data"
		endif
		
		markErrorNumber
		comment "load data from file ..."
		set $resultlist$ = loadtextfile("%opsiTmpDir%\productOnClients.json")
		if count($resultlist$) > "0"
			comment "all data is in one (the first) line ..."
			set $objectStr$ = takestring(0,$resultlist$)
			comment "We have to set the clientId - get the old clientId ..."
			set $resultlist$ = splitString($objectStr$,'"clientId":')
			if count($resultlist$) > "1"
				set $oldPattern$ = takeString(1,$resultlist$)
				set $oldPattern$ = takeString(0,splitString($oldPattern$,','))
				set $oldPattern$ = trim($oldPattern$)
				set $oldPattern$ = unquote($oldPattern$,'"')
				comment "Replace the old clientId by the new..."
				set $objectStr$ = stringReplace($objectStr$, $oldPattern$, $INST_ClientId$)
				comment "Remove [ from the beginning of the line..."
				set $objectStr$ = unquote($objectStr$,'[')
				comment "remove }] from the end of the line ..."
				set $objectStr$ = strPart($objectStr$, "1",calculate(strLength($objectStr$) + "-2"))
				comment "split the array into objects..."
				set $resultlist$ = splitstring($objectStr$, '},')
				comment "save the objects step by step (all in once lead to errors)..."
				for %aktobject% in $resultlist$ do sub_restore_productOnClient2
			endif
		endif
		if errorsOccuredSinceMark = 0
			comment "No Errors - we can now delete the original data file ..."
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.0") >= "0"
				Files_rename_poc
			else
				Files_del_poc
			endif ; 4.11.5
			Set $GEN_bootmode$    = "BKSTD"
			Registry_SetGeneralEntries
			comment "restore actionrequest setup..."
			if count($productIdList$) > "0"
				for %aktProductId% in $productIdList$ do opsiServiceCall_set_setup
			endif
		else
			LogError "Error while write back product On Client from captured image ..."
			;isFatalError 
			set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, pre 4.11.6: Error while write back product On Client from captured image ..." )
		endif ; errors
		set $productIdList$ = createStringList('opsi-local-image-sysprep','opsi-wim-capture')
		for %aktProductId% in $productIdList$ do opsiServiceCall_del_productOnClient
	endif ; 4.11.6
endif ; file exists

[sub_restore_productOnClient2]
set $objectStr$ = '[%aktobject%}]'
opsiServiceCall_set_productOnClient

[opsiServiceCall_get_productOnClient_setup_idents]
"method": "productOnClient_getIdents"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","actionRequest":"setup"}',
					]

[opsiServiceCall_get_productOnClient_setup_objects]
"method": "productOnClient_getObjects"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","actionRequest":"setup"}',
					]
					
[opsiServiceCall_get_productOnClient_once_objects]
"method": "productOnClient_getObjects"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","actionRequest":"once"}',
					]


[opsiServiceCall_get_productOnClient_noaction_idents]
"method": "productOnClient_getIdents"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","actionRequest":"none"}',
					]

[opsiServiceCall_get_productOnClient_noaction_objects]
"method": "productOnClient_getObjects"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","actionRequest":"none"}',
					]

[opsiServiceCall_get_productOnClient_installed_objects]
"method": "productOnClient_getObjects"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct","installationStatus":"installed"}',
					]


[opsiServiceCall_del_productOnClient]
"method": "productOnClient_delete"
"params": [
					'%aktProductId%',
					'$INST_ClientId$',
					]

[opsiServiceCall_set_productOnClient]
"method": "productOnClient_createObjects"
"params": [
					'$objectStr$',
					]

[opsiServiceCall_set_setup]
"method": "setProductActionRequestWithDependencies"
"params": [
					'%aktProductId%',
					'$INST_ClientId$',
					'setup',
					]

[opsiServiceCall_set_once]
"method": "setProductActionRequestWithDependencies"
"params": [
					'%aktProductId%',
					'$INST_ClientId$',
					'once',
					]

[Files_del_poc]
del -sfc "%opsiTmpDir%\productOnClients.json"

[Files_rename_poc]
del -fc "%opsiTmpDir%\restored_productOnClients.json"
rename -c "%opsiTmpDir%\productOnClients.json" "%opsiTmpDir%\restored_productOnClients.json"

; ************* end sub_restore_productOnClient *************

[Files_del_cmd64]
del -fc "%SYSTEMROOT%\cmd64.exe"

[Files_save_config_for_debug]
copy -c "%ScriptPath%\cfg\*.*"       "%opsiLogDir%\cfg"

[sub_set_installation_status]
if $INST_SubModus$ = "BOOTIMAGE"
	opsiservicecall_setNetbootInstallationStatus /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$
endif 
comment "update productOnClient for the opsi-client-agent ...."
opsiservicecall_setOpsiclientagentInstallationStatus_unknown
opsiservicecall_setOpsiclientagentInstallationStatus_installed
opsiservicecall_setOpsiWinstInstallationStatus_installed
if $INST_preloginvistaInstalled$ = 'true'
	opsiservicecall_setPreloginvistaInstallationStatus_off
endif
if $INST_preloginloaderInstalled$ = 'true'
	opsiservicecall_setpreloginloaderInstallationStatus_off
endif

[sub_sub_read_preloginloader_installation_state]
if "" = takeFirstStringContaining(getReturnListFromSection('opsiservicecall_getInstalledLocalBootProductIds_list'), "preloginloader")
	set $INST_preloginloaderInstalled$ = 'false'
else
	set $INST_preloginloaderInstalled$ = 'true'
endif

[sub_sub_read_preloginvista_installation_state]
if "" = takeFirstStringContaining(getReturnListFromSection('opsiservicecall_getInstalledLocalBootProductIds_list'), "preloginvista")
	set $INST_preloginvistaInstalled$ = 'false'
else
	set $INST_preloginvistaInstalled$ = 'true'
endif

[Registry_add_shutdown_key]
openKey [$INST_WinstRegKey$]
add "ShutdownRequested" = REG_DWORD:0

[Files_create_ctmp]
CheckTargetPath = "c:\tmp"

[DosInAnIcon_open_ctmp]
rem C:\utils\xcacls c:\tmp /T /C /G ADMINISTRATOREN:F "ERSTELLER-BESITZER":F JEDER:R HAUPTBENUTZER:F SYSTEM:F /Y
rem show setacl-version
rem "$INST_SetAclDir$\setacl.exe" -help 
rem this should work not only on german systems
rem open c:\tmp for everyone
"$INST_SetAclDir$\setacl.exe" -on "c:\tmp" -ot file -actn setprot -op "dacl:np;sacl:nc" -rec cont_obj -actn setowner -ownr "n:S-1-1-0;s:y" -actn ace -ace "n:S-1-1-0;p:full;s:y"
rem "$INST_SetAclDir$\setacl.exe" -on "c:\tmp" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem show the resulting acl
"$INST_SetAclDir$\setacl.exe" -on "c:\tmp" -ot file -actn list -lst "s:b"

[Files_create_c_opsiorg]
CheckTargetPath = "$OCD_OpsiVarDir$"
CheckTargetPath = "$OCD_OpsiVarDir$\log"
CheckTargetPath = "$OCD_OpsiVarDir$\applog"
CheckTargetPath = "$OCD_OpsiVarDir$\tmp"
CheckTargetPath = "$OCD_OpsiVarDir$\cache"
CheckTargetPath = "$OCD_OpsiVarDir$\opsiclientd"
CheckTargetPath = "$OCD_OpsiVarDir$\data"

[DosInAnIcon_lock_lockdir]
rem this should work not only on german systems
rem make the dacl not inherited
"$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn clear -actn setprot -op "dacl:p_c;sacl:nc"
rem "$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn setprot -op "dacl:so;sacl:nc" -rec cont_obj -actn setowner -ownr "n:S-1-5-32-544;s:y" -actn ace -ace "n:S-1-5-32-544;p:full;s:y"
rem remove users from dacl
"$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn trustee -trst n1:S-1-5-32-545;s1:y;ta:remtrst;w:dacl"
rem remove power users from dacl
"$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn trustee -trst n1:S-1-5-32-547;s1:y;ta:remtrst;w:dacl"
rem Propagation of inherited permissions is enabled for all sub-objects whose permissons are also reset, resulting in only the specified permissions being active for a whole directory tree.
"$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn ace -ace "n:S-1-5-32-544;p:full;s:y" -actn clear -clr "dacl,sacl" -actn rstchldrn -rst "dacl,sacl"
rem show the resulting acl
"$INST_SetAclDir$\setacl.exe" -on "$lockdir$" -ot file -actn list -lst "f:own;w:d,s,o,g;i:y;s:b"

[sub_get_depot_netbiosnames]
set %depotId%
set $INST_ResultList2$ = addtolist($INST_ResultList2$, takeString(0,splitString("%depotId%",".")))


[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $INST_ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($INST_ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $INST_ExitCode$
	if ($INST_ExitCode$ = "1603")
		comment "File is in use - seems not to be a problem (at vc_redist installation)"
	else
		if ($INST_ExitCode$ = "1605")
			comment "ERROR_UNKNOWN_PRODUCT	1605	This action is only valid for products that are currently installed."
			comment "Uninstall of a not installed product failed - no problem"
		else
			if ($INST_ExitCode$ = "1641")
				comment "looks good: setup program gives exitcode 1641"
				comment "ERROR_SUCCESS_REBOOT_INITIATED	1641	The installer has initiated a restart. This message is indicative of a success."
			else
				if ($INST_ExitCode$ = "3010")
					comment "looks good: setup program gives exitcode 3010"
					comment "ERROR_SUCCESS_REBOOT_REQUIRED	3010	A restart is required to complete the install. This message is indicative of a success."
				else
					logError "Fatal: Setup program gives an unknown exitcode unequal zero: " + $INST_ExitCode$
					;isFatalError
					set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in Sub_check_exitcode: Fatal: Setup program gives an unknown exitcode unequal zero: " + $INST_ExitCode$)
				endif
			endif
		endif
	endif
endif

; ******************** End Install helpers sections *****************************************

; ******************** create client sections *****************************************

[sub_sub_try_to_get_my_mac]
Set $INST_ShortServiceUrl$ = takestring(1, splitString($OCD_config_service.url$,"//"))
set $INST_ConfigServerIP$ = takestring(0, splitString($INST_ShortServiceUrl$,":"))
set $INST_ConfigServerPort$ = takestring(1, splitString($INST_ShortServiceUrl$,":"))
comment "we need a IP-Number and at this time $INST_ConfigServerIP$ may also be a IP-Name"
if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
	set $INST_ConfigServerIP$ = GetIpByName($INST_ConfigServerIP$)
else
	Set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_getIPbyName')
	if "Error" = takestring(0, splitStringOnWhitespace(takestring(0,$INST_ServiceResult$)))
		LogWarning "MAC Address could not detected because config server could not resolved"
	else
		set $INST_ConfigServerIP$ = takestring(0,$INST_ServiceResult$)
	endif
endif
if not ($INST_ConfigServerIP$ = "")
	set $INST_ShortServiceUrl$ = $INST_ConfigServerIP$+":"+$INST_ConfigServerPort$
	comment "let us try to guess the ip number by getbestinterface windows api ..."
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
		set $INST_IPAddress$ = GetMyIpByTarget($INST_ConfigServerIP$)
	else
		Set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_getIpByTarget')
		set $INST_IPAddress$ = takestring(0, $INST_ServiceResult$)
		set $INST_IPAddress$ = takestring(1, splitString($INST_IPAddress$,"found:"))
	endif
	if $INST_IPAddress$ = ""
		LogWarning "failed to get own IP number - giving up to get mac"
	else
		set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_WMI_running')
		if ("" = takeFirstStringContaining($INST_ServiceResult$,"RUNNING")) and (GetMsVersionInfo >= "5.1")
			LogWarning "WMI service not running - giving up to get mac"
		else
			comment "WMI is running or we are at win2k and we only hope that it is running"
			Set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_getMac_by_exe')
			set $INST_MAC$ = lower(takestring(1, splitStringOnWhiteSpace(takeFirstStringContaining($INST_ServiceResult$,$INST_IPAddress$))))
			if $INST_MAC$ = ""
				LogWarning "no MAC found"
			endif
		endif
	endif
endif


	;comment "Do we have a connection to the server ?"
	;markErrorNumber
	;opsiservicecall_authenticated 
	;if errorsOccuredSinceMark > 0
	;	comment "No - we have no connection to the server."
	;	comment "Let us try to connect the server ...."
	;	SetLogLevel=$INST_PasswdLogLevel$
	;	markErrorNumber
	;	opsiservicecall_authenticated /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$
	;	SetLogLevel=$INST_DefaultLoglevel$
	;	if errorsOccuredSinceMark > 0
	;		LogWarning "We have still no connection to the server. This may affect the detection of the MAC."
	;	endif
	;else
	;	comment "Yes - we have a connection to the server."
	;	opsiservicecall_getNetworkConfig_hash
	;endif
	;comment "Now calling netstat ...."
	;Set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_getServiceConnection')
	;set $INST_IPAddress$ = takestring(2, splitStringOnWhiteSpace(takeFirstStringContaining($INST_ServiceResult$, $INST_ShortServiceUrl$)))
	;set $INST_IPAddress$ = takestring(0, splitString($INST_IPAddress$,":"))
	;if $INST_IPAddress$ = ""
	;	LogWarning "failed to get own IP number by netstat - using winst information (may be wrong at multiple network interfaces)"
	;	set $INST_IPAddress$ = "%IPAddress%"
	;endif
	;Set $INST_ServiceResult$ = getOutStreamFromSection('DosInAnIcon_getMac_by_exe')
	;set $INST_MAC$ = lower(takestring(1, splitStringOnWhiteSpace(takeFirstStringContaining($INST_ServiceResult$,$INST_IPAddress$))))
	;if $INST_MAC$ = ""
	;	LogWarning "no MAC found"
	;endif
;endif

[DosInAnIcon_getServiceConnection]
@echo off
netstat -n

[DosInAnIcon_getMac_by_exe]
@echo off
"%ScriptPath%\ip2mac\ip2mac.exe"

[DosInAnIcon_getDnsByWmic]
@echo off
wmic path win32_NetworkAdapterConfiguration get DnsDomain /value | findstr "=."

[DosInAnIcon_getIPbyName]
@echo off
"%ScriptPath%\gethostbyname\get_host_by_name.exe" $INST_ConfigServerIP$

[DosInAnIcon_getIpByTarget]
@echo off
"%ScriptPath%\getIpByTarget\getipbytarget.exe" --target=$INST_ConfigServerIP$

[DosInAnIcon_WMI_running]
@echo off
"%System%\sc" query Winmgmt


[sub_sub_get_depot_netbiosname]
set $INST_Authenticated$ = "false"
markErrorNumber
opsiservicecall_authenticated 
if errorsOccuredSinceMark > 0
	comment "was not authenticated -> retry scripted login by default user/password"
	markErrorNumber
	SetLogLevel=$INST_PasswdLogLevel$
	opsiservicecall_authenticated /username $INST_ClientId$ /password $SHI_pckey$ /serviceurl $OCD_config_service.url$
	if errorsOccuredSinceMark > 0
		markErrorNumber
		comment "scripted login by client id / hostkey failed -> retry with config ini values"
		opsiservicecall_authenticated /username $INST_Service_User$ /password $INST_Service_Password$ /serviceurl $OCD_config_service.url$
	else
			comment "now authenticated "
			set $INST_Authenticated$ = "true"
	endif
	SetLogLevel=$INST_DefaultLoglevel$
	if errorsOccuredSinceMark > 0
		comment "scripted login by default user/password and client id / hostkey failed -> we don't retry interactive"
		comment "giving up"
	else
			comment "now authenticated "
			set $INST_Authenticated$ = "true"
	endif
else
	comment "was authenticated "
	set $INST_Authenticated$ = "true"
endif 

if $INST_Authenticated$ = "true"
	Set $INST_ServiceResult$ = getReturnListFromSection('opsiservicecall_getNetworkConfig_hash')
	set $INST_DepotServer$ = takeString(2,splitString(takeFirstStringContaining($INST_ServiceResult$, "depotUrl="),"/"))
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.8")>="0"
		LoadProductProperties $INST_ClientId$ "opsi-client-agent"
	endif
endif

; ******************** End create client sections *****************************************

;***********************py2exe and open ssl sections ************************************************
[Files_indy_OpenSSL]
copy -sVc "%SCRIPTPATH%\openssl\*.*" "$INST_OpensslBaseDir$\"

[Files_copy_py2exe]
copy -sc "%SCRIPTPATH%\$OCD_DIST_DIR$\*.*" "$INST_BaseDir$\"


[Files_copy_opsinotifier]
;copy -sVc "%SCRIPTPATH%\$OCD_notifier_dir$\*.*" "$INST_BaseDir$\"
; do not use -V while dist contains old notifier because they seem to be younger
copy -sc "%SCRIPTPATH%\$OCD_notifier_dir$\*.*" "$INST_BaseDir$\"

[Files_copy_opsiclientd_exe]
copy -Vc "%SCRIPTPATH%\$OCD_DIST_DIR$\opsiclientd.exe" "$INST_BaseDir$\"

;[Files_copy_opsiclientd_exe2]
;del "$INST_BaseDir$\opsiclientd.exe"
;copy -x "%SCRIPTPATH%\$OCD_DIST_DIR$\opsiclientd.zip" "$INST_BaseDir$\"

[Files_move_opsiclientd_exe]
rename -c "$INST_BaseDir$\opsiclientd.exe" "$INST_BaseDir$\opsiclientd_org.exe"

[Files_copy_ssl_to_py2exe]
copy -Vc "%SCRIPTPATH%\openssl\libeay32.dll" "$INST_BaseDir$\lib"
copy -Vc "%SCRIPTPATH%\openssl\ssleay32.dll" "$INST_BaseDir$\lib"

[Winbatch_vc_redist_exe]
;"%ScriptPath%\deps\vcredist_x86.exe" /q:a /c:"msiexec /i vcredist.msi /qb-! /l*v "c:\tmp\vcredist.log" ALLUSERS=2"
"%ScriptPath%\deps\vcredist_x86.exe" /q:a /c:"msiexec /i vcredist.msi /qb-! /l* %opsiLogDir%\vcredist_exe.log ALLUSERS=1"
;"%ScriptPath%\deps\vcredist_x86.exe" /q:a /c:"VCREDI~1.EXE /q:a /c:""msiexec /i vcredist.msi /qb!"" "
;"%ScriptPath%\deps\vcredist_x86.exe" /Q

[Winbatch_vc_redist_exe_64]
"%ScriptPath%\vcredistx64\vcredist_x64.exe" /Q

[Winbatch_vc_redist_msi_64]
msiexec /i "%ScriptPath%\vcredistx64\VC_RED.MSI" /qb-! /l*v "%opsiLogDir%\vcredist_x64_msi.log" ALLUSERS=1

[Winbatch_vc_redist_msi]
;msiexec /i "%ScriptPath%\deps\VC_RED.MSI" /qb-! /l*vx "c:\tmp\vcredist.log" ALLUSERS=2 DISABLEROLLBACK=1 VSEXTUI=1
msiexec /i "%ScriptPath%\deps\VC_RED.MSI" /qb-! /l* "%opsiLogDir%\vcredist_msi.log" ALLUSERS=1 REBOOT=ReallySuppress 

[ExecWith_autoit_vc_redist]
WinWait("Microsoft Visual C++", "Opsi Dialog")
Send("{TAB}")
Send("{TAB}")
Send("{ENTER}")
exit



;moved to subconfig.opsiscript
;[LinkFolder_install_softwareOnDemand]
;set_basefolder common_programs
;set_subfolder opsi.org
;
;set_link
;	name: software on demand
;	target: https://localhost:4441/swondemand
;	parameters:
;	working_dir:
;	icon_file: "%ProgramFiles32Dir%\opsi.org\opsi-client-agent\images\opsi.ico"
;	icon_index:
;end_link
;
;[LinkFolder_uninstall_softwareOnDemand]
;set_basefolder common_programs
;delete_subfolder opsi.org

;***************************** end py2exe and open ssl sections ******************************************

;*************************** prelogin sections ********************************************

[Registry_DeletePreloginloader]
DeleteKey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PreLoginLoader]

[DosInAnIcon_Stop_Preloginloader_Service]
net stop preloginloader

;**************************** end prelogin sections *******************************************
;;*************************** start on_shutdown sections **************************************
;;*******************************************
[Files_install_on_shutdown_copy_files]
copy -Vc "%SCRIPTPATH%\on_shutdown\*.*" "$INST_BaseDir$\on_shutdown"
; removed because opsiclientd_event_starter.exe is not part of dist anymore
;copy -Vc "%SCRIPTPATH%\$OCD_DIST_DIR$\opsiclientd_shutdown_starter.exe" "$INST_BaseDir$\on_shutdown\"

;;;*******************************************
;;*******************************************
;;************************************** end on_shutdown sections ***************************************************


;******** Service sections **********
[opsiservicecall_authenticated]
"method": "authenticated"
"params": [
					]

[opsiservicecall_getDomain]
"method": "getDomain"
"params": [
					]

[opsiservicecall_getHost_hash]
"method": "getHost_hash"
"params": [
					"$INST_ClientId$"
					]

[opsiservicecall_getClientIds_list]
"method": "getClientIds_list"
"params": [
					]

[opsiservicecall_host_getIdents_for_clientId]
"method": "host_getIdents"
"params": [
					'[]',
					'{"id":"$INST_ClientId$"}',
		]


;[opsiservicecall_createClient_without_key]
;"method": "createClient"
;"params": [
;					"$INST_pcname$",
;					"$INST_DnsDomainName$",
;					"$INST_pcDescription$",
;					"$INST_pcNotes$",
;					"$INST_IPAddress$",
;					"$INST_MAC$"
;					]

[opsiservicecall_createClient]
"method": "host_createOpsiClient"
"params": [
					"$INST_ClientId$",
					"$SHI_pckey$",
					"$INST_pcDescription$",
					"$INST_pcNotes$",
					"$INST_MAC$"
					"$INST_IPAddress$",
					]


[opsiservicecall_getServerId]
"method": "getServerId"
"params": [
					"$INST_ClientId$"
					]

[opsiservicecall_getOpsiHostKey]
"method": "getOpsiHostKey"
"params": [
					"$INST_ClientId$"
					]

[opsiservicecall_setNetbootInstallationStatus]
"method": "setProductInstallationStatus"
"params": [
					"$INST_NetBootProductname$",
					"$INST_ClientId$",
					"installed"
					]

[opsiservicecall_setPreloginloaderInstallationStatus_off]
"method": "setProductInstallationStatus"
"params": [
					"preloginloader",
					"$INST_ClientId$",
					"not_installed"
					]

[opsiservicecall_setPreloginvistaInstallationStatus_off]
"method": "setProductInstallationStatus"
"params": [
					"preloginvista",
					"$INST_ClientId$",
					"not_installed"
					]

[opsiservicecall_setOpsiclientagentInstallationStatus_unknown]
"method": "setProductInstallationStatus"
"params": [
					"opsi-client-agent",
					"$INST_ClientId$",
					"unknown"
					]

[opsiservicecall_setOpsiclientagentInstallationStatus_installed]
"method": "setProductInstallationStatus"
"params": [
					"opsi-client-agent",
					"$INST_ClientId$",
					"installed"
					]
					

[opsiservicecall_setOpsiWinstInstallationStatus_installed]
"method": "setProductInstallationStatus"
"params": [
					"opsi-winst",
					"$INST_ClientId$",
					"installed"
					]
					
[opsiservicecall_getNetworkConfig_hash]
"method": "getNetworkConfig_hash"
"params": [
					"$INST_ClientId$"
					]
		
[opsiservicecall_userIsAdmin]
"method": "userIsAdmin"
"params": [
					]

[opsiservicecall_setMacAddress]
"method": "setMacAddress"
"params": [
					"$INST_ClientId$",
					"$INST_MAC$"
		]	  

[opsiservicecall_getInstalledLocalBootProductIds_list]
"method": "getInstalledLocalBootProductIds_list"
"params": [
					"$INST_ClientId$"
		]	  

[opsiservicecall_getDepotshares]
"method": "host_getIdents"
"params": [
					'[]',
					'{"type":"OpsiDepotserver"}',
		]	  

[opsiservicecall_getDepot_properties]
"method": "host_getObjects"
"params": [
					'[]',
					'{"type":"OpsiDepotserver"}',
		]	  

;[opsiservicecall_setOption_addConfigStateDefaults_true]
;"method": "backend_setOptions"
;"params": [
;	'{"addConfigStateDefaults":true}'
;]
;
;[opsiservicecall_get_configState_software-on-demand.active]
;"method": "configState_getObjects"
;"params": [
;	'',
;	'{"configId":"software-on-demand.active","objectId":"$INST_ClientId$"}',
;]
;
;[opsiservicecall_get_configState_software-on-demand.active]
;"method": "configState_getObjects"
;"params": [
;	'',
;	'{"configId":"software-on-demand.active","objectId":"$INST_ClientId$"}',
;]

[opsiservicecall_getGeneralConfigValue_depotuser]
"method": "getGeneralConfigValue"
"params": [
					"clientconfig.depot.user",
					"$INST_ClientId$"
					]

[opsiservicecall_close_session]
"method": "backend_exit"
"params": [
					]


;**************************************************
; Patch #1237 (https://forum.opsi.org/viewtopic.php?f=7&t=6764#p29403)

[opsiservicecall_setGeneralConfigValue_clientconfig_configserver_url]
"method": "setGeneralConfigValue"
"params": [
					"clientconfig.configserver.url",
					"$OCD_config_service.url$"
					"$INST_ClientId$"
					]

[opsiServiceCall_setActionRequest]
"method": "setProductActionRequestWithDependencies"
"params": [
           "%product4setup%",
           "$INST_ClientId$",
           "setup"
          ]

[opsiServiceCall_del_wim_capture]
"method": "productOnClient_delete"
"params": [
					'opsi-wim-capture',
					'$INST_ClientId$'
					]


[sub_test_config_service_url]
comment "testing " + trim("%possible_config_service_url%")

Set $OCD_TEST_URL_IP$ = stringReplace( trim( takeString(1, splitString( trim("%possible_config_service_url%"), ":") ) ), "/", "" )
comment "IP to check:" + $OCD_TEST_URL_IP$
dosinanicon_ping_test_url
set $OCD_PING_RESULT$ = getLastExitCode
if $OCD_PING_RESULT$ = "0"
	Set $OCD_WORKING_config_service.url$ = trim("%possible_config_service_url%")
endif


[dosinanicon_ping_test_url]
ping -4 -n 3 $OCD_TEST_URL_IP$

;**************************************************

[sub_fill_product_ids]
set $objectstr$ = '%aktpoc%'
set $pid$ = jsonAsObjectGetValueByKey($objectstr$, "productId" )
set $productIdList$ = addToList($productIdList$,$pid$)

[sub_set_clientid_in_poclist]
comment "get object from array"
set $objectStr$ = takeString("%pocindex%",$poclist$)
comment "handle ident: get old clientId"
set $oldclientId$ = jsonAsObjectGetValueByKey($objectStr$, "clientId")
comment "handle ident: get old ident"
set $identstr$ = jsonAsObjectGetValueByKey($objectStr$, "ident")
comment "handle ident: replace clientId in ident"
set $identstr$ = stringReplace($identstr$, $oldclientId$, $INST_ClientId$)
comment "handle ident: write back modified ident"
set $objectStr$ = jsonAsObjectSetStringtypeValueByKey($objectStr$, "ident",$identstr$)
comment "replace clientId at clientId"
set $objectStr$ = jsonAsObjectSetStringtypeValueByKey($objectStr$, "clientId",$INST_ClientId$)
comment "write modified object back to array"
set $poclist$ = setStringInListAtIndex($objectStr$,$poclist$,"%pocindex%")

[sub_set_clientid_in_poclist2]
comment "get object from array"
set $objectStr$ = takeString("%pocindex%",$poclist$)
comment "handle ident: remove it"
set $objectStr$ = jsonAsObjectDeleteByKey($objectStr$, "ident")
comment "replace clientId at clientId"
set $objectStr$ = jsonAsObjectSetStringtypeValueByKey($objectStr$, "clientId",$INST_ClientId$)
comment "write modified object back to array"
set $poclist$ = setStringInListAtIndex($objectStr$,$poclist$,"%pocindex%")

[opsiServiceCall_updatePOC]
"method": "productOnClient_updateObjects"
"params": [
					'$ArrayStr$'
					]

[opsiservicecall_getPOC]
	"method": "productOnClient_getObjects"
	"params":[
           "[]",
           '{"clientId":"$INST_ClientId$","productType":"LocalbootProduct"}'
           ]

[opsiServiceCall_get_productOnClient]
"method": "productOnClient_getIdents"
"params": [
					"[]",
					'{"clientId":"$INST_ClientId$","productType":"LocalbootProduct"}',
					]

[opsiServiceCall_del_productOnClient]
"method": "productOnClient_delete"
"params": [
					'%aktProductId%',
					'$INST_ClientId$',
					]

[opsiServiceCall_set_productOnClient]
"method": "productOnClient_updateObjects"
"params": [
					'[%aktobject%}]',
					]

[opsiServiceCall_del_my_productid]
"method": "productOnClient_delete"
"params": [
					'$ProductId$',
					'$INST_ClientId$'
					]

[opsiservicecall_get_configState_switch_installed_products_to_setup]
"method": "configState_getObjects"
"params": [
	'[]',
	'{"configId":"clientconfig.capture.switch_installed_products_to_setup","objectId":"$INST_ClientId$"}',
]

[opsiservicecall_get_configState_do_not_change_setup_requests]
"method": "configState_getObjects"
"params": [
	'[]',
	'{"configId":"clientconfig.capture.do_not_change_setup_requests","objectId":"$INST_ClientId$"}',
]


[opsiservicecall_setOption_addConfigStateDefaults_true]
"method": "backend_setOptions"
"params": [
	'{"addConfigStateDefaults":true}'
]
