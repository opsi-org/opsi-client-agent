encoding=utf8

;@author          detlef oertel
;@email           d.oertel@uib.de
;@date            27.08.2019
;@copyright       AGPLv3
;@version         1.0
;@filedesc        Collection of functions that gives info about system states that are relevant for product installations

; ###################################################################################################

deffunc isRebootPending() : string
	;@Description Checks if a Windows  & Linux needs a reboot
	;@Returns Returns string "true" if reboot is required
	;@OnError Returns string "false"
	;@SpecialCase 
	;@References
	;@Links https://ilovepowershell.com/2015/09/10/how-to-check-if-a-server-needs-a-reboot/
	;@Links https://www.windowspro.de/script/ausstehende-reboots-nach-updates-pruefen-powershell-regexe
	;@Links https://serverfault.com/questions/122178/how-can-i-check-from-the-command-line-if-a-reboot-is-required-on-rhel-or-centos
	;@Links https://askubuntu.com/questions/164/how-can-i-tell-from-the-command-line-whether-the-machine-requires-a-reboot
	;@Links https://megamorf.gitlab.io/2019/06/10/check-if-reboot-is-required-after-installing-linux-updates.html
	;@Links 
	;@Links 
	;@Links 
	;@author detlef oertel
	;@date 21.05.2020
	;@Example [actions]
	;@Example if stringToBool(isRebootPending())
	;@Example 	comment "we need a reboot"
	;@Example else
	;@Example 	comment "we do not need a reboot"
	;@Example endif
	
	DefVar $OS$
	DefVar $distroType$
	DefVar $myCmd$
	DefVar $exitcode$
	
	
	set $OS$ = GetOS
	

	if $OS$ = "Windows_NT"
		set $result$ = "false"
		if RegKeyExists("HKLM\Software\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending")
			set $result$ = "true"
		endif
		if RegKeyExists("HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired")
			set $result$ = "true"
		endif
		if RegVarExists("HKLM\SYSTEM\CurrentControlSet\Control\Session Manager","PendingFileRenameOperations")
			set $result$ = "true"
		endif
	else
		if $OS$ = "LINUX"
			set $distroType$ =getLinuxDistroType
			Switch $distroType$
				Case "debian"
					if fileExists("/var/run/reboot-required")
						set $result$ = "true"
					endif
				EndCase
				Case "redhat"
					set $myCmd$ = takeString(0,shellCall("which(needs-restarting"))
					if not(fileExists($myCmd$))
						set $exitcode$ = shellCall("yum -y install yum-utils")
						if not ($exitcode$ = "0")
							logError "Failed: 'yum -y install yum-utils' in isRebootPending()"
						endif
					endif
					if fileExists($myCmd$)
						set $exitcode$ = shellCall($myCmd$+" -r")
						if $exitcode$ = "1"
							set $result$ = "true"
						endif
					else
						logError "Failed to call: 'needs-restarting' in isRebootPending()"
					endif
				EndCase
				Case "suse"
					if fileExists("/boot/do_purge_kernels")
						set $result$ = "true"
					endif
				EndCase
				DefaultCase
					logError "Unsupported distro type: "+$distroType$+" in isRebootPending()"
				EndCase
			EndSwitch
		else
			logError "Unsupported OS: "+$OS$+" in isRebootPending()"
		endif
	endif
endfunc

; ###################################################################################################

; https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#net_d

deffunc get_dotnet4_version() : string
	;@Description Checks wich dotnet 4.x is installed
	;@Returns Returns string with the version number (aka "4.6") or empty string if no dotnet 4 is installed
	;@OnError Returns string ""
	;@SpecialCase 
	;@References
	;@Links 
	;@Links 
	;@author detlef oertel
	;@date 27.08.2019
	;@Example [actions]
	;@Example if ("" = get_dotnet4_version()) or CompareDotSeparatedNumbers(get_dotnet4_version(), "<","4.6")
	;@Example 	comment "No dotnet 4 >= 4.6 installed"
	;@Example else
	;@Example 	dotnet 4 >= 4.6 installed"
	;@Example endif
	
	set $result$ = ""
	set $result$ = GetRegistryStringValueSysNative("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full] Version")

endfunc

deffunc isdotnet_3_5_installed() : string
	;@Description Checks if a dotnet 3.5 is installed
	;@Returns Returns string "true" dotnet 3.5 is installed
	;@OnError Returns string "false"
	;@SpecialCase 
	;@References
	;@Links 
	;@Links 
	;@author detlef oertel
	;@date 27.08.2019
	;@Example [actions]
	;@Example if stringToBool(isdotnet_3_5_installed())
	;@Example 	comment "dotnet 3.5 is installed"
	;@Example else
	;@Example 	comment "No dotnet 3.5 found"
	;@Example endif

	DefStringlist $resultlist$

	set $result$ = "false"
	set $resultlist$ = getRegistryKeyListSysnative("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP")
	if "" = takefirststringContaining($resultlist$,"v3.5")
		set $result$ = "false"
	else
		set $result$ = "true"
	endif
	
endfunc

;################################################################################################
Deffunc getOpsiNetworkMedium() : string
	DefVar $cable_ip$
	DefVar $wifi_ip$
	DefVar $command$
	DefVar $cablemac$
	DefVar $wifimac$
	DefVar $mymac$
	DefVar $resultstr$
	DefVar $myip$
	DefVar $ifindex$
	
	Defstringlist $resultlist$


	set $result$ = 'unknown'
	set $myip$ = getMyIpByTarget(GetIpByName("%opsiServer%"))
	comment 'myip is: '+$myip$
	
	Message "Detect cabel MAC ..."
	set $cablemac$ = ""
	set $command$ = Escapestring: powershell.exe "Get-Netadapter -Name 'Ethernet*' | select -expandproperty MacAddress"
	set $resultlist$ = shellCall($command$)
	if count($resultlist$) int> "0"
		set $cablemac$ = takestring("0", $resultlist$)
	endif
	comment 'cablemac is: '+$cablemac$
	
	
	Message "Detect cabel IP ..."
	set $cable_ip$ = ""
	set $command$ = Escapestring: powershell.exe "Get-Netadapter -Name 'Ethernet*' | select -expandproperty InterfaceIndex"
	set $resultlist$ = shellCall($command$)
	
	
	
	if count($resultlist$) int> "0"
		set $ifindex$ = takestring("0", $resultlist$)
		if not ($ifindex$ = "")
			set $resultlist$ = getListFromWMI("","Win32_NetworkAdapterConfiguration",createStringList("ipaddress"),"where InterfaceIndex="+$ifindex$)
			set $cable_ip$ = getvalue("ipaddress",$resultlist$)
			if contains($cable_ip$,'ung端ltig')
				LogError "Interner Fehler: Bitte Log senden"
				set $cable_ip$ = ""
			else
				if $cable_ip$ = "<null>"
					set $cable_ip$ = ""
				endif
				if not($cable_ip$ = "") 
					set $cable_ip$ = unquote2($cable_ip$,"[]")
					set $cable_ip$ = takestring("0", splitstring($cable_ip$,","))
					if not(isValidIP4($cable_ip$))
						LogError "Gefundene IP-Adresse: "+$cable_ip$+" ist nicht g端ltig!"
						set $cable_ip$ = ""
					else
						if $cable_ip$ = $myip$
							set $result$ = 'cable'
						endif
					endif
				endif
			endif
		endif
	endif
	comment 'cable_ip is: '+$cable_ip$
	comment 'medium is: '+$return$
	
	if $result$ = 'unknown'
	
		Message "Detect WLAN/WIFI MAC ..."
		set $wifimac$ = ""
		set $command$ = Escapestring: powershell.exe "Get-Netadapter -Name 'WLAN*' | select -expandproperty MacAddress"
		set $resultlist$ = shellCall($command$)
		if count($resultlist$) int> "0"
			set $wifimac$ = takestring("0", $resultlist$)
		endif
		comment 'wifimac is: '+$wifimac$
		
		
		Message "Detect WLAN/WIFI IP ..."
		set $wifi_ip$ = ""
		set $command$ = Escapestring: powershell.exe "Get-Netadapter -Name 'WLAN*' | select -expandproperty InterfaceIndex"
		set $resultlist$ = shellCall($command$)
		
		if count($resultlist$) int> "0"
			set $ifindex$ = takestring("0", $resultlist$)
			if not ($ifindex$ = "")
				set $resultlist$ = getListFromWMI("","Win32_NetworkAdapterConfiguration",createStringList("ipaddress"),"where InterfaceIndex="+$ifindex$)
				set $wifi_ip$ = getvalue("ipaddress",$resultlist$)
				if contains($wifi_ip$,'ung端ltig')
					LogError "Interner Fehler: Bitte Log senden"
					set $wifi_ip$ = ""
				else
					if $wifi_ip$ = "<null>"
						set $wifi_ip$ = ""
					endif
					if not($wifi_ip$ = "") 
						set $wifi_ip$ = unquote2($wifi_ip$,"[]")
						set $wifi_ip$ = takestring("0", splitstring($wifi_ip$,","))
						if not(isValidIP4($wifi_ip$))
							LogError "Gefundene IP-Adresse: "+$wifi_ip$+" ist nicht g端ltig!"
							set $wifi_ip$ = ""
						else
							if $wifi_ip$ = $myip$
								set $result$ = 'wifi'
							endif
						endif
					endif
				endif
			endif
		endif
		comment 'wifi_ip is: '+$wifi_ip$
	endif
endfunc

;################################################################################################
