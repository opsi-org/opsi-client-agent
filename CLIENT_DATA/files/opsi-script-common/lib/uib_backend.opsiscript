encoding=utf8

;@author          detlef oertel
;@email           d.oertel@uib.de
;@date            17.4.2018
;@copyright       AGPLv3
;@version         1.0
;@filedesc        Collection of functions that manipulate the opsi backend via opsi service call

; ###################################################################################################
DefFunc setProductsToUninstall($productlist$ : stringlist) : string
  ;@author          detlef oertel
  ;@date            22.08.2019
  ;@Description     Sets for the given list of opsi productIds the action request
  ;@Description     to 'uninstall'
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     List of opsi product Ids
  ;@ParamAdvice_$productlist$
  ;@Example     [actions]
  ;@Example     DefStringlist $productlist$
  ;@Example
  ;@Example     set $productlist$ = CreateStringList("opsi-logviewer","opsi-configed")
  ;@Example     if not(stringtobool(setProductsToUninstall($productlist$)))
  ;@Example       comment "call of setProductsToUninstall failed"
  ;@Example     endif
  
  
	;markErrorNumber
	set $result$ = "false"
	if count($productlist$) INT> "0"
		for %aktproduct% in $productlist$ do opsiservicecall_set_product_to_uninstall
	endif
	;if errorsOccurredSinceMark = 0
	;	set $result$ = "true"
	;endif
	set $result$ = "true"
	
	
	[opsiservicecall_set_product_to_uninstall]
	"method": "setProductActionRequest"
	"params": [
						"%aktproduct%",
						"%opsiserviceUser%",
						"uninstall"
						]
EndFunc

; ###################################################################################################

; ###################################################################################################
DefFunc setProductsToSetup($productlist$ : stringlist) : string
  ;@author          detlef oertel
  ;@date            05.11.2018
  ;@Description     Sets for the given list of opsi productIds the action request
  ;@Description     to 'setup' (try also resolving the dependencies)
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@SpecialCase     Works without resolving dependencies for use in WAN mode while withdependencies is missing in opsiclientd
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     List of opsi product Ids
  ;@ParamAdvice_$productlist$
  ;@Example     [actions]
  ;@Example     DefStringlist $productlist$
  ;@Example
  ;@Example     set $productlist$ = CreateStringList("opsi-logviewer","opsi-configed")
  ;@Example     if not(stringtobool(setProductsToSetup($productlist$)))
  ;@Example       comment "call of setProductsToSetup failed"
  ;@Example     endif
  
  
	markErrorNumber
	set $result$ = "false"
	if count($productlist$) > "0"
		if "%opsiServer%" = "localhost"
			; no with dependencies in WAN mose
			for %aktproduct% in $productlist$ do opsiservicecall_set_product_to_setup_without_dep
		else
			for %aktproduct% in $productlist$ do opsiservicecall_set_product_to_setup_with_dep
		endif
	endif
	if errorsOccurredSinceMark = 0
		set $result$ = "true"
	endif
	
	[opsiservicecall_set_product_to_setup_with_dep]
	"method": "setProductActionRequestWithDependencies"
	"params": [
						"%aktproduct%",
						"%opsiserviceUser%",
						"setup"
						]
	
	[opsiservicecall_set_product_to_setup_without_dep]
	"method": "setProductActionRequest"
	"params": [
						"%aktproduct%",
						"%opsiserviceUser%",
						"setup"
						]
EndFunc

; ###################################################################################################

deffunc handle_setup_after_property($propname$ : string) : string
  ;@author          detlef oertel
  ;@date            26.05.2020
  ;@Description     The given parameter $propname$ has to be the name of a property that holds a list of productIds
  ;@Description     The function takes this list
  ;@Description     If it is only one string and this string contains ',' it will be splitted to a list
  ;@Description     Sets for the given list of opsi productIds the action request
  ;@Description     to 'setup' (try also resolving the dependencies)
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@SpecialCase     //Retry without resolving dependencies for use in WAN mode while withdependencies is missing in opsiclientd
  ;@References
  ;@Links
  ;@ParamDesc_$propname$     List of opsi product Ids
  ;@ParamAdvice_$propname$
  ;@Example     [actions]
  ;@Example     DefVar $propname$
  ;@Example
  ;@Example     if not(stringtobool(handle_setup_after_property($propname$)))
  ;@Example       comment "call of handle_setup_after_property failed"
  ;@Example     endif
	DefStringlist $setup_after_prod_list$
	
	set $result$ = "false"
	;markErrorNumber
	set $setup_after_prod_list$ = getProductPropertyList($propname$,"")
	if (count($setup_after_prod_list$) int= "1") and contains(takestring(0,$setup_after_prod_list$), ",")
		set $setup_after_prod_list$ = splitString (takestring(0,$setup_after_prod_list$),",")
	endif
	set $setup_after_prod_list$ = removeFromListByMatch("",$setup_after_prod_list$)
	if count($setup_after_prod_list$) > "0"
		;for %setupProduct% in $setup_after_prod_list$ do opsiservicecall_set_product_to_setup
		set $result$ = setProductsToSetup($setup_after_prod_list$)
	endif
	;if errorsOccurredSinceMark = 0
	;	set $result$ = "true"
	;endif
	
	;[opsiservicecall_set_product_to_setup]
	;"method": "setProductActionRequest"
	;"params": [
	;	"%setupProduct%",
	;	"%opsiserviceUser%",
	;	"setup"
	;	]
endfunc

; ###################################################################################################

DefFunc getInstalledLocalbootProducts(ref $productlist$ : stringlist) : string
  ;@date            20.4.2018
  ;@version         1.1
  ;@Description     Gets a list of productIds which are
  ;@Description     * known to the client (productOnClient object exists)
  ;@Description     * and localboot products.
  ;@Description     to 'setup' (also resolving the dependencies)
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     Output list of opsi product Ids that were be found
  ;@ParamAdvice_$productlist$   May be empty
  
  ;@Example     if stringToBool(getInstalledLocalbootProducts($resultlist$))
  ;@Example     	comment "getInstalledLocalbootProducts successful finished"
  ;@Example     else
  ;@Example     	LogError "getInstalledLocalbootProducts failed"
  ;@Example     endif
  ;@Example     set $tmplist$ = getListContainingList($baseproducts$,$resultlist$)
  ;@Example     if stringToBool(compareLists($tmplist$,$baseproducts$))
  ;@Example     	comment "check installed products successful finished"
  ;@Example     else
  ;@Example     	LogError "check installed products failed"
  ;@Example     endif
  ;@Example     comment " now install and rest products ...."
  ;@Example     if stringToBool(setProductsToSetup($resetproducts$))
  ;@Example     	comment "setProductsToSetup successful finished"
  ;@Example     else
  ;@Example     	LogError "setProductsToSetup failed"
  ;@Example     endif

	DefVar $ArrayStr$
	DefStringList $errorList$
	DefStringList $resultlist$
	DefStringList $pocList$
	
	markErrorNumber
	set $result$ = "false"
	comment "load data from web service (localboot) to $productlist$..."
	markErrorNumber
	comment "load data from web service (localboot)..."
	set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_localboot_objects")
	Set $ArrayStr$ = takestring(0, $resultlist$)
	if not(jsonIsValid($ArrayStr$))
		LogError "got no valid json from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
	endif
	if not(jsonIsArray($ArrayStr$))
		LogError "got no json Array from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
	endif
	comment "extract productIds ..."
	comment "clean target list"
	set $productlist$ = emptylist($productlist$)
	set $pocList$ = emptylist($pocList$)
	comment "get stringlist "
	if jsonAsArrayCountElements($ArrayStr$) > "0"
		set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
		for %aktpoc% in $pocList$ do set $productlist$ = addToList($productlist$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
	endif
	
	if errorsOccurredSinceMark = 0
		set $result$ = "true"
	endif
	[opsiServiceCall_get_productOnClient_localboot_objects]
	"method": "productOnClient_getObjects"
	"params": [
						"[]",
						'{"clientId":"%opsiserviceUser%","productType":"LocalbootProduct"}',
						]
EndFunc

; ###################################################################################################
DefFunc delOpsiPoc($donotdelList$ : stringlist) : string
  ;@Description     Delete all productOnClientObjects for this client and
  ;@Description     only for localboot products and
  ;@Description     not for products that are included in the $donotdelList$ parameter
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     List of opsi product Ids that should not be deleted
  ;@ParamAdvice_$productlist$   May be empty
  
  ;@Example     set $opsiMetaDataFile$ = $targetDir$+"\poc.json"
  ;@Example     if Fileexists($opsiMetaDataFile$)
  ;@Example     	comment "Delete existing meta data ...."
  ;@Example     	set $tmplist$ = createStringList ("opsi-vhd-tester","opsi-vhd-control","opsi-vhd-auto-upgrade")
  ;@Example     	if stringToBool(delOpsiPoc($tmplist$))
  ;@Example     		comment "Delete existing meta data successful finished"
  ;@Example     	else
  ;@Example     		LogError "Delete existing meta data failed"
  ;@Example     	endif
  ;@Example     	comment "Restore existing meta data ...."
  ;@Example     	if stringToBool(restoreOpsiPoc($opsiMetaDataFile$))
  ;@Example     		comment "Restore existing meta data successful finished"
  ;@Example     	else
  ;@Example     		LogError "Restore existing meta data failed"
  ;@Example     	endif
  ;@Example     else
  ;@Example     	comment "No meta data existing - creating it...."
  ;@Example     	if stringToBool(backupOpsiPoc($opsiMetaDataFile$))
  ;@Example     		comment "Backup meta data successful finished"
  ;@Example     	else
  ;@Example     		LogError "Backup meta data failed"
  ;@Example     	endif
  ;@Example     endif

	DefVar $ArrayStr$
	DefStringList $INST_ErrorList$
	DefStringList $resultlist$
	DefStringList $productIdInstalledList$
	DefStringList $pocList$
	
	set $result$ = "false"
	comment "load data from web service (localboot) to $productIdInstalledList$..."
	markErrorNumber
	comment "load data from web service (localboot)..."
	set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_localboot_objects")
	Set $ArrayStr$ = takestring(0, $resultlist$)
	if not(jsonIsValid($ArrayStr$))
		LogError "got no valid json from Service"
		;isFatalError
		set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
	endif
	if not(jsonIsArray($ArrayStr$))
		LogError "got no json Array from Service"
		;isFatalError
		set $INST_ErrorList$ = addtolist($INST_ErrorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
	endif
	comment "extract productIds ..."
	comment "clean target list"
	set $productIdInstalledList$ = emptylist($productIdInstalledList$)
	set $pocList$ = emptylist($pocList$)
	comment "get stringlist "
	if jsonAsArrayCountElements($ArrayStr$) > "0"
		set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
		for %aktpoc% in $pocList$ do set $productIdInstalledList$ = addToList($productIdInstalledList$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" ))
		comment "remove products that should not be deleted"
		for %productid% in $donotdelList$ do set $productIdInstalledList$ = removeFromListByMatch("%productid%",$productIdInstalledList$)
		comment "These produtIds will be deleted"
	endif
	comment "now delete ..."
	for %aktProductId% in $productIdInstalledList$ do opsiServiceCall_del_productOnClient
	
	if errorsOccuredSinceMark = 0
		set $result$ = "true"
	endif
	
	
	; if running not in service context use %HostID% instead of %opsiserviceUser%
	[opsiServiceCall_get_productOnClient_localboot_objects]
	"method": "productOnClient_getObjects"
	"params": [
						"[]",
						'{"clientId":"%opsiserviceUser%","productType":"LocalbootProduct"}',
						]
	
	[opsiServiceCall_del_productOnClient]
	"method": "productOnClient_delete"
	"params": [
						'%aktProductId%',
						'%opsiserviceUser%',
						]
EndFunc 

; ###################################################################################################

DefFunc backupOpsiPoc($filename$ : string) : string
  ;@Description     Get all localboot productOnClient objects for this client
  ;@Description     and write it to the json file $filename$
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References      restoreOpsiPoc
  ;@References      delOpsiPoc
  ;@Links
  ;@ParamDesc_$filename$     Complete name of the file to create
  ;@ParamAdvice_$filename$

  ;@Example     see delOpsiPoc

DefVar $ArrayStr$
DefStringList $INST_ErrorList$
DefStringList $resultlist$
DefStringList $productIdInstalledList$
DefStringList $pocList$

set $result$ = "false"
comment "load data from web service (localboot) to $ArrayStr$..."
markErrorNumber
comment "load data from web service (localboot)..."
set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_localboot_objects")
Set $ArrayStr$ = takestring(0, $resultlist$)
if not(jsonIsValid($ArrayStr$))
	LogError "got no valid json from Service"
	;isFatalError
	set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in DefFunc backupOpsiPoc: got no valid json from Service" )
endif
if not(jsonIsArray($ArrayStr$))
	LogError "got no json Array from Service"
	;isFatalError
	set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in DefFunc backupOpsiPoc: got no json Array from Service" )
endif
if not(saveTextFileWithEncoding(createStringList($ArrayStr$), $filename$, "utf8"))
	LogError "Could not save opsi meta data to file: "+$filename$
	;isFatalError
	set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in DefFunc backupOpsiPoc: Could not save opsi meta data to file: "+$filename$)
endif

if errorsOccuredSinceMark = 0
	set $result$ = "true"
endif


[opsiServiceCall_get_productOnClient_localboot_objects]
"method": "productOnClient_getObjects"
"params": [
					"[]",
					'{"clientId":"%opsiserviceUser%","productType":"LocalbootProduct"}',
					]
EndFunc 

; ###################################################################################################

DefFunc restoreOpsiPoc($filename$ : string) : string
  ;@Description     Load productOnClient objects from $filename$
  ;@Description     and write it to to the server
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$filename$     Complete name of the file to read
  ;@ParamAdvice_$filename$

  ;@Example     see delOpsiPoc



	DefVar $ArrayStr$
	DefStringList $INST_ErrorList$
	;DefStringList $resultlist$
	;DefStringList $productIdInstalledList$
	;DefStringList $pocList$
	
	Message "Restore productOnClient from file ..."
	set $result$ = "false"
	if fileExists($filename$)
		comment " get Restore data from file ..."
		Set $ArrayStr$ = strLoadTextFile($filename$)
		if not(jsonIsValid($ArrayStr$))
			LogError "got no valid json from file"
			set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in DefFunc restoreOpsiPoc: got no valid json from file" )
		endif
		if not(jsonIsArray($ArrayStr$))
			LogError "got no json Array from file"
			set $INST_ErrorList$ = addtolist($INST_ErrorList$, "Error in DefFunc restoreOpsiPoc: got no json Array from file" )
		endif
		if errorsOccuredSinceMark = 0
			markErrorNumber
			comment "write back " + jsonAsArrayCountElements($ArrayStr$)+ " objects"
			opsiServiceCall_updatePOC
		endif
		
	endif ; file exists
	
	if errorsOccuredSinceMark = 0
		set $result$ = "true"
	endif
	
	[opsiServiceCall_updatePOC]
	"method": "productOnClient_updateObjects"
	"params": [
						'$ArrayStr$'
						]

EndFunc 
; ###################################################################################################

DefFunc getInstalledLocalbootProductsWithVersion(ref $productlist$ : stringlist) : string

  ;@Description     Get all localboot productOnClient objects for this client
  ;@Description     and create a key/value list in the format <productId>=<productVersion>-<packageVersion>
  ;@Description     This list is be written to $productlist$
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     The key/value list with all <productId>=<productVersion>-<packageVersion> of the client
  ;@ParamAdvice_$productlist$


  ;@Example     comment "check for installed products ...."
  ;@Example     if stringToBool(getInstalledLocalbootProductsWithVersion($installedproducts$))
  ;@Example     	comment "getInstalledLocalbootProducts successful finished"
  ;@Example     else
  ;@Example     	LogError "getInstalledLocalbootProducts failed"
  ;@Example     endif
  ;@Example     comment "check for installable products ...."
  ;@Example     if stringToBool(getInstallableLocalbootProductsWithVersion($possibleproducts$))
  ;@Example     	comment "getInstallableLocalbootProductsWithVersion successful finished"
  ;@Example     else
  ;@Example     	LogError "getInstallableLocalbootProductsWithVersion failed"
  ;@Example     endif
  ;@Example     comment "fill $upgradeproducts$ .."
  ;@Example     set $tmplist$ = getKeyList($installedproducts$)
  ;@Example     set $possibleproducts$ = getSubListByKey($tmplist$,$possibleproducts$) 
  ;@Example     for %aktprod% in $installedproducts$ do sub_find_updatable_products

	DefVar $ArrayStr$
	DefStringList $errorList$
	DefStringList $resultlist$
	DefStringList $pocList$
	
	markErrorNumber
	set $result$ = "false"
	comment "load data from web service (localboot) to $productlist$..."
	markErrorNumber
	comment "load data from web service (localboot)..."
	set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnClient_localboot_objects")
	Set $ArrayStr$ = takestring(0, $resultlist$)
	if not(jsonIsValid($ArrayStr$))
		LogError "got no valid json from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no valid json from Service" )
	endif
	if not(jsonIsArray($ArrayStr$))
		LogError "got no json Array from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in sub_restore_productOnClient, switch_installed_products_to_setup=true: got no json Array from Service" )
	endif
	comment "extract productIds ..."
	comment "clean target list"
	set $productlist$ = emptylist($productlist$)
	set $pocList$ = emptylist($pocList$)
	comment "get stringlist "
	if jsonAsArrayCountElements($ArrayStr$) > "0"
		set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
		for %aktpoc% in $pocList$ do set $productlist$ = addToList($productlist$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" )+"="+jsonAsObjectGetValueByKey('%aktpoc%', "productVersion" )+"-"+jsonAsObjectGetValueByKey('%aktpoc%', "packageVersion"))
	endif
	
	if errorsOccurredSinceMark = 0
		set $result$ = "true"
	endif
	[opsiServiceCall_get_productOnClient_localboot_objects]
	"method": "productOnClient_getObjects"
	"params": [
						"[]",
						'{"clientId":"%opsiserviceUser%","productType":"LocalbootProduct","installationStatus":"installed"}',
						]
EndFunc

; ###################################################################################################

DefFunc getInstallableLocalbootProductsWithVersion(ref $productlist$ : stringlist) : string

  ;@Description     Get all localboot productOnDepot objects for the depot of this client
  ;@Description     and create a key/value list in the format <productId>=<productVersion>-<packageVersion>
  ;@Description     This list is be written to $productlist$
  ;@Returns         Returns string "true" if all is ok
  ;@OnError         Returns string "false"
  ;@SpecialCase     Works only in opsi service mode (not in interactive or batch mode)
  ;@References
  ;@Links
  ;@ParamDesc_$productlist$     The key/value list with all 
  ;@ParamDesc_$productlist$     <productId>=<productVersion>-<packageVersion> of the depot of this client
  ;@ParamAdvice_$productlist$


  ;@Example     see getInstalledLocalbootProductsWithVersion



	DefVar $ArrayStr$
	DefVar $depotId$
	DefStringList $errorList$
	DefStringList $resultlist$
	DefStringList $pocList$
	
	markErrorNumber
	set $result$ = "false"
	comment "load my depot from web service"
	set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_depotId")
	set $depotId$ = takestring(0, $resultlist$)
	markErrorNumber
	comment "load data from web service (localboot)..."
	set $resultlist$ = getReturnListFromSection("opsiServiceCall_get_productOnDepot_localboot_objects")
	Set $ArrayStr$ = takestring(0, $resultlist$)
	if not(jsonIsValid($ArrayStr$))
		LogError "got no valid json from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in opsiServiceCall_get_productOnDepot_localboot_objects: got no valid json from Service" )
	endif
	if not(jsonIsArray($ArrayStr$))
		LogError "got no json Array from Service"
		;isFatalError
		set $errorList$ = addtolist($errorList$, " Error in opsiServiceCall_get_productOnDepot_localboot_objects: got no json Array from Service" )
	endif
	comment "extract productIds ..."
	comment "clean target list"
	set $productlist$ = emptylist($productlist$)
	set $pocList$ = emptylist($pocList$)
	comment "get stringlist "
	if jsonAsArrayCountElements($ArrayStr$) > "0"
		set $pocList$ = jsonAsArrayToStringList($ArrayStr$)
		for %aktpoc% in $pocList$ do set $productlist$ = addToList($productlist$,jsonAsObjectGetValueByKey('%aktpoc%', "productId" )+"="+jsonAsObjectGetValueByKey('%aktpoc%', "productVersion" )+"-"+jsonAsObjectGetValueByKey('%aktpoc%', "packageVersion"))
	endif
	
	if errorsOccurredSinceMark = 0
		set $result$ = "true"
	endif
	[opsiServiceCall_get_depotId]
	"method": "getDepotId"
	"params": [
						"%opsiserviceUser%"
						]
	[opsiServiceCall_get_productOnDepot_localboot_objects]
	"method": "productOnDepot_getObjects"
	"params": [
						"[]",
						'{"depotId":"$depotId$","productType":"LocalbootProduct"}',
						]
EndFunc
