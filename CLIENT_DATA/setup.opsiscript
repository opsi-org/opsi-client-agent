; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/
;
; Fehlt:
;  - Datei / Verzeichnis umbenennen
;  - Erkennen ob Skript im Service-Kontext laeuft
;  - /batch mit /opsiservice, /clientid, /username, /password
;  - KillTask funktoniert nicht (opsi-notifier.exe)


[Actions]
requiredWinstVersion >= "4.12.4.17"
encoding = "UTF-8"

DefVar $OCA_ProductId$
DefVar $OCA_BaseDir$
DefVar $OCA_VarDir$

DefVar $OCA_ServiceAddress$
DefVar $OCA_ServiceUsername$
DefVar $OCA_ServicePassword$
DefVar $OCA_ClientId$
DefVar $OCA_InstallationOptions$
DefVar $OCA_Finalize$

DefVar $OLB_LoginBlockerStart$
DefVar $OLB_LoginBlockerTimeoutConnect$
DefVar $OLB_LogLevel$

DefVar $OST_CheckInterval$
DefVar $OST_NotifyFormat$

DefVar $OCD_BinaryArchiveFile$

Set $OCA_ProductId$ = "opsi-client-agent"
Set $OCA_BaseDir$ = "%ProgramFiles32Dir%\opsi.org\opsi-client-agent"
Set $OCA_VarDir$ = "c:\opsi.org"

Set $OCA_ServiceAddress$ = "%opsiserviceURL%"
Set $OCA_ServiceUsername$ = "%opsiserviceUser%"
Set $OCA_ServicePassword$ = "%opsiservicePassword%"
Set $OCA_ClientId$ = "%HostID%"
Set $OCA_InstallationOptions$ = ""
Set $OCA_Finalize$ = ""

Set $OLB_LoginBlockerStart$ = GetProductProperty("LoginBlockerStart", "on")
Set $OLB_LoginBlockerTimeoutConnect$ = "120"
Set $OLB_LogLevel$ = "5"

Set $OST_CheckInterval$ = GetProductProperty("systray_check_interval", "60")
Set $OST_NotifyFormat$ = GetProductProperty("systray_request_notify_format", "productname : request")




; === requirements ==============================================================
DefFunc install_requirements() : void
	Sub_install_vcredist

	[Sub_install_vcredist]
	Comment "Installing vcredist"
	Message "Installing vcredist"
	; Needed for opsi-login-blocker x86 and opsiclientd
	ShellCall('"%ScriptPath%\files\vcredist2015\vc_redist.x86.exe" /install /passive /norestart')
	if (GetSystemType = "64 Bit System")
		; Needed for opsi-login-blocker x64
		ShellCall('"%ScriptPath%\files\vcredist2015\vc_redist.x64.exe" /install /passive /norestart')
	endif
EndFunc


; === opsiclientd ===============================================================
DefFunc install_opsiclientd() : void
	DefStringList $TempList$

	Sub_uninstall_opsiclientdguard
	Sub_install_opsiclientd

	[Sub_uninstall_opsiclientdguard]
	Comment "Uninstalling opsiclientdguard"
	Message "Uninstalling opsiclientdguard"
	if FileExists($OCA_BaseDir$ + "\opsiclientdguard")
		ShellCall('sc stop opsiclientdguard')
		ShellCall('sc delete opsiclientdguard')
		Files_uninstall_opsiclientdguard
	endif

	[Files_uninstall_opsiclientdguard]
	del -sf "$OCA_BaseDir$\opsiclientdguard"

	[Sub_install_opsiclientd]
	Comment "Installing opsiclientd"
	Message "Installing opsiclientd"

	Set $TempList$ = ShellCall('dir /B "%ScriptPath%\files"')
	Set $TempList$ = GetRegexMatchList('(?m)^opsiclientd_windows_\S*.zip', $TempList$)
	Set $OCD_BinaryArchiveFile$ = "%ScriptPath%\files\" + TakeString(0, $TempList$)

	Comment "Opsiclientd archive file: " + $OCD_BinaryArchiveFile$

	Files_extract_opsiclientd_binaries_to_temp
	PowerShellCall('Remove-Item -Recurse -Force "' + $OCA_BaseDir$ + '\opsiclientd_bin_old"')
	PowerShellCall('Rename-Item "' + $OCA_BaseDir$ + '\opsiclientd_bin" "' + $OCA_BaseDir$ + '\opsiclientd_bin_old"')
	PowerShellCall('Rename-Item "' + $OCA_BaseDir$ + '\opsiclientd_windows_x86" "' + $OCA_BaseDir$ + '\opsiclientd_bin"')

	;if not (FileExists($OCA_BaseDir$ + "\opsiclientd_bin\opsiclientd.exe"))
	;	LogError "Failed to replace opsiclientd binaries, retry with copy"
	;	Files_install_opsiclientd_binaries_from_temp
	;endif
	if not (FileExists($OCA_BaseDir$ + "\opsiclientd_bin\opsiclientd.exe"))
		LogError "Failed to install opsiclientd binaries"
		IsFatalError "Failed to install opsiclientd binaries"
	endif

	MarkErrorNumber
	Files_install_opsiclientd_dir
	if ErrorsOccuredSinceMark > 0
		LogError "Failed to install opsiclientd"
		IsFatalError "Failed to install opsiclientd"
	endif

	comment "Copy opsiclientd custom files"
	MarkErrorNumber
	Files_install_opsiclientd_custom
	if errorsOccuredSinceMark > 0
		LogError "failed to install custom_opsiclientd"
		Message "failed to install custom_opsiclientd"
		IsFatalError "failed to install custom_opsiclientd"
	endif

	comment "Patch opsiclientd.conf"
	Patches_opsiclientd_conf $OCA_BaseDir$ + "\opsiclientd\opsiclientd.conf"

	comment "Run opsiclientd setup"
	ShellCall('"'+ $OCA_BaseDir$ + '\opsiclientd_bin\opsiclientd.exe" setup --client-id "' + $OCA_ClientId$ + '" --service-address "' + $OCA_ServiceAddress$ + '" --service-username "' + $OCA_ServiceUsername$ + '" --service-password "' + $OCA_ServicePassword$ + '"')


	[Files_extract_opsiclientd_binaries_to_temp]
	del -sfc "$OCA_BaseDir$\opsiclientd_windows_x86"
	unzipfile "$OCD_BinaryArchiveFile$" "$OCA_BaseDir$\"

	;[Files_install_opsiclientd_binaries_from_temp]
	;del -sfc "$OCA_BaseDir$\opsiclientd_bin"
	;copy -sc "$OCA_BaseDir$\opsiclientd_windows_x86\*.*" "$OCA_BaseDir$\opsiclientd_bin\"
	;del -sfc "$OCA_BaseDir$\opsiclientd_windows_x86"

	[Files_install_opsiclientd_dir]
	; Remove extend.d as workaround to avoid copy errors while copy *.conf
	del -fs "$OCA_BaseDir$\opsiclientd\extend.d"
	copy -s "$OCA_BaseDir$\opsiclientd_bin\opsiclientd_data\*.*" "$OCA_BaseDir$\opsiclientd\"
	del -fs "$OCA_BaseDir$\opsiclientd_bin\opsiclientd_data"

	[Files_install_opsiclientd_custom]
	copy -c "%ScriptPath%\custom\opsiclientd.conf" "$OCA_BaseDir$\opsiclientd\"

	[Patches_opsiclientd_conf]
	Set [global] log_level = 6

	Set [action_processor] local_dir = %global.base_dir%\\opsi-script
	Set [action_processor] remote_dir = opsi-script\\windows\\x86
	Set [action_processor] remote_common_dir = opsi-script\\common
	Set [action_processor] filename = opsi-script.exe
EndFunc


; === opsi-script ===============================================================
DefFunc install_opsiscript() : void
	Sub_install_opsiscript

	[Sub_install_opsiscript]
	Comment "Installing opsi-script"
	Message "Installing opsi-script"
	Files_install_opsiscript
	Registry_open_with_opsiscript

	[Files_install_opsiscript]
	; Do not use -V because it leads to broken winst on downgrade
	copy -sc "%ScriptPath%\files\opsi-script\*.*" "$OCA_BaseDir$\opsi-script\"

	[Registry_open_with_opsiscript]
	OpenKey [HKEY_CLASSES_ROOT\.opsiscript]
	Set "" = 'OpsiOrg.opsi-script.opsiscript'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript]
	Set "" = 'opsi-script command file'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\DefaultIcon]
	; TODO: Add opsi.ico to opsi-script in binaryindex
	Set "" = '$OCA_BaseDir$\opsi-script\opsi.ico'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open]
	Set "Icon" = '$OCA_BaseDir$\opsi-script\opsi.ico'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open\Command]
	Set "" = '"$OCA_BaseDir$\opsi-script\opsi-script.exe" "%1"'
EndFunc


; === opsi login blocker ========================================================
DefFunc install_loginblocker() : void
	Sub_uninstall_loginblocker
	if GetProductProperty("LoginBlockerStart", "on") = "on"
		Sub_install_loginblocker
	endif

	[Sub_uninstall_loginblocker]
	Comment "Uninstalling login blocker"
	Message "Uninstalling login blocker"
	Registry_uninstall_loginblocker /sysnative
	; logonui.exe locks OpsiLoginBlocker.dll
	;KillTask "logonui.exe"
	ShellCall("taskkill /f /im logonui.exe")
	Files_uninstall_loginblocker /sysnative

	[Sub_install_loginblocker]
	Comment "Installing login blocker"
	Message "Installing login blocker"
	MarkErrorNumber

	if (GetSystemType = "64 Bit System")
		Files_install_loginblocker_64 /sysnative
	else
		Files_install_loginblocker_32 /sysnative
	endif
	Registry_install_loginblocker /sysnative

	if ErrorsOccuredSinceMark > 0
		LogError "Failed to install loginblocker"
		Message "Failed to install loginblocker"
		IsFatalError "Failed to install loginblocker"
	endif

	[Files_uninstall_loginblocker]
	del -f "%System%\OpsiLoginBlocker.dll"

	[Files_install_loginblocker_32]
	copy -Vc "%ScriptPath%\files\OpsiLoginBlocker\32bit\OpsiLoginBlocker.dll" "%System%\"

	[Files_install_loginblocker_64]
	copy -Vc "%ScriptPath%\files\OpsiLoginBlocker\64bit\OpsiLoginBlocker.dll" "%System%\"

	[Registry_uninstall_loginblocker]
	DeleteKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	DeleteKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	DeleteKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]

	[Registry_install_loginblocker]
	OpenKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"

	OpenKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}\InprocServer32]
	Set "" = "OpsiLoginBlocker.dll"
	Set "ThreadingModel" = "Apartment"

	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"
	Set "LoginBlockerStart" = REG_DWORD:1
	Set "LoginBlockerTimeoutConnect" = REG_DWORD:$OLB_LoginBlockerTimeoutConnect$
	Set "LoginBlockerLogLevel" = REG_DWORD:$OLB_LogLevel$
	Set "LoginBlockerLogDir" = "%opsiLogDir%"

	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"
EndFunc


; === opsi-notifier =============================================================
DefFunc install_opsinotifier() : void
	Sub_install_opsinotifier

	[Sub_install_opsinotifier]
	Comment "Installing opsi-notifier"
	Message "Installing opsi-notifier"
	;KillTask "opsi-notifier.exe"
	ShellCall("taskkill /f /im opsi-notifier.exe")
	Files_install_opsinotifier

	[Files_install_opsinotifier]
	copy -c "%ScriptPath%\files\opsi-notifier\opsi-notifier.exe" "$OCA_BaseDir$\"
	copy -c "%ScriptPath%\files\opsi-notifier\notifier.d\*.*" "$OCA_BaseDir$\notifier\"
	; Copy possible existing custom notifier changes over standard:
	copy -sc "%ScriptPath%\custom\notifier\*.*" "$OCA_BaseDir$\notifier\"
EndFunc


; === opsi-systray ===============================================================
DefFunc install_opsisystray() : void
	Sub_uninstall_opsisystray
	if GetProductProperty("systray_install", "true") = "true"
		Sub_install_opsisystray
	endif

	[Sub_uninstall_opsisystray]
	Comment "Uninstalling opsi-systray"
	Message "Uninstalling opsi-systray"
	;KillTask "opsi-client-systray.exe"
	ShellCall("taskkill /f /im opsi-client-systray.exe")
	Registry_uninstall_opsisystray
	Files_uninstall_opsisystray

	[Sub_install_opsisystray]
	Comment "Installing opsi-systray"
	Message "Installing opsi-systray"
	Files_install_opsisystray
	Registry_install_opsisystray

	[Files_uninstall_opsisystray]
	del -sfc "$OCA_BaseDir$\opsi-systray"

	[Registry_uninstall_opsisystray]
	OpenKey [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]
	DeleteVar "opsi_systray_start"

	[Files_install_opsisystray]
	copy -sVc "%ScriptPath%\files\opsi-systray\*.*" "$OCA_BaseDir$\opsi-systray\"
	copy -Vc "%ScriptPath%\files\opsi-script\*.dll" "$OCA_BaseDir$\opsi-systray\"

	[Registry_install_opsisystray]
	OpenKey [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]
	Set "opsi_systray_start" = '"$OCA_BaseDir$\opsi-systray\opsi-client-systray.exe" --fqdn=$OCA_ClientId$ --checkintervall=$OST_CheckInterval$ --notifyformat="$OST_NotifyFormat$"'
EndFunc


; === directories ===============================================================
DefFunc install_directories() : void
	Comment "Creating directories and setting permissions"
	Message "Creating directories and setting permissions"
	Files_create_dirs
	DosInAnIcon_set_file_permissions

	[Files_create_dirs]
	CheckTargetPath = "$OCA_VarDir$"
	CheckTargetPath = "$OCA_VarDir$\log"
	CheckTargetPath = "$OCA_VarDir$\applog"
	CheckTargetPath = "$OCA_VarDir$\tmp"
	CheckTargetPath = "$OCA_VarDir$\usertmp"
	CheckTargetPath = "$OCA_VarDir$\cache"
	CheckTargetPath = "$OCA_VarDir$\opsiclientd"
	CheckTargetPath = "$OCA_VarDir$\tls"
	CheckTargetPath = "$OCA_VarDir$\data"

	[DosInAnIcon_set_file_permissions]
	; Take ownership, redirect stdout to nul for speedup
	if not "%USERNAME%"=="SYSTEM" takeown /R /D N /F "$OCA_VarDir$" > nul
	; Remove all explicit permissions from the folder recursively (inheritance only)
	icacls "$OCA_VarDir$" /q /c /t /reset
	; Allow full access to local admin group and system user, inherit to all objects (OI) and containers (CI)
	; Allow read access to local users for folder only
	icacls "$OCA_VarDir$" /grant:r *S-1-5-32-544:(OI)(CI)F /grant:r *S-1-5-18:(OI)(CI)F /grant:r *S-1-5-32-545:RX
	; Disable inheritance from parent folder
	icacls "$OCA_VarDir$" /inheritance:r
	; Set owner to SYSTEM
	icacls "$OCA_VarDir$" /setowner SYSTEM
	; Add full permission for local users on applog
	icacls "$OCA_VarDir$\applog" /grant *S-1-5-32-545:(OI)(CI)F
	; Add full permission for local users on usertmp
	icacls "$OCA_VarDir$\usertmp" /grant *S-1-5-32-545:(OI)(CI)F

	; Take ownership, redirect stdout to nul for speedup
	if not "%USERNAME%"=="SYSTEM" takeown /R /D N /F "$OCA_BaseDir$" > nul
	; Remove all explicit permissions from the folder recursively (inheritance only)
	icacls "$OCA_BaseDir$" /q /c /t /reset
	; Allow full access to local admin group and system user, inherit to all objects (OI) and containers (CI)
	; Allow read access to local users for folder only
	icacls "$OCA_BaseDir$" /grant:r *S-1-5-32-544:(OI)(CI)F /grant:r *S-1-5-18:(OI)(CI)F /grant:r *S-1-5-32-545:RX
	; Disable inheritance from parent folder
	icacls "$OCA_BaseDir$" /inheritance:r
	; Set owner to SYSTEM
	icacls "$OCA_BaseDir$" /setowner SYSTEM
	; Add read and exceute permission for local users on opsi-script
	icacls "$OCA_BaseDir$\opsi-script" /grant *S-1-5-32-545:(OI)(CI)RX
	; Add read and exceute permission for local users on opsi-systray
	icacls "$OCA_BaseDir$\opsi-systray" /grant *S-1-5-32-545:(OI)(CI)RX
EndFunc


; === directories ===============================================================
DefFunc post_os_installation_tasks() : void
	Comment "Running post os installation tasks"
	DefStringList $TempList1$
	DefStringList $TempList2$
	DefVar $TempString$

	Registry_set_opsi_general_config

	Comment "Setting running netboot package to installed"
	Set $TempString$ = TakeString(0, GetReturnListFromSection("OpsiServiceCall_productOnClient_getObjects_netboot_running"))
	if JsonAsArrayCountElements($TempString$) > "0"
		Set $TempList1$ = JsonAsArrayToStringList($TempString$)
		Set $TempList2$ = EmptyList($TempList2$)
		for %ProdOnClient% in $TempList1$ do Set $TempList2$ = addToList($TempList2$, JsonAsObjectGetValueByKey('%ProdOnClient%', "productId"))
		for %TempProductId% in $TempList2$ do OpsiServiceCall_setProductInstallationStatus_installed
	endif

	Comment "Setting installed packages to setup"
	Set $TempString$ = TakeString(0, GetReturnListFromSection("OpsiServiceCall_productOnClient_getObjects_localboot_installed"))
	if JsonAsArrayCountElements($TempString$) > "0"
		Set $TempList1$ = JsonAsArrayToStringList($TempString$)
		Set $TempList2$ = EmptyList($TempList2$)
		for %ProdOnClient% in $TempList1$ do Set $TempList2$ = addToList($TempList2$, JsonAsObjectGetValueByKey('%ProdOnClient%', "productId"))
		Set $TempList2$ = RemoveFromListByMatch('opsi-winst', $TempList2$)
		Set $TempList2$ = RemoveFromListByMatch('opsi-script', $TempList2$)
		Set $TempList2$ = RemoveFromListByMatch('opsi-client-agent', $TempList2$)
		for %TempProductId% in $TempList2$ do OpsiServiceCall_setProductActionRequestWithDependencies_setup
	endif

	[Registry_set_opsi_general_config]
	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\general]
	Set "bootmode" = "BKSTD"
	;Set "opsiconf" = REG_DWORD:1
	;Set "configlocal" = REG_DWORD:0

	[OpsiServiceCall_setProductActionRequestWithDependencies_setup]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		"%TempProductId%",
		"$OCA_ClientId$",
		"setup"
	]

	[OpsiServiceCall_productOnClient_getObjects_localboot_installed]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$OCA_ClientId$","productType":"LocalbootProduct","installationStatus":"installed"}'
	]

	[OpsiServiceCall_productOnClient_getObjects_netboot_running]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$OCA_ClientId$","productType":"NetbootProduct","actionProgress":"running"}'
	]

	[OpsiServiceCall_setProductInstallationStatus_installed]
	"method": "setProductInstallationStatus"
	"params": [
		"%TempProductId%",
		"$OCA_ClientId$",
		"installed"
	]
EndFunc


; === setup after install ========================================================
DefFunc setup_after_install() : void
	DefStringList $TempList$

	Set $TempList$ = createStringList()
	Set $TempList$ = GetProductPropertyList("setup_after_install", $TempList$)
	if count($TempList$) > "0"
		Comment "Setup after install"
		Set $OCA_Finalize$ = "reboot"
		for %TempProductId% in $TempList$ do OpsiServiceCall_setProductActionRequestWithDependencies_setup
	endif

	[OpsiServiceCall_setProductActionRequestWithDependencies_setup]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		"%TempProductId%",
		"$OCA_ClientId$",
		"setup"
	]
EndFunc


; === actions ===================================================================
if not (GetOS = "Windows_NT")
	LogError "OS not supoorted: " + GetOS
	isFatalError "OS not supoorted: " + GetOS
endif

if CompareDotSeparatedNumbers(GetMsVersionInfo, "<", "6.0")
	logError "Windows version not supported: " + GetMsVersionInfo
	isFatalError "Windows version not supported: " + GetMsVersionInfo
endif

if not (HasMinimumSpace ("%SystemDrive%", "200 MB"))
	LogError "Insufficient disk space on %SystemDrive% (200 MB required)"
	IsFatalError "Insufficient disk space"
endif

Comment "Show product image"
ShowBitmap "%ScriptPath%\files\opsi-logo.png" "opsi client agent"

Message "Installing " + $OCA_ProductId$ + " ..."

if ("%opsiserviceURL%" = "")
	Comment "Not running in service context"
	if ProcessIsRunning("opsiclientd.exe")
		ShellCall("sc stop opsiclientd")
		SleepSeconds 5
	endif

	DefStringList $TempList$
	Set $TempList$ = SplitString(PARAMSTR, "||")
	Set $OCA_ServiceAddress$ = TakeString(0, $TempList$)
	Set $OCA_ClientId$ = TakeString(1, $TempList$)
	Set $OCA_ServiceUsername$ = TakeString(1, $TempList$)
	Set $OCA_ServicePassword$ = AsConfidential(TakeString(2, $TempList$))
	Set $OCA_InstallationOptions$ = TakeString(3, $TempList$)

	MarkErrorNumber
	OpsiServiceCall_authenticated /serviceurl $OCA_ServiceAddress$ /username $OCA_ServiceUsername$ /password $OCA_ServicePassword$
	if ErrorsOccuredSinceMark > 0
		LogError "Opsi service authentication failed"
		IsFatalError "Service auth failure"
	endif

	if Contains($OCA_InstallationOptions$, "bootimage")
		post_os_installation_tasks()
	endif

	install_opsiscript()
else
	Comment "Running in service context"
endif

install_requirements()
install_opsinotifier()
install_opsisystray()
install_opsiclientd()
install_directories()
setup_after_install()

; Installation of opsi-login-blocker will kill/restart LogonUI => last step
install_loginblocker()

if ("%opsiserviceURL%" = "")
	OpsiServiceCall_productOnClient_createObjects_opsiclientagent
endif

if CompareDotSeparatedNumbers(GetMsVersionInfo, "<", "10.0")
	; Restart opsiclientd on windows before windows 10 not working reliable (service terminated unexpectedly)
	Set $OCA_Finalize$ = "reboot"
endif
if Contains($OCA_InstallationOptions$, "bootimage")
	Set $OCA_Finalize$ = "reboot"
	if Contains($OCA_InstallationOptions$, "noreboot")
		Set $OCA_Finalize$ = ""
	else
		if Contains($OCA_InstallationOptions$, "reboot")
			Set $OCA_Finalize$ = "reboot"
		else
			if Contains($OCA_InstallationOptions$, "shutdown")
				Set $OCA_Finalize$ = "shutdown"
			else
				if (GetProductProperty("allow_reboot", "true") = "false")
					Set $OCA_Finalize$ = ""
				endif
			endif
		endif
	endif
endif

if ($OCA_Finalize$ = "reboot")
	ExitWindows /Reboot
else
	if ($OCA_Finalize$ = "shutdown")
		ExitWindows /ShutdownWanted
	else
		; Restart opsiclientd after current event or start opsiclientd without executing events
		Comment "Creating opsiclientd restart marker"
		PowerShellCall('New-Item "' + $OCA_BaseDir$ + '\opsiclientd_bin\.opsiclientd_restart" -ItemType File')
		if not (ProcessIsRunning("opsiclientd.exe"))
			ShellCall('sc start opsiclientd')
		endif
	endif
endif


[OpsiServiceCall_authenticated]
"method": "authenticated"
"params": []

[OpsiServiceCall_productOnClient_createObjects_opsiclientagent]
"method": "productOnClient_createObjects"
"params": [
	'[{"type":"ProductOnClient","productType":"LocalbootProduct","clientId":"$OCA_ClientId$","productId":"$OCA_ProductId$","installationStatus":"installed","actionRequest":"none","actionResult":"successful"}]'
]
