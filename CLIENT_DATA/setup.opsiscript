; Copyright (c) 2021-2022 uib GmbH <info@uib.de>
; All rights reserved.
; License: AGPL-3.0
;
; Needs KB4457144 on Windows 7
;

[Actions]
requiredOpsiscriptVersion >= "4.12.5.1"
encoding = "UTF-8"

DefVar $ProductId$ = "opsi-client-agent"
DefVar $BaseDir$ = "%ProgramFiles32Dir%\opsi.org\opsi-client-agent"
DefVar $VarDir$ = "c:\opsi.org"
DefVar $ServiceAddress$ = "%opsiserviceURL%"
DefVar $ServiceUsername$ = "%opsiserviceUser%"
DefVar $ServicePassword$ = "%opsiservicePassword%"
DefVar $ClientId$ = "%HostID%"
DefVar $InstallationOptions$ = PARAMSTR
DefVar $Finalize$ = "service_restart"


; === requirements ==============================================================
DefFunc install_requirements() : void
	Sub_install_vcredist
	if CompareDotSeparatedNumbers(GetMsVersionInfo, "<", "10.0")
		; Needed for python >= 3.9 on windows < 10
		Sub_install_api-ms-win-core-path
	endif
	; If this is a windows server system (desktop has WebDav-redirector installed by default)
	comment "Checking for windows server - product_type_nr is " + takeString(1,splitString(takeString(8, GetMsVersionMap),"="))
	if takeString(1,splitString(takeString(8, GetMsVersionMap),"=")) = "3"
		; Needed for webdav mode
		Sub_install_webdav_redirector
	endif

	[Sub_install_vcredist]
	Comment "Installing vcredist"
	Message "Installing vcredist"
	; Needed for opsi-login-blocker x86 and opsiclientd
	ShellCall('"%ScriptPath%\files\vcredist\VC_redist.x86.exe" /install /quiet /norestart')
	if (GetSystemType = "64 Bit System")
		; Needed for opsi-login-blocker x64
		ShellCall('"%ScriptPath%\files\vcredist\VC_redist.x64.exe" /install /quiet /norestart')
	endif

	[Sub_install_api-ms-win-core-path]
	Message "Installing api-ms-win-core-path"

	Comment "Installing api-ms-win-core-path x86"
	Files_install_api-ms-win-core-path_x86 /32bit

	if (GetSystemType = "64 Bit System")
		Comment "Installing api-ms-win-core-path x64"
		Files_install_api-ms-win-core-path_x64 /64bit
	endif

	[Files_install_api-ms-win-core-path_x86]
	copy -n "%ScriptPath%\files\api-ms-win-core-path\x86\api-ms-win-core-path-l1-1-0.dll" "%System%\"

	[Files_install_api-ms-win-core-path_x64]
	copy -n "%ScriptPath%\files\api-ms-win-core-path\x64\api-ms-win-core-path-l1-1-0.dll" "%System%\"

	[Sub_install_webdav_redirector]
	Message "Installing WebDav-Redirector"
	PowerShellCall("Install-WindowsFeature WebDav-Redirector")
	LogWarning "WebDav-Redirector installation requires a reboot to complete"
EndFunc


; === opsiclientd ===============================================================
DefFunc install_opsiclientd(): void
	DefStringList $TempList$

	Sub_uninstall_opsiclientdguard
	Sub_install_opsiclientd

	[Sub_uninstall_opsiclientdguard]
	Comment "Uninstalling opsiclientdguard"
	Message "Uninstalling opsiclientdguard"
	if FileExists($BaseDir$ + "\opsiclientdguard")
		ShellCall('sc stop opsiclientdguard')
		ShellCall('sc delete opsiclientdguard')
		Files_uninstall_opsiclientdguard
	endif

	[Files_uninstall_opsiclientdguard]
	del -sf "$BaseDir$\opsiclientdguard"

	[Sub_install_opsiclientd]
	Comment "Installing opsiclientd"
	Message "Installing opsiclientd"

	Set $TempList$ = ShellCall('dir /B "%ScriptPath%\files"')
	Set $TempList$ = GetRegexMatchList('(?m)^opsiclientd_windows_\S*.zip', $TempList$)
	if count($TempList$) = "0"
		LogError "Did not find opsiclientd binary archive in installation files"
		isFatalError "No opsiclientd archive"
	endif
	DefVar $BinaryArchiveFile$ = "%ScriptPath%\files\" + TakeString(0, $TempList$)

	Comment "Extracting opsiclientd archive file: " + $BinaryArchiveFile$
	Files_extract_opsiclientd_binaries_to_temp
	; Give antivir time to lock and unlock new directory
	sleepSeconds 2

	Comment "Installing opsiclientd binary files"
	DefVar $BinDir$ = $BaseDir$ + "\opsiclientd_bin"
	DefVar $BinDir1$ = $BaseDir$ + "\opsiclientd_bin1"
	DefVar $BinDir2$ = $BaseDir$ + "\opsiclientd_bin2"
	DefVar $BinDirOld$ = $BaseDir$ + "\opsiclientd_bin_old"
	DefVar $NewDir$ = $BinDir2$
	DefVar $LinkTarget$ = ""

	MarkErrorNumber
	if CompareDotSeparatedNumbers(GetMsVersionInfo, "<", "10.0")
		Set $TempList$ = ShellCall('fsutil reparsePoint query "' + $BinDir$ + '"')
		DefVar $TempStr$ = takeFirstStringContaining($TempList$, "opsiclientd_bin")
		Set $TempStr$ = TakeString(-1, SplitString($TempStr$, "\"))
		if not ($TempStr$ = "")
			Set $LinkTarget$ = $BaseDir$ + "\" + $TempStr$
		endif
	else
		Set $TempList$ = PowershellCall('Get-Item "' + $BinDir$ + '" | Select-Object -ExpandProperty Target')
		Set $LinkTarget$ = TakeString(0, $TempList$)
	endif

	if ($LinkTarget$ = "")
		Comment $BinDir$ + " is not a link"
		if FileExists($BinDir$)
			if FileExists($BinDir1$)
				Comment "Removing " + $BinDir1$
				PowershellCall('Remove-Item "' + $BinDir1$ + '" -Recurse')
			endif
			Comment "Moving " + $BinDir$ + " to " + $BinDir1$
			PowershellCall('Rename-Item "' + $BinDir$ + '" "' + $BinDir1$ + '"')
			SleepSeconds 3
			if FileExists($BinDir$)
				LogError "Failed to move " + $BinDir$ + " to " + $BinDir1$
				if FileExists($BinDir$ + '\move_failed_marker')
					IsFatalError "Failed to move opsiclientd binaries"
				else
					LogError "Killing all opsiclientd binaries and retrying"
					Set $Finalize$ = "opsiclientd_killed_force_service_start"
					ShellCall("net stop opsiclientd")
					SleepSeconds 5
					ShellCall("taskkill /f /im opsiclientd.exe")
					ShellCall("taskkill /f /im action_processor_starter.exe")
					ShellCall("taskkill /f /im opsiclientd_rpc.exe")
					SleepSeconds 10
					if FileExists($BinDir$)
						PowershellCall('Rename-Item "' + $BinDir$ + '" "' + $BinDir1$ + '"')
						SleepSeconds 3
						if FileExists($BinDir$)
							LogError "Failed to move " + $BinDir$ + " to " + $BinDir1$ + " again"
							PowershellCall('New-Item -ItemType file "' + $BinDir$ + '\move_failed_marker"')
							LogError "Could not access " + $BinDir$ + " - restarting opsiclientd for retry"
							ShellCall("net start opsiclientd")
							ExitWindows /ImmediateLogout
						endif
					else
						Comment "Somehow the directory " + $BinDir$ + " disappeared after stopping processes"
					endif
				endif
			endif
		endif
	else
		Comment $BinDir$ + " is a link to " + $LinkTarget$
		if (TakeString(-1, SplitString($LinkTarget$, "\")) = "opsiclientd_bin2")
			Set $NewDir$ = $BinDir1$
		endif
	endif

	if FileExists($NewDir$)
		Comment "Removing " + $NewDir$
		PowershellCall('Remove-Item "' + $NewDir$ + '" -Recurse')
	endif
	; In case removal failed (or partially successful) do not change link target
	if FileExists($NewDir$)
		LogError "Failed to remove old opsiclientd"
		IsFatalError "Failed to remove old opsiclientd"
	endif

	Comment "Moving " + $BaseDir$ + "\opsiclientd_windows_x86 to " + $NewDir$
	PowershellCall('Rename-Item "' + $BaseDir$ + '\opsiclientd_windows_x86" "' + $NewDir$ + '"')

	if not(FileExists($NewDir$))
		Comment "Failed to move " + $BaseDir$ + "\opsiclientd_windows_x86 to " + $NewDir$ + " retrying after 3 seconds"
		sleepSeconds 3
		PowershellCall('Rename-Item "' + $BaseDir$ + '\opsiclientd_windows_x86" "' + $NewDir$ + '"')
	endif

	if not(FileExists($NewDir$))
		Comment "Failed to move " + $BaseDir$ + "\opsiclientd_windows_x86 to " + $NewDir$ + " after retry"
		isFatalError "Failed to access new opsiclientd - check Antivirus software"
	endif

	Comment "Creating link " + $BinDir$ + " pointing to " + $NewDir$
	ShellInAnIcon_mklink

	if not ($Finalize$ = "opsiclientd_killed_force_service_start")
		if (ErrorsOccurredSinceMark > 0) or (not (FileExists($NewDir$)))
			LogError "Failed to install opsiclientd binaries"
			IsFatalError "Failed to install opsiclientd binaries"
		endif

		if FileExists($BinDirOld$)
			Comment "Removing " + $BinDirOld$
			PowershellCall('Remove-Item "' + $BinDirOld$ + '" -Recurse')
		endif

		MarkErrorNumber
		Files_install_opsiclientd_dir
		if ErrorsOccurredSinceMark > 0
			LogError "Failed to install opsiclientd data directory"
		endif

		comment "Patch opsiclientd.conf"
		Patches_opsiclientd_conf $BaseDir$ + "\opsiclientd\opsiclientd.conf"

		comment "Run opsiclientd setup"
		DosInAnIcon_opsiclientd_setup
		if not(GetLastExitcode = "0")
			LogError "opsiclientd setup failed"
			IsFatalError "opsiclientd setup failed"
		endif
	endif

	Files_remove_old_opsiclientd


	[ShellInAnIcon_mklink]
	rmdir "$BinDir$"
	mklink /j "$BinDir$" "$NewDir$"
	;mklink /d "$BaseDir$\opsiclientd_bin" "$NewDir$"
	;Powershell -ExecutionPolicy Bypass -NoProfile -Command "New-Item -ItemType SymbolicLink -Path \"$BaseDir$\opsiclientd_bin\" -Target \"$NewDir$\""

	[Files_extract_opsiclientd_binaries_to_temp]
	del -sfc "$BaseDir$\opsiclientd_windows_x86"
	unzipfile "$BinaryArchiveFile$" "$BaseDir$\"

	[Files_install_opsiclientd_binaries_from_temp]
	del -sfc "$BaseDir$\opsiclientd_bin"
	copy -sc "$BaseDir$\opsiclientd_windows_x86\*.*" "$BaseDir$\opsiclientd_bin\"
	del -sfc "$BaseDir$\opsiclientd_windows_x86"

	[Files_install_opsiclientd_dir]
	copy -s "$BaseDir$\opsiclientd_bin\opsiclientd_data\*.*" "$BaseDir$\opsiclientd\"
	del -fs "$BaseDir$\opsiclientd_bin\opsiclientd_data"

	[Patches_opsiclientd_conf]
	Set [global] log_level = 6

	Set [action_processor] local_dir = %global.base_dir%\\opsi-script
	Set [action_processor] remote_dir = opsi-script\\windows\\x86
	Set [action_processor] remote_common_dir = opsi-script\\common
	Set [action_processor] filename = opsi-script.exe

	[DosInAnIcon_opsiclientd_setup]
	"$BaseDir$\opsiclientd_bin\opsiclientd.exe" setup --log-level 6 --client-id "$ClientId$" --service-address "$ServiceAddress$" --service-username "$ServiceUsername$" --service-password "$ServicePassword$"
	set EXITCODE=%ERRORLEVEL%
	echo "opsiclientd setup had errorlevel %EXITCODE%"
	exit %EXITCODE%

	[Files_remove_old_opsiclientd]
	del -rc "$BaseDir$\opsiclientd.exe"
	del -s "$BaseDir$\openssl"
	del -s "$BaseDir$\on_shutdown"
	del -s "$BaseDir$\utilities"
	del -s "$BaseDir$\prelogin"
	del -s "$BaseDir$\custom\"
	del -s "$BaseDir$\images\"

	[ExecWith_powershell_install_binaries]
	$bin_dir = "$BaseDir$\opsiclientd_windows_x86"
	$inst_dir = "$BaseDir$\opsiclientd_bin"

	$target = Get-Item $inst_dir | Select-Object -ExpandProperty Target
	$new_dir = "${inst_dir}2"
	if ($target) {
		Write-Host "${inst_dir} is a symbolic link"
		if ((Get-Item($target)).Name -eq "opsiclientd_bin2") {
			$new_dir = "${inst_dir}1"
		}
		Write-Host "Removing link ${inst_dir}"
		Remove-Item $inst_dir
	}
	else {
		Write-Host "${inst_dir} is not a symbolic link"
		if (Test-Path $inst_dir) {
			if (Test-Path "${inst_dir}1") {
				Write-Host "Deleting ${inst_dir}1"
				Remove-Item "${inst_dir}1" -Recurse
			}
			Write-Host "Moving ${inst_dir} to ${inst_dir}1"
			Rename-Item $inst_dir "${inst_dir}1"
		}
	}

	if (Test-Path $new_dir) {
		Write-Host "Deleting ${new_dir}"
		Remove-Item $new_dir -Recurse
	}

	Write-Host "Moving ${bin_dir} to ${new_dir}"
	Rename-Item $bin_dir $new_dir

	Write-Host "Creating link ${inst_dir} to ${new_dir}"
	$arglist = "/c mklink /d `"${inst_dir}`" `"${new_dir}`""
	Start-Process -Wait -WindowStyle Hidden -Verb RunAs -FilePath "cmd.exe" -ArgumentList $arglist
EndFunc


; === opsi-script ===============================================================
DefFunc install_opsiscript() : void
	Sub_install_opsiscript

	[Sub_install_opsiscript]
	Comment "Installing opsi-script"
	Message "Installing opsi-script"
	Files_install_opsiscript
	Registry_open_with_opsiscript
	Comment "Creating opsi-winst for compatibility with old netboot products"
	Files_create_opsi_winst_for_compatibility
	opsiservicecall_set_OpsiScript_installed

	[Files_install_opsiscript]
	; Do not use -V because it leads to broken winst on downgrade
	copy -sc "%ScriptPath%\files\opsi-script\*.*" "$BaseDir$\opsi-script\"

	[Registry_open_with_opsiscript]
	OpenKey [HKEY_CLASSES_ROOT\.opsiscript]
	Set "" = 'OpsiOrg.opsi-script.opsiscript'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript]
	Set "" = 'opsi-script command file'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\DefaultIcon]
	; TODO: Add opsi.ico to opsi-script in binaryindex
	Set "" = '$BaseDir$\opsi-script\opsi.ico'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open]
	Set "Icon" = '$BaseDir$\opsi-script\opsi.ico'
	OpenKey [HKEY_CLASSES_ROOT\OpsiOrg.opsi-script.opsiscript\Shell\Open\Command]
	Set "" = '"$BaseDir$\opsi-script\opsi-script.exe" "%1"'

	[Files_create_opsi_winst_for_compatibility]
	del -sf  "$BaseDir$\opsi-winst"
	checkTargetPath = "$BaseDir$\opsi-winst"
	copy -sc "$BaseDir$\opsi-script\*.*"

	[opsiservicecall_set_OpsiScript_installed]
	"method": "setProductInstallationStatus"
	"params": [
		"opsi-script",
		"$ClientId$",
		"installed"
	]

EndFunc


; === opsi-script-skin ===============================================================
DefFunc install_opsiscript_skin() : void
	Files_install_opsiscript_skin

	[Files_install_opsiscript_skin]
	; Do not use -V because it leads to broken winst on downgrade
	copy -sc "%ScriptPath%\files\opsi-script\skin\*.*" "$BaseDir$\opsi-script\skin\"
EndFunc


; === opsi login blocker ========================================================
DefFunc install_loginblocker() : void
	DefVar $LoginBlockerTimeoutConnect$ = "120"
	DefVar $LoginBlockerLogLevel$ = "5"

	Sub_uninstall_loginblocker
	if GetProductProperty("LoginBlockerStart", "on") = "on"
		Sub_install_loginblocker
	endif

	[Sub_uninstall_loginblocker]
	Comment "Uninstalling login blocker"
	Message "Uninstalling login blocker"
	Registry_uninstall_loginblocker /sysnative
	; logonui.exe locks OpsiLoginBlocker.dll
	;KillTask "logonui.exe"
	ShellCall("taskkill /f /im logonui.exe")
	Files_uninstall_loginblocker /sysnative

	[Sub_install_loginblocker]
	Comment "Installing login blocker"
	Message "Installing login blocker"
	MarkErrorNumber

	if (GetSystemType = "64 Bit System")
		Files_install_loginblocker_64 /sysnative
	else
		Files_install_loginblocker_32 /sysnative
	endif
	Registry_install_loginblocker /sysnative

	if ErrorsOccurredSinceMark > 0
		LogError "Failed to install loginblocker"
		Message "Failed to install loginblocker"
		IsFatalError "Failed to install loginblocker"
	endif

	[Files_uninstall_loginblocker]
	del -f "%System%\OpsiLoginBlocker.dll"

	[Files_install_loginblocker_32]
	copy -Vc "%ScriptPath%\files\OpsiLoginBlocker\32bit\OpsiLoginBlocker.dll" "%System%\"

	[Files_install_loginblocker_64]
	copy -Vc "%ScriptPath%\files\OpsiLoginBlocker\64bit\OpsiLoginBlocker.dll" "%System%\"

	[Registry_uninstall_loginblocker]
	DeleteKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	DeleteKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	DeleteKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]

	[Registry_install_loginblocker]
	OpenKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"

	OpenKey [HKEY_CLASSES_ROOT\CLSID\{d2028e19-82fe-44c6-ad64-51497c97a02a}\InprocServer32]
	Set "" = "OpsiLoginBlocker.dll"
	Set "ThreadingModel" = "Apartment"

	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"
	Set "LoginBlockerStart" = REG_DWORD:1
	Set "LoginBlockerTimeoutConnect" = REG_DWORD:$LoginBlockerTimeoutConnect$
	Set "LoginBlockerLogLevel" = REG_DWORD:$LoginBlockerLogLevel$
	Set "LoginBlockerLogDir" = "%opsiLogDir%"

	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{d2028e19-82fe-44c6-ad64-51497c97a02a}]
	Set "" = "OpsiLoginBlocker"
EndFunc


; === opsi-notifier =============================================================
DefFunc install_opsinotifier() : void
	Sub_install_opsinotifier

	[Sub_install_opsinotifier]
	Comment "Installing opsi-notifier"
	Message "Installing opsi-notifier"
	;KillTask "opsi-notifier.exe"
	ShellCall("taskkill /f /im opsi-notifier.exe")
	ShellCall("taskkill /f /im motd-notifier.exe")
	;VERY old opsi-client-agents use notifier.exe instead of opsi-notifier.exe
	ShellCall("taskkill /f /im notifier.exe")
	Files_install_opsinotifier
	Files_install_motd_notifier

	[Files_install_opsinotifier]
	copy -c "%ScriptPath%\files\opsi-notifier\opsi-notifier.exe" "$BaseDir$\"
	copy -c "%ScriptPath%\files\opsi-notifier\notifier.d\*.*" "$BaseDir$\notifier\"

	[Files_install_motd_notifier]
	copy -c "%ScriptPath%\files\motd-notifier.exe" "$BaseDir$\"
EndFunc


; === opsi-systray ===============================================================
DefFunc install_opsisystray() : void
	DefVar $CheckInterval$ = GetProductProperty("systray_check_interval", "60")
	DefVar $NotifyFormat$ = GetProductProperty("systray_request_notify_format", "productname : request")

	Message "Uninstalling opsi-systray"
	ShellCall("taskkill /f /im opsi-client-systray.exe")
	Registry_uninstall_opsisystray
	Files_uninstall_opsisystray
	if GetProductProperty("systray_install", "true") = "true"
		Comment "Installing opsi-systray"
		Message "Installing opsi-systray"
		Files_install_opsisystray
		Registry_install_opsisystray
	endif

	[Files_uninstall_opsisystray]
	del -sfc "$BaseDir$\opsi-systray"
	del -sfc "$BaseDir$\opsi-client-systray"

	[Registry_uninstall_opsisystray]
	OpenKey [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]
	DeleteVar "opsi_systray_start"

	[Files_install_opsisystray]
	copy -sVc "%ScriptPath%\files\opsi-client-systray\*.*" "$BaseDir$\opsi-client-systray\"
	copy -Vc "%ScriptPath%\files\opsi-script\*.dll" "$BaseDir$\opsi-client-systray\"

	[Registry_install_opsisystray]
	OpenKey [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]
	Set "opsi_systray_start" = '"$BaseDir$\opsi-client-systray\opsi-client-systray.exe" --fqdn=$ClientId$ --checkintervall=$CheckInterval$ --notifyformat="$NotifyFormat$"'
EndFunc


; === custom files ==============================================================
DefFunc install_custom_files(): void
	if FileExists("%ScriptPath%\files\custom")
		comment "Copy custom files"
		MarkErrorNumber
		Files_install_custom
		if errorsOccurredSinceMark > 0
			LogError "Failed to install custom files"
			Message "Failed to install custom files"
			IsFatalError "Failed to install custom files"
		endif
	else
		comment "No custom files found"
	endif

	if not (runningInWanMode)
		DefStringList $TempList$
		Set $TempList$ = GetReturnListFromSection("OpsiServiceCall_product_getIdents_opsi-client-agent-custom")
		DefVar $TempString$ = TakeString(0, $TempList$)
		if JsonAsArrayCountElements($TempString$) > "0"
			comment "Package opsi-client-agent-custom available, downloading custom files"
			ShellCall('"'+ $BaseDir$ + '\opsiclientd_bin\opsiclientd.exe" --log-level 5 download-from-depot opsi-client-agent-custom "' + $BaseDir$ + '" "common/*"')
			if not(GetLastExitcode = "0")
				LogError "Failed to fetch files from opsi-client-agent-custom"
				Message "Failed to fetch files from opsi-client-agent-custom"
			endif
		else
			comment "Package opsi-client-agent-custom not available, downloading custom files from opsi-client-agent"
			ShellCall('"'+ $BaseDir$ + '\opsiclientd_bin\opsiclientd.exe" --log-level 5 download-from-depot opsi-client-agent "' + $BaseDir$ + '" "files/custom/*"')
			if not(GetLastExitcode = "0")
				LogError "Failed to fetch custom files from opsi-client-agent"
				Message "Failed to fetch custom files from opsi-client-agent"
			endif
		endif
	endif

	[Files_install_custom]
	copy -sc "%ScriptPath%\files\custom\*.*" "$BaseDir$\"

	[OpsiServiceCall_product_getIdents_opsi-client-agent-custom]
	"method": "product_getIdents"
	"params": [
		"str",
		'{"id":"opsi-client-agent-custom"}'
	]
EndFunc


; === directories ===============================================================
DefFunc install_directories($FixVarDir$ : string, $FixBaseDir$ : string) : string
	Comment "Creating directories and setting permissions"
	Message "Creating directories and setting permissions"
	Files_create_dirs

	; Get-LocalUser is not available in Powershell 2 (win7)
	; Some win10 seem to get stuck on Get-WmiObject win32_useraccount, do not use!
	DefVar $AdminSID$ = TakeString(0, PowerShellCall("(Get-LocalUser | Where-Object {$_.SID -like 'S-1-5-*-500'}).SID.Value"))
	if not (contains($AdminSID$, "S-1-5-"))
		Set $AdminSID$ = takeString(0, GetSubListByContainingRegex("^S-1-5-21-.*-500$", GetRegistryKeyListSysNative("HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList")))
	endif
	if not (contains($AdminSID$, "S-1-5-"))
		LogWarning "Failed to get AdminSID."
		Set $AdminSID$ = ""
	endif

	Set $result$ = "true"
	if $FixVarDir$ = "true"
		DosInAnIcon_set_file_permissions_vardir
		if not ("0" = GetLastExitcode)
			LogError "Failed to set permissions on VarDir"
			Set $result$ = "false"
		endif
	endif
	if $FixBaseDir$ = "true"
		DosInAnIcon_set_file_permissions_basedir
		if not ("0" = GetLastExitcode)
			LogError "Failed to set permissions on BaseDir"
			Set $result$ = "false"
		endif
	endif

	[Files_create_dirs]
	CheckTargetPath = "$VarDir$"
	CheckTargetPath = "$VarDir$\log"
	CheckTargetPath = "$VarDir$\applog"
	CheckTargetPath = "$VarDir$\tmp"
	CheckTargetPath = "$VarDir$\usertmp"
	CheckTargetPath = "$VarDir$\cache"
	CheckTargetPath = "$VarDir$\opsiclientd"
	CheckTargetPath = "$VarDir$\tls"
	CheckTargetPath = "$VarDir$\data"

	[DosInAnIcon_set_file_permissions_vardir]
	set returncode=0
	; Take ownership, redirect stdout to nul for speedup
	if not "%USERNAME%"=="SYSTEM" takeown /R /D N /F "$VarDir$" > nul || set returncode=1
	; Remove all explicit permissions from the folder recursively (inheritance only)
	icacls "$VarDir$" /q /c /t /reset || set returncode=1
	; Allow full access to local admin group, system user and admin user inherit to all objects (OI) and containers (CI)
	; Allow read access to local users for folder only
	if "$AdminSID$"=="" (
		icacls "$VarDir$" /grant:r "*S-1-5-32-544:(OI)(CI)F" /grant:r "*S-1-5-18:(OI)(CI)F" /grant:r "*S-1-5-32-545:RX" || set returncode=1
	) else (
		icacls "$VarDir$" /grant:r "*S-1-5-32-544:(OI)(CI)F" /grant:r "*S-1-5-18:(OI)(CI)F" /grant:r "*$AdminSID$:(OI)(CI)F" /grant:r "*S-1-5-32-545:RX" || set returncode=1
	)
	; Disable inheritance from parent folder
	icacls "$VarDir$" /inheritance:r || set returncode=1
	; Set owner to SYSTEM - may fail
	icacls "$VarDir$" /setowner SYSTEM
	; Add full permission for local users on applog
	icacls "$VarDir$\applog" /grant "*S-1-5-32-545:(OI)(CI)F" || set returncode=1
	; Add full permission for local users on usertmp
	icacls "$VarDir$\usertmp" /grant "*S-1-5-32-545:(OI)(CI)F" || set returncode=1
	exit %returncode%

	[DosInAnIcon_set_file_permissions_basedir]
	set returncode=0
	; Take ownership, redirect stdout to nul for speedup
	if not "%USERNAME%"=="SYSTEM" takeown /R /D N /F "$BaseDir$" > nul || set returncode=1
	; Remove all explicit permissions from the folder recursively (inheritance only)
	icacls "$BaseDir$" /q /c /t /reset || set returncode=1
	; Allow full access to local admin group, system user and admin user inherit to all objects (OI) and containers (CI)
	; Allow read access to local users for folder only
	if "$AdminSID$"=="" (
		icacls "$BaseDir$" /grant:r "*S-1-5-32-544:(OI)(CI)F" /grant:r "*S-1-5-18:(OI)(CI)F" /grant:r "*S-1-5-32-545:RX" || set returncode=1
	) else (
		icacls "$BaseDir$" /grant:r "*S-1-5-32-544:(OI)(CI)F" /grant:r "*S-1-5-18:(OI)(CI)F" /grant:r "*$AdminSID$:(OI)(CI)F" /grant:r "*S-1-5-32-545:RX" || set returncode=1
	)
	; Disable inheritance from parent folder
	icacls "$BaseDir$" /inheritance:r || set returncode=1
	; Set owner to SYSTEM - may fail
	icacls "$BaseDir$" /setowner SYSTEM
	; Add read and exceute permission for local users on opsi-script
	icacls "$BaseDir$\opsi-script" /grant "*S-1-5-32-545:(OI)(CI)RX" || set returncode=1
	; Add read and exceute permission for local users on opsi-client-systray
	icacls "$BaseDir$\opsi-client-systray" /grant "*S-1-5-32-545:(OI)(CI)RX"
	; Add read and exceute permission for local users on opsi-notifer and motd-notifier
	icacls "$BaseDir$\opsi-notifier.exe" /grant "*S-1-5-32-545:(OI)(CI)RX"
	icacls "$BaseDir$\motd-notifier.exe" /grant "*S-1-5-32-545:(OI)(CI)RX"
	exit %returncode%
EndFunc


; === post os installation tasks ================================================
DefFunc rotate_instlog() : void
	OpsiServiceCall_rotate_instlog

	[OpsiServiceCall_rotate_instlog]
	"method": "log_write"
	"params": [
		"instlog",
		"",
		"$ClientId$",
		""
	]
EndFunc

DefFunc set_running_netboot_package_to_installed() : void
	Comment "Setting running netboot package to installed"

	DefStringList $TempList1$
	DefStringList $TempList2$

	DefVar $TempString$ = TakeString(0, GetReturnListFromSection("OpsiServiceCall_productOnClient_getObjects_netboot_running"))
	if JsonAsArrayCountElements($TempString$) > "0"
		Set $TempList1$ = JsonAsArrayToStringList($TempString$)
		Set $TempList2$ = EmptyList($TempList2$)
		for %ProdOnClient% in $TempList1$ do Set $TempList2$ = addToList($TempList2$, JsonAsObjectGetValueByKey('%ProdOnClient%', "productId"))
		for %TempProductId% in $TempList2$ do OpsiServiceCall_setProductInstallationStatus_installed
	endif

	[OpsiServiceCall_productOnClient_getObjects_netboot_running]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"NetbootProduct","actionProgress":"running"}'
	]

	[OpsiServiceCall_setProductInstallationStatus_installed]
	"method": "setProductInstallationStatus"
	"params": [
		"%TempProductId%",
		"$ClientId$",
		"installed"
	]
EndFunc

DefFunc set_installed_packages_to_setup() : void
	Comment "Setting installed packages to setup"
	DefStringList $TempList0$
	DefStringList $TempList1$
	DefStringList $TempList2$

	Set $TempList0$ = GetReturnListFromSection("OpsiServiceCall_productOnClient_getObjects_localboot_installed")
	; Returns List with either 0 or 1 entry (specific for client)
	if count($TempList0$) = "1"
		DefVar $TempString$ = TakeString(0, $TempList0$)
		if JsonAsArrayCountElements($TempString$) > "0"
			Set $TempList1$ = JsonAsArrayToStringList($TempString$)
			Set $TempList2$ = EmptyList($TempList2$)
			for %ProdOnClient% in $TempList1$ do Set $TempList2$ = addToList($TempList2$, JsonAsObjectGetValueByKey('%ProdOnClient%', "productId"))
			Set $TempList2$ = RemoveFromListByMatch('opsi-winst', $TempList2$)
			Set $TempList2$ = RemoveFromListByMatch('opsi-script', $TempList2$)
			Set $TempList2$ = RemoveFromListByMatch($ProductId$, $TempList2$)
			for %TempProductId% in $TempList2$ do OpsiServiceCall_setProductActionRequestWithDependencies_setup
		endif
	endif

	[OpsiServiceCall_setProductActionRequestWithDependencies_setup]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		"%TempProductId%",
		"$ClientId$",
		"setup"
	]

	[OpsiServiceCall_productOnClient_getObjects_localboot_installed]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"LocalbootProduct","installationStatus":"installed","actionRequest":"none"}'
	]
EndFunc

DefFunc set_opsi_general_config() : void
	Registry_set_opsi_general_config

	[Registry_set_opsi_general_config]
	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\general]
	Set "bootmode" = "BKSTD"
	;Set "opsiconf" = REG_DWORD:1
	;Set "configlocal" = REG_DWORD:0
EndFunc

; === configuration ===============================================================
DefFunc install_configuration() : void
	Comment "Setting and applying configurations"
	Message "Setting and applying configurations"

	Files_copy_uninst
	Files_copy_versionfile
	Defvar $InstallingVersion$ = strLoadTextFileWithEncoding("%ScriptPath%\files\opsi-client-agent.version", "utf-8")
	Registry_SetUninstallEntries

	[Files_copy_uninst]
	copy -s "%ScriptPath%\files\uninst\*.*" "$BaseDir$\uninst\"

	[Files_copy_versionfile]
	copy "%ScriptPath%\files\opsi-client-agent.version" "$BaseDir$\"

	[Registry_SetUninstallEntries]
	OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\opsi-client-agent]
	set "DisplayName" = "opsi-client-agent"
	set "DisplayVersion" = "$InstallingVersion$"
	set "DisplayIcon" = "$BaseDir$\opsi-script\opsi-script.exe"
	set "DisplayPublisher" = "uib gmbh, Mainz, Germany"
	set "Publisher" = "uib gmbh, Mainz, Germany"
	set "UninstallString" = '"$BaseDir$\opsi-script\opsi-script.exe" /batch "$BaseDir$\uninst\uninstall.opsiscript" "%opsiLogDir%\deinstall_opsi-client-agent.log"'
	set "URLInfoAbout" = "http://opsi.org"
	set "HelpLink" = "http://www.opsi.org/support/"
EndFunc


; === setup after install ========================================================
DefFunc setup_after_install() : void
	DefStringList $TempList$

	Set $TempList$ = createStringList()
	Set $TempList$ = GetProductPropertyList("setup_after_install", $TempList$)
	if count($TempList$) > "0"
		Comment "Setup after install"
		for %TempProductId% in $TempList$ do OpsiServiceCall_setProductActionRequestWithDependencies_setup
	endif

	[OpsiServiceCall_setProductActionRequestWithDependencies_setup]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		"%TempProductId%",
		"$ClientId$",
		"setup"
	]
EndFunc


; === wim-capture ================================================================
DefFunc get_config_value($ConfigName$ : string) : string
	DefStringList $TempList$

	Set $result$ = "__null__"

	Comment "Get configState " + $ConfigName$
	Set $TempList$ = GetReturnListFromSection('OpsiServiceCall_get_configState')
	if Count($TempList$) > "0"
		DefVar $TempString$ = TakeString(0, $TempList$)
		if jsonAsArrayCountElements($TempString$) > "0"
			Set $TempString$ = JsonAsArrayGetElementByIndex($TempString$, "0")
			Set $TempString$ = JsonAsObjectGetValueByKey($TempString$, "values")
			Set $result$ = JsonAsArrayGetElementByIndex($TempString$, "0")
		endif
	endif
	if $result$ = "__null__"
		; ConfigState not found, use default from Config
		Set $TempString$ = TakeString(0, GetReturnListFromSection('OpsiServiceCall_get_config'))
		if jsonAsArrayCountElements($TempString$) > "0"
			Set $TempString$ = JsonAsArrayGetElementByIndex($TempString$, "0")
			Set $TempString$ = JsonAsObjectGetValueByKey($TempString$, "defaultValues")
			Set $result$ = JsonAsArrayGetElementByIndex($TempString$, "0")
		else
			Set $result$ = ""
		endif
	endif

	[OpsiServiceCall_get_config]
	"method": "config_getObjects"
	"params": [
		'[]',
		'{"id":"$ConfigName$"}',
	]

	[OpsiServiceCall_get_configState]
	"method": "configState_getObjects"
	"params": [
		'[]',
		'{"configId":"$ConfigName$","objectId":"$ClientId$"}',
	]
EndFunc

DefFunc process_wim_capture() : void
	; * Fetch the list of installed packages from opsi service if clientconfig.capture.switch_installed_products_to_setup is true
	; * Fetch the list of packages with action set to "once" or "setup" from opsi service
	; * Read ProductOnClient objects from json file "%opsiTmpDir%\productOnClients.json", create them on opsi service with updated clientId
	; * Remove restored package states from list of installed packages
	; * Set remaining installed packages to "setup" on service if clientconfig.capture.switch_installed_products_to_setup is true
	; * Set the list of fetched "once" and "setup" actions on service if clientconfig.capture.do_not_change_setup_requests is true
	; * Delete ProductOnClients for a list of unwanted packages (opsi-local-image-wim-capture, ...)
	;
	; Example productOnClients.json: [{"clientId":"win7-x64-image.nightly.test","actionResult":"none","installationStatus":"installed","actionRequest":"none","packageVersion":null,"ident":"opsi-wim-capture;LocalbootProduct;win7-x64-image.nightly.test","productType":"LocalbootProduct","lastAction":null,"productVersion":null,"modificationTime":"2021-05-19 11:56:38","productId":"opsi-wim-capture","actionProgress":"installing","type":"ProductOnClient","targetConfiguration":null,"actionSequence":-1}]

	DefVar $TempString$
	DefStringList $TempList$
	DefStringList $ProductOnClients$
	DefStringList $ProductIdsInstalled$
	DefStringList $ProductIdsSetup$
	DefStringList $ProductIdsOnce$
	DefStringList $ProductIds$

	MarkErrorNumber

	Set $ProductIdsInstalled$ = EmptyList($ProductIdsInstalled$)

	DefVar $SwitchInstalledProductsToSetup$ = Lower(get_config_value("clientconfig.capture.switch_installed_products_to_setup"))
	Comment "Mode: switch_installed_products_to_setup = " + $SwitchInstalledProductsToSetup$
	DefVar $DoNotChangeSetupRequests$ = "true"

	if $SwitchInstalledProductsToSetup$ = "true"
		Set $DoNotChangeSetupRequests$ = Lower(get_config_value("clientconfig.capture.do_not_change_setup_requests"))
		Comment "Fetch installed localboot packages from opsi service"
		Set $ProductOnClients$ = EmptyList($ProductOnClients$)
		Set $TempList$ = GetReturnListFromSection("OpsiServiceCall_get_productOnClient_installed_localboot")
		Set $TempString$ = TakeString(0, $TempList$)
		if JsonAsArrayCountElements($TempString$) > "0"
			Set $ProductOnClients$ = JsonAsArrayToStringList($TempString$)
			if Count($ProductOnClients$) > "0"
				for %CurPoc% in $ProductOnClients$ do Set $ProductIdsInstalled$ = AddToList($ProductIdsInstalled$, JsonAsObjectGetValueByKey('%CurPoc%', "productId"))
			endif
		endif
	else
		Comment "Delete ProductOnClients with actionRequest none"
		Set $ProductIds$ = EmptyList($ProductIds$)
		Set $ProductOnClients$ = EmptyList($ProductOnClients$)
		Set $TempList$ = GetReturnListFromSection("OpsiServiceCall_get_productOnClient_none_localboot")
		Set $TempString$ = TakeString(0, $TempList$)
		if JsonAsArrayCountElements($TempString$) > "0"
			Set $ProductOnClients$ = JsonAsArrayToStringList($TempString$)
		endif
		if Count($ProductOnClients$) > "0"
			for %CurPoc% in $ProductOnClients$ do Set $ProductIds$ = AddToList($ProductIds$, JsonAsObjectGetValueByKey('%CurPoc%', "productId"))
		endif
		if Count($ProductIds$) > "0"
			for %CurProductId% in $ProductIds$ do OpsiServiceCall_del_productOnClient
		endif
	endif
	Comment "Mode: do_not_change_setup_requests = " + $DoNotChangeSetupRequests$

	Comment "Fetch localboot packages with actionRequest setup from opsi service"
	Set $ProductIdsSetup$ = EmptyList($ProductIdsSetup$)
	Set $ProductOnClients$ = EmptyList($ProductOnClients$)
	Set $TempList$ = GetReturnListFromSection("OpsiServiceCall_get_productOnClient_setup_localboot")
	Set $TempString$ = TakeString(0, $TempList$)
	if jsonAsArrayCountElements($TempString$) > "0"
		Set $ProductOnClients$ = JsonAsArrayToStringList($TempString$)
		if Count($ProductOnClients$) > "0"
			for %CurPoc% in $ProductOnClients$ do Set $ProductIdsSetup$ = AddToList($ProductIdsSetup$, JsonAsObjectGetValueByKey('%CurPoc%', "productId"))
		endif
	endif

	Comment "Fetch localboot packages with actionRequest once from opsi service"
	Set $ProductIdsOnce$ = EmptyList($ProductIdsOnce$)
	Set $ProductOnClients$ = EmptyList($ProductOnClients$)
	Set $TempList$ = GetReturnListFromSection("OpsiServiceCall_get_productOnClient_once_localboot")
	Set $TempString$ = TakeString(0, $TempList$)
	if JsonAsArrayCountElements($TempString$) > "0"
		Set $ProductOnClients$ = jsonAsArrayToStringList($TempString$)
		if Count($ProductOnClients$) > "0"
			for %CurPoc% in $ProductOnClients$ do Set $ProductIdsOnce$ = AddToList($ProductIdsOnce$, JsonAsObjectGetValueByKey('%CurPoc%', "productId"))
		endif
	endif

	Message "Restore productOnClients from file"
	Comment "Restore productOnClients from file"
	Set $ProductIds$ = EmptyList($ProductIds$)
	Set $TempString$ = StrLoadTextFile("%opsiTmpDir%\productOnClients.json")
	if not (JsonIsValid($TempString$))
		LogError "Invalid json file: %opsiTmpDir%\productOnClients.json"
		IsFatalError "Invalid json file: %opsiTmpDir%\productOnClients.json"
	endif
	Set $ProductOnClients$ = JsonAsArrayToStringList($TempString$)
	for %CurPoc% in $ProductOnClients$ do Set $ProductIds$ = AddToList($ProductIds$, JsonAsObjectGetValueByKey('%CurPoc%', "productId"))
	for %PocIdx% = "0" to Calculate(Count($ProductOnClients$)+"-1") do sub_set_clientId_in_ProductOnClients
	Comment "Convert modified list to json array"
	Set $TempString$ = JsonStringListToJsonArray($ProductOnClients$)

	if errorsOccurredSinceMark > 0
		LogError "Error while handling productOnClients from captured image"
		IsFatalError "Error while handling productOnClients from captured image"
	endif

	Comment "Updating " + jsonAsArrayCountElements($TempString$) + " ProductOnClients from file"
	OpsiServiceCall_update_productOnClient

	if Count($ProductIdsInstalled$) > "0"
		for %CurProductId% in $ProductIds$ do Set $ProductIdsInstalled$ = RemoveFromListByMatch('%CurProductId%', $ProductIdsInstalled$)
		if Count($ProductIdsInstalled$) > "0"
			Comment "Set installed productIds to setup"
			for %CurProductId% in $ProductIdsInstalled$ do OpsiServiceCall_set_setup
		endif
	endif

	if $DoNotChangeSetupRequests$ = "true"
		Comment "Restore saved setup actions"
		if count($ProductIdsSetup$) > "0"
			for %CurProductId% in $ProductIdsSetup$ do OpsiServiceCall_set_setup
		endif
		Comment "Restore saved once actions"
		if count($ProductIdsOnce$) > "0"
			for %CurProductId% in $ProductIdsOnce$ do OpsiServiceCall_set_once
		endif
	endif

	Comment "Delete unwanted ProductOnClients"
	Set $ProductIds$ = createStringList('opsi-local-image-wim-capture', 'opsi-local-image-sysprep', 'opsi-wim-capture')
	for %CurProductId% in $ProductIds$ do OpsiServiceCall_del_productOnClient

	Comment "Rename productOnClients.json"
	Files_rename_productOnClients_json

	Set $Finalize$ = "reboot"


	[sub_set_clientId_in_ProductOnClients]
	Comment "Get object from array"
	Set $TempString$ = TakeString("%PocIdx%", $ProductOnClients$)
	Comment "Remove ident"
	Set $TempString$ = JsonAsObjectDeleteByKey($TempString$, "ident")
	Comment "Set clientId"
	Set $TempString$ = JsonAsObjectSetStringtypeValueByKey($TempString$, "clientId", $ClientId$)
	Comment "Write modified object back to array"
	Set $ProductOnClients$ = SetStringInListAtIndex($TempString$, $ProductOnClients$, "%PocIdx%")


	[OpsiServiceCall_get_productOnClient_installed_localboot]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"LocalbootProduct","installationStatus":"installed"}',
	]

	[OpsiServiceCall_get_productOnClient_setup_localboot]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"LocalbootProduct","actionRequest":"setup"}',
	]

	[OpsiServiceCall_get_productOnClient_once_localboot]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"LocalbootProduct","actionRequest":"once"}',
	]

	[OpsiServiceCall_get_productOnClient_none_localboot]
	"method": "productOnClient_getObjects"
	"params": [
		"[]",
		'{"clientId":"$ClientId$","productType":"LocalbootProduct","actionRequest":"none"}',
	]

	[OpsiServiceCall_update_productOnClient]
	"method": "productOnClient_updateObjects"
	"params": [
		'$TempString$'
	]

	[OpsiServiceCall_set_setup]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		'%CurProductId%',
		'$ClientId$',
		'setup',
	]

	[OpsiServiceCall_set_once]
	"method": "setProductActionRequestWithDependencies"
	"params": [
		'%CurProductId%',
		'$ClientId$',
		'once',
	]

	[OpsiServiceCall_del_productOnClient]
	"method": "productOnClient_delete"
	"params": [
		'%CurProductId%',
		'$ClientId$',
	]

	[Files_rename_productOnClients_json]
	del -fc "%opsiTmpDir%\restored_productOnClients.json"
	rename -c "%opsiTmpDir%\productOnClients.json" "%opsiTmpDir%\restored_productOnClients.json"
EndFunc


; === actions ===================================================================
if not (GetOS = "Windows_NT")
	LogError "OS not supported: " + GetOS
	isFatalError "OS not supported: " + GetOS
endif

if CompareDotSeparatedNumbers(GetMsVersionInfo, "<", "6.0")
	logError "Windows version not supported: " + GetMsVersionInfo
	isFatalError "Windows version not supported: " + GetMsVersionInfo
endif

if not (HasMinimumSpace("%SystemDrive%", "200 MB"))
	LogError "Insufficient disk space on %SystemDrive% (200 MB required)"
	IsFatalError "Insufficient disk space"
endif

if (strLength($ClientId$) > "64")
	; A hostname longer than 64 characters may cause problems.
	; For example, when creating the TLS certificate.
	LogError "Client ID (FQDN) is longer than 64 chars"
	IsFatalError "Client FQDN too long"
endif

PowerShellCall('echo test')
if not ("0" = GetLastExitcode)
	LogError "Unable to access Powershell - check ExecutionPolicy restrictions"
	IsFatalError "Unable to access Powershell"
endif

; PreviousOCDVersion -1 means no opsiclientd installed
DefVar $PreviousOCDVersion$ = ""
if FileExists($BaseDir$+"\opsiclientd_bin\opsiclientd.exe")
	Set $PreviousOCDVersion$ = getValue("FileVersion", getFileInfoMap($BaseDir$+"\opsiclientd_bin\opsiclientd.exe"))
else
	if FileExists($BaseDir$+"\opsiclientd.exe")
		Set $PreviousOCDVersion$ = getValue("FileVersion", getFileInfoMap($BaseDir$+"\opsiclientd.exe"))
	else
		Set $PreviousOCDVersion$ = "-1"
	endif
endif
if $PreviousOCDVersion$ = ""
	; getFileInfoMap can produce emptystring on really old binaries -> 0
	Set $PreviousOCDVersion$ = "0"
endif

if not($PreviousOCDVersion$ = "-1") and CompareDotSeparatedNumbers($PreviousOCDVersion$, "<", "4.2.0.77") and contains($ServiceAddress$, "localhost")
	LogError "opsiclientd too old for upgrade in WAN mode. Please install opsi-client-agent >= 4.1.1.39 first."
	IsFatalError "opsiclientd too old"
endif

Comment "Show product image"
ShowBitmap "%ScriptPath%\files\opsi-logo.png" "opsi client agent"

Message "Installing " + $ProductId$ + " ..."

DefVar $RunningInServiceContext$
if isProcessChildOf('%opsiscriptprocname%','opsiclientd.exe')
	Set $RunningInServiceContext$ = "true"
else
	Set $RunningInServiceContext$ = "false"
endif

if ($RunningInServiceContext$ = "true")
	Comment "Running in service context"
else
	Comment "Not running in service context"
	if FileExists($BaseDir$ + "\opsiclientdguard")
		ShellCall('sc stop opsiclientdguard')
		SleepSeconds 5
	endif
	if ProcessIsRunning("opsiclientd.exe")
		ShellCall("sc stop opsiclientd")
		SleepSeconds 5
	endif

	MarkErrorNumber
	OpsiServiceCall_authenticated
	if errorsOccurredSinceMark > 0
		LogError "Opsi service authentication failed"
		IsFatalError "Opsi service authentication failed"
	endif

	; Rotate instlog until opsi-script can be forced to not use appendmode
	rotate_instlog()

	if Contains($InstallationOptions$, "bootimage") or Contains($InstallationOptions$, "BOOTIMAGE")
		; Not required for newer netboot products
		if not (FileExists("%ScriptDrive%\opsi.org\postinst\postinst.ps1"))
			set_opsi_general_config()
			set_running_netboot_package_to_installed()
			; during wim capture, installed products are written to %opsiTmpDir%\productOnClients.json - not setting them to setup
			if not (FileExists("%opsiTmpDir%\productOnClients.json"))
				set_installed_packages_to_setup()
			endif
		endif
	endif
endif

DefVar $PermissionSetSuccess$
if not ("%Username%" = "SYSTEM")
	; if not running as system: fix permissions on BaseDir (not VarDir)
	Set $PermissionSetSuccess$ = install_directories("false", "true")
endif

if not (FileExists($BaseDir$ + "\opsi-script"))
	install_opsiscript()
else
	; Install default skin, possibly overridden by custom part later
	install_opsiscript_skin()
endif

install_requirements()
install_opsinotifier()
install_opsisystray()
install_opsiclientd()
if ($Finalize$ = "opsiclientd_killed_force_service_start")
	ShellCall("net start opsiclientd")
	ExitWindows /ImmediateLogout
endif
install_custom_files()
; Second call to install_directory to fix permissions on VarDir and BaseDir
Set $PermissionSetSuccess$ = install_directories("true", "true")
install_configuration()

if FileExists("%opsiTmpDir%\productOnClients.json")
	comment "Found WIM-capture meta data file. Start processing."
	process_wim_capture()
	set_running_netboot_package_to_installed()
endif
setup_after_install()

; Installation of opsi-login-blocker will kill/restart LogonUI => last step
install_loginblocker()

if $PermissionSetSuccess$ = "false"
		LogError "Failed to set permissions after installation"
		IsFatalError "Failed to set permissions"
endif

if ($RunningInServiceContext$ = "false")
	; Use setProductInstallationStatus to set installationStatus,lastAction and version
	OpsiServiceCall_setProductInstallationStatus_opsiclientagent
endif

if Contains($InstallationOptions$, "bootimage") or Contains($InstallationOptions$, "BOOTIMAGE")
	; Reboot is performed by postinst script in netboot installation
	Set $Finalize$ = ""
else
	if Contains($InstallationOptions$, "noreboot")
		Set $Finalize$ = "service_restart"
	else
		if Contains($InstallationOptions$, "reboot")
			Set $Finalize$ = "reboot"
		else
			if Contains($InstallationOptions$, "shutdown")
				Set $Finalize$ = "shutdown"
			endif
		endif
	endif

	; if not in service_context and not in bootimage mode: keep value of Finalize (except if no_reboot prohibits it)
	if $RunningInServiceContext$ = "true"
		DefStringList $TempList1$
		DefVar $TempString$ = TakeString(0, GetReturnListFromSection("OpsiServiceCall_productOnClient_getObjects_localboot_setup"))
		if JsonAsArrayCountElements($TempString$) > "0"
			Set $TempList1$ = JsonAsArrayToStringList($TempString$)
			Set $TempList1$ = removeFromListByContaining('opsi-client-agent;', $TempList1$)
			if count($TempList1$) > "0"
				; Restart service to get notifiers back working
				; comment "Setting Finalize to service_restart_no_skip because there are pending setup action requests"
				; Set $Finalize$ = "service_restart_no_skip"
				comment "Setting Finalize to reboot because there are pending setup action requests"
				Set $Finalize$ = "reboot"
			endif
		endif

		; with opsiclientd 4.2.0.77 the location of the restart_marker was changed (no opsiclientd found -> 0)
		if (($Finalize$ = "service_restart") or ($Finalize$ = "service_restart_no_skip")) and CompareDotSeparatedNumbers($PreviousOCDVersion$, "<", "4.2.0.77")
			comment "opsiclientd version " + $PreviousOCDVersion$ + " does not handle restart marker"
			Set $Finalize$ = "reboot"
		endif
	endif

	;Prohibit reboot and shutdown if allow_reboot is false
	if (GetProductProperty("allow_reboot", "true") = "false")
		if ($Finalize$ = "reboot")
			Set $Finalize$ = "service_restart_no_skip"
		endif
		if ($Finalize$ = "shutdown")
			Set $Finalize$ = "service_restart"
		endif
	endif
endif

if ($Finalize$ = "reboot")
	ExitWindows /Reboot
endif
if ($Finalize$ = "shutdown")
	if ($RunningInServiceContext$ = "false")
		PowerShellCall("Stop-Computer -ComputerName localhost -Force")
	else
		ExitWindows /ShutdownWanted
	endif
endif
if ($Finalize$ = "service_restart") or ($Finalize$ = "service_restart_no_skip")
	; Restart opsiclientd after current event or (re)start opsiclientd service
	if ($Finalize$ = "service_restart_no_skip")
		Comment "Creating opsiclientd restart marker"
		ShellCall('echo # > "' + $BaseDir$ + '\.opsiclientd_restart"')
	else
		; Do not execute events on startup
		Comment "Creating opsiclientd restart marker, skip events"
		ShellCall('echo disabled_event_types = gui startup, daemon startup > "' + $BaseDir$ + '\.opsiclientd_restart"')
	endif
	if ($RunningInServiceContext$ = "false")
		ShellCall('net stop opsiclientd & net start opsiclientd')
	endif
endif


[OpsiServiceCall_authenticated]
"method": "accessControl_authenticated"
"params": []

[OpsiServiceCall_setProductInstallationStatus_opsiclientagent]
"method": "setProductInstallationStatus"
"params": [
	"$ProductId$",
	"$ClientId$",
	"installed"
]

[OpsiServiceCall_productOnClient_getObjects_localboot_setup]
"method": "productOnClient_getIdents"
"params": [
	'"string"',
	'{"clientId":"$ClientId$","productType":"LocalbootProduct","actionRequest":"setup"}'
]
