#!/bin/bash
#
# postinst script
# This script executes after unpacking files from that archive and registering the product at the server.
#
# The following environment variables can be used to obtain information about the current installation:
#   PRODUCT_ID: id of the current product
#   CLIENT_DATA_DIR: directory which contains the installed client data
#   DEPOT_ID
#   PRODUCT_VERSION
#   PACKAGE_VERSION

EMPTYARRAY=""

CHECKCONFIG="software-on-demand.installation-now-button"
CHECKSTRING="{\"id\":\"${CHECKCONFIG}\"}"
ANSWERARRAY=`opsi-admin -dS method config_getObjects '[]' ${CHECKSTRING}`
if [ "${EMPTYARRAY}" == "${ANSWERARRAY}" ] ; then
  echo "config ${CHECKCONFIG} does not exists - creating"
  opsi-admin -d method config_createBool "${CHECKCONFIG}" "${CHECKCONFIG}" "true"
else
  echo "config ${CHECKCONFIG} already exists"
fi

CHECKCONFIG="software-on-demand.admin-mode"
CHECKSTRING="{\"id\":\"${CHECKCONFIG}\"}"
ANSWERARRAY=`opsi-admin -dS method config_getObjects '[]' ${CHECKSTRING}`
if [ "${EMPTYARRAY}" == "${ANSWERARRAY}" ] ; then
  echo "config ${CHECKCONFIG} does not exists - creating"
  opsi-admin -d method config_createBool "${CHECKCONFIG}" "${CHECKCONFIG}" "true"
else
  echo "config ${CHECKCONFIG} already exists"
fi

echo [${PRODUCT_ID}]  > $CLIENT_DATA_DIR/files/opsi/product.ini
echo ProductVersion=${PRODUCT_VERSION}-${PACKAGE_VERSION} >> $CLIENT_DATA_DIR/files/opsi/product.ini

chmod u+x $CLIENT_DATA_DIR/utils/set_ip_in_inifile
chmod u+x $CLIENT_DATA_DIR/opsi-deploy-client-agent

# for backward compatibiliy: create a setup.ins:
cd $CLIENT_DATA_DIR/files/opsi
ln setup.opsiscript setup.ins

echo "Patching server information ..."
PATCH_CONFIG_SCRIPT="$CLIENT_DATA_DIR/utils/patch_config_file.py"
CONFIG_FILE="$CLIENT_DATA_DIR/files/opsi/cfg/config.ini"

set +e
python3 -c "import OPSI"
ret=$?
set -e
if [ $ret -eq 0 ]; then
	# Python 3 - opsi 4.2 or later
	python3 $PATCH_CONFIG_SCRIPT $CONFIG_FILE

else
	# Python 2 - opsi 4.1
	python $PATCH_CONFIG_SCRIPT $CONFIG_FILE
fi

TMP_DIR=${CLIENT_DATA_DIR}/../${PRODUCT_ID}.tmp
if [ ! -d $TMP_DIR ]; then
	echo "Nothing to do!"
	exit 0
fi

if [ -d $TMP_DIR ]; then
	echo 'Restoring previous directories...'
	for dirname in files/opsi/custom files/opsi/opsiclientkiosk/ock_custom; do
		for path in $TMP_DIR/`basename $dirname`; do
			if [ -d $path ]; then
				test -e $CLIENT_DATA_DIR/$dirname && rm -rf $CLIENT_DATA_DIR/$dirname
				echo "   moving $path to $CLIENT_DATA_DIR/$dirname"
				mv $path $CLIENT_DATA_DIR/$dirname || exit 1
			fi
		done
	done
fi

echo "Removing temporary files..."
rm -rf $TMP_DIR

exit 0
