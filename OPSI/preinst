#!/bin/bash
#
# preinst script
# This script executes before that package will be unpacked from its archive file.
#
# The following environment variables can be used to obtain information about the current installation:
#   PRODUCT_ID: id of the current product
#   CLIENT_DATA_DIR: directory where client data will be installed
#

TMP_DIR=${CLIENT_DATA_DIR}/../${PRODUCT_ID}.tmp

if [ -d $TMP_DIR ]; then
	echo "Temporary directory $TMP_DIR already exist, aborting!" 1>&2
	exit 1
fi
mkdir $TMP_DIR
[ -d $CLIENT_DATA_DIR ] || mkdir $CLIENT_DATA_DIR


if [ -d "${CLIENT_DATA_DIR}/files/opsi/custom" ]; then
	echo "Saving old custom dir"
	cp -r "${CLIENT_DATA_DIR}/files/opsi/custom" $TMP_DIR/ || exit 1
fi

if [ -d "${CLIENT_DATA_DIR}/files/custom" ]; then
	echo "Saving custom dir"
	cp -r "${CLIENT_DATA_DIR}/files/custom" $TMP_DIR/ || exit 1
fi

if [ -z $(opsi-admin -dS method config_getIdents null '{"id":"opsiclientd.event_on_shutdown.active"}') ]; then
	opsi-admin -d method config_createBool "opsiclientd.event_on_shutdown.active" "event on_shutdown active" "false"
fi
# Migration of legacy property "on_shutdown_install": on/off
if [ -e "${CLIENT_DATA_DIR}/files/opsi/on_shutdown" ]; then
	echo "Upgrading from opsi-client-agent < 4.2.0.0"
	for client_id in $(opsi-admin -dS method productPropertyState_getIdents null '{"productId":"opsi-client-agent","propertyId":"on_shutdown_install","values":"[\"on\"]"}' | cut -d";" -f3); do
		opsi-admin -d method configState_create "opsiclientd.event_on_shutdown.active" "${client_id}" "true"
	done
fi

#******************************************
# START opsi-client-kiosk migration
#******************************************
# OCK = abbreviation for opsi-client-kiosk

#Set kiosk paths
KIOSK_IN_AGENT_DIR=${CLIENT_DATA_DIR}/files/opsiclientkiosk
OCK_DIR=${CLIENT_DATA_DIR}/../opsi-client-kiosk

# Only migrate if kiosk exists in former client-agent
# and the kiosk package was not installed on depot before
if [ -d $KIOSK_IN_AGENT_DIR ] && [ ! -d $OCK_DIR ] ; then
	#opsi-client-kiosk dirs
	OCK_APP_DIR=${OCK_DIR}/files/app
	OCK_MIGRATION_DIR=${OCK_DIR}/migration

	# possible ock_custom directories in client agent
	if [ -d ${KIOSK_IN_AGENT_DIR}/app/ock_custom ]; then
		OCK_CUSTOM_IN_AGENT_DIR=${KIOSK_IN_AGENT_DIR}/app/ock_custom
	elif [ -d ${KIOSK_IN_AGENT_DIR}/ock_custom ]; then
		OCK_CUSTOM_IN_AGENT_DIR=${KIOSK_IN_AGENT_DIR}/ock_custom
	elif [ -d ${KIOSK_IN_AGENT_DIR}/files_to_copy/ock_custom ]; then
		OCK_CUSTOM_IN_AGENT_DIR=${KIOSK_IN_AGENT_DIR}/files_to_copy/ock_custom
	else
		OCK_CUSTOM_IN_AGENT_DIR=""
	fi

	# create folder where the ock_custom folder should be saved
	# create folder migrate (used as flag in postinst to decide if kiosk package should be installed or not)
	[ ! -d $OCK_DIR ] && mkdir $OCK_DIR
	[ ! -d $OCK_APP_DIR ] && mkdir -p $OCK_APP_DIR
	[ ! -d $OCK_MIGRATION_DIR ] && mkdir -p $OCK_MIGRATION_DIR

	# create "dummy" product to migrate properties
	# opsi-admin -d method createProduct "localboot" "opsi-client-kiosk" "Opsi Client Kiosk" "4.1.0.0" "1"

	# Handle properties
	STARTMENUE_ENTRY=$(opsi-admin -d method productPropertyState_getObjects '[]' '{"productId":"opsi-client-agent", "propertyId":"kiosk_startmenue_entry"}')
	STARTMENUE_ENTRY=$(echo $STARTMENUE_ENTRY | sed s/opsi-client-agent/opsi-client-kiosk/g)
	STARTMENUE_ENTRY=$(echo $STARTMENUE_ENTRY | sed s/kiosk_startmenue_entry/startmenue_entry/g)
	#opsi-admin -d method productPropertyState_updateObjects "${STARTMENUE_ENTRY}"
	echo $STARTMENUE_ENTRY > ${OCK_MIGRATION_DIR}/startmenue_entry.json


	STARTMENUE_FOLDER=$(opsi-admin -d method productPropertyState_getObjects '[]' '{"productId":"opsi-client-agent", "propertyId":"kiosk_startmenue_folder"}')
	STARTMENUE_FOLDER=$(echo $STARTMENUE_FOLDER | sed s/opsi-client-agent/opsi-client-kiosk/g)
	STARTMENUE_FOLDER=$(echo $STARTMENUE_FOLDER | sed s/kiosk_startmenue_folder/startmenue_folder/g)
	#opsi-admin -d method productPropertyState_updateObjects "${STARTMENUE_FOLDER}"
	echo $STARTMENUE_FOLDER > ${OCK_MIGRATION_DIR}/startmenue_folder.json

	DESKTOP_ICON=$(opsi-admin -d method productPropertyState_getObjects '[]' '{"productId":"opsi-client-agent", "propertyId":"kiosk_desktop_icon"}')
	DESKTOP_ICON=$(echo $DESKTOP_ICON | sed s/opsi-client-agent/opsi-client-kiosk/g)
	DESKTOP_ICON=$(echo $DESKTOP_ICON | sed s/kiosk_desktop_icon/desktop_icon/g)
	#opsi-admin -d method productPropertyState_updateObjects "${DESKTOP_ICON}"
	echo $DESKTOP_ICON > ${OCK_MIGRATION_DIR}/desktop_icon.json

	# Handle ock_custom folder
	if [ $OCK_CUSTOM_IN_AGENT_DIR ]; then
		echo "Saving ock_custom folder to new place..."
		echo "   coping ${OCK_CUSTOM_IN_AGENT_DIR} to ${OCK_APP_DIR}"
		cp -r --remove-destination $OCK_CUSTOM_IN_AGENT_DIR $OCK_APP_DIR || exit 1
		#opsi-set-rights $OCK_APP_DIR
	fi
	sudo opsi-set-rights $OCK_DIR
fi
#******************************************
# END opsi-client-kiosk migration
#******************************************

exit 0
