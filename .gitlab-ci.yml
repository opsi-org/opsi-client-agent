image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.10

stages:
  - prepare
  - build
  - package
  - test


.jenkinsintegrationtest: &jenkinsintegrationtest |
  version=$(grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :")
  package=$(grep OPSI/control -A 5 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :")
  version="$version-$(echo $package | tr '.' '~')"
  VERSIONS="$OLDVERSION,$version,$version"
  PRODUCTS="opsi-client-agent-old,opsi-client-agent,opsi-client-agent"
  PRODUCTSOURCES="opsi-client-agent,opsi-client-agent,opsi-client-agent"
  ACTIONREQUEST="setup,setup,setup"
  response=$(curl --insecure -v -X POST https://jenkinsttt.uib.gmbh/job/cicd-abo-plus/buildWithParameters --user service_testumgebung_gitlab:$JENKINS_CICD_TOKEN --data PRODUCTS=$PRODUCTS --data ACTIONREQUEST=$ACTIONREQUEST --data PROPERTIES="$PROPERTIES" --data SYSTEMS=$SYSTEMS --data VERSIONS=$VERSIONS --data PRODUCTSOURCES=$PRODUCTSOURCES 2>&1)
  url=$(echo "$response" | grep "Location" | grep -o 'https://.*/')   # this is the global queue id
  echo "waiting for start of queue item $url"
  sleep 20
  response=$(curl --insecure "$url/api/json" 2> /dev/null)
  echo "$response"
  while echo "$response" | grep -q '"blocked":true'; do echo "waiting for job start"; sleep 20; response=$(curl --insecure "$url/api/json" 2> /dev/null); done
  url=$(echo "$response" | grep -o 'https://[^"]*[0-9]\+/')           # this is the specific build id for the pipeline
  echo "waiting for completion of job $url"
  response=$(curl --insecure "$url/api/json" 2> /dev/null)
  while echo "$response" | grep -q '"result":null'; do echo "still waiting"; sleep 20; response=$(curl --insecure "$url/api/json" 2> /dev/null); done
  echo "$response"
  if echo "$response" | grep -q '"result":"SUCCESS"'; then echo 'result:SUCCESS'; exit 0; fi
  echo 'NOT successful'
  response=$(curl --insecure "$url/consoleText/api/json" 2> /dev/null)
  echo "$response" | grep "Failed in branch"
  exit 1


prepare:prepare_files:
  stage: prepare
  script:
    - opsi-dev-tool -l info --binary-pull
    - version=$(grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :")
    - package=$(grep OPSI/control -A 5 -e "\[Package\]" | grep "version:" | tr -d "^a-zA-Z :")
    - '[ "$CI_COMMIT_TAG" = "" ] && newpackage="$package.$CI_JOB_ID"'
    - 'sed -i "s/version: $package/version: $newpackage/" OPSI/control'
    - echo "$version-$newpackage" > CLIENT_DATA/files/opsi-client-agent.version
  artifacts:
    name: prepared_files
    paths:
      - OPSI/control
      - CLIENT_DATA/


build_installer:windows-x86-installer:
  stage: build
  tags:
    - win10
  script:
    - Invoke-WebRequest -UseBasicParsing -Uri "$OPSIDEVTOOLS_URL_WINDOWS_X86" -OutFile opsi-dev-tools.zip
    - Expand-Archive opsi-dev-tools.zip -DestinationPath opsi-dev-tools
    - Invoke-WebRequest -UseBasicParsing -Uri "http://binaryindex.uib.gmbh/mirror/resource_hacker/windows/x86/resource_hacker_windows_x86_5.1.8.zip" -OutFile resource_hacker.zip
    - Expand-Archive resource_hacker.zip -DestinationPath .
    # Get version from control file
    - "$versionLine = Get-Content -Path OPSI\\control | Where-Object { $_ -match 'version: 4.' }"
    - $version = $versionLine.Split(':')[1].trim()
    # Build 7z sfx installer
    - .\\oca-installer\\build.ps1 CLIENT_DATA opsi-client-agent-installer.exe $version
    # Compile versioninfo resource
    - $versionComma = $version -replace "\.",","
    - ((Get-Content -path oca-installer\\versioninfo.rc -Raw) -replace "{version}",$version -replace "{version_comma}",$versionComma) | Set-Content -Path oca-installer\\versioninfo.rc
    - .\\resourcehacker\\ResourceHacker.exe -open oca-installer\\versioninfo.rc -save oca-installer\\versioninfo.res -action compile -log reshack.log
    - Start-Sleep -s 5
    - Get-Content reshack.log
    # Replace versioninfo resource in exe
    - .\\resourcehacker\\ResourceHacker.exe -resource oca-installer\\versioninfo.res -open opsi-client-agent-installer.exe -save opsi-client-agent-installer.exe -action addoverwrite -log reshack.log
    - Start-Sleep -s 5
    - Get-Content reshack.log
    # Replace icon in exe
    - .\\resourcehacker\\ResourceHacker.exe -open opsi-client-agent-installer.exe -save opsi-client-agent-installer.exe -action addoverwrite -res oca-installer\\opsi.ico -mask "ICONGROUP,MAINICON," -log reshack.log
    - Start-Sleep -s 5
    - Get-Content reshack.log
    # Sign exe
    - .\\opsi-dev-tools\\opsi-dev-tool.exe -l info --signserver-sign opsi-client-agent-installer.exe
    # Push to binaryindex
    - if (! $CI_COMMIT_TAG) {.\\opsi-dev-tools\\opsi-dev-tool.exe -l info --binary-push opsi-client-agent-installer.exe opsi-client-agent-installer windows x86 $version "$CI_JOB_ID"}
    - if ($CI_COMMIT_TAG) {.\\opsi-dev-tools\\opsi-dev-tool.exe -l info --binary-push opsi-client-agent-installer.exe opsi-client-agent-installer windows x86 $version }
  artifacts:
    name: opsi-client-agent-installer
    paths:
      - opsi-client-agent-installer.exe


package:linux_make_msi:
  # wixl sometimes produces a corrupt cab file in msi
  when: manual
  image: debian:bullseye
  stage: package
  script:
    - apt update
    - apt -y install wget cpio unar wixl uuid-runtime
    - wget "$OPSIDEVTOOLS_URL_LINUX_X64" -O opsi-dev-tools.tar.gz
    - tar -xvf opsi-dev-tools.tar.gz
    - version=$(grep OPSI/control -A 10 -e "\[Product\]" | grep "version:" | tr -d "^a-zA-Z :")
    #- product_id=$(uuidgen | tr a-z A-Z)
    #- sed "s/{version}/${version}/g;s/{product_id}/${product_id}/g" msi/opsi-client-agent.wxs > opsi-client-agent.wxs
    - sed "s/{version}/${version}/g" msi/opsi-client-agent.wxs > opsi-client-agent.wxs
    - cat opsi-client-agent.wxs
    - wixl -v opsi-client-agent.wxs
    - ./opsi-dev-tool -l info --signserver-sign opsi-client-agent.msi
    # Push to binaryindex
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-tool -l info --binary-push opsi-client-agent.msi opsi-client-agent-msi windows x86 "$version" "$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-tool -l info --binary-push opsi-client-agent.msi opsi-client-agent-msi windows x86 "$version"'
  artifacts:
    name: opsi-client-agent-msi
    paths:
      - opsi-client-agent.msi


package:windows_make_msi:
  stage: package
  tags:
    - win10
  script:
    - Invoke-WebRequest -UseBasicParsing -Uri "$OPSIDEVTOOLS_URL_WINDOWS_X86" -OutFile opsi-dev-tools.zip
    - Expand-Archive opsi-dev-tools.zip -DestinationPath opsi-dev-tools
    - Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile wix-binaries.zip
    - Expand-Archive wix-binaries.zip -DestinationPath wix
    # Get version from control file
    - "$versionLine = Get-Content -Path OPSI\\control | Where-Object { $_ -match 'version: 4.' }"
    - $version = $versionLine.Split(':')[1].trim()
    # Patch version
    - ((Get-Content -path msi\\opsi-client-agent.wxs -Raw) -replace "{version}",$version) | Set-Content -Path opsi-client-agent.wxs
    - Get-Content opsi-client-agent.wxs
    # Build msi
    - wix\\candle.exe opsi-client-agent.wxs
    - wix\\light.exe opsi-client-agent.wixobj
    # Sign msi
    - .\\opsi-dev-tools\\opsi-dev-tool.exe -l info --signserver-sign opsi-client-agent.msi
    # Push to binaryindex
    - if (! $CI_COMMIT_TAG) {.\\opsi-dev-tools\\opsi-dev-tool.exe -l info --binary-push opsi-client-agent.msi opsi-client-agent-msi windows x86 $version "$CI_JOB_ID"}
    - if ($CI_COMMIT_TAG) {.\\opsi-dev-tools\\opsi-dev-tool.exe -l info --binary-push opsi-client-agent.msi opsi-client-agent-msi windows x86 $version }
  artifacts:
    name: opsi-client-agent-msi
    paths:
      - opsi-client-agent.msi


package:make_opsi_package:
  stage: package
  script:
    - mv opsi-client-agent-installer.exe CLIENT_DATA/
    - opsi-makepackage --no-set-rights -l 6
    - upload-package opsi-client-agent_*.opsi


test:testwindowsversions:
  stage: test
  when: manual
  script:
    - echo "starting jenkins job via POST request"
    - PROPERTIES=""
    - OLDVERSION="4.1.1.0-1"
    - SYSTEMS="win10-21h1,win10-x64-21h1,win7,win7-x64,win81,win81-x64"
    - *jenkinsintegrationtest


test:testontag:
  stage: test
  only:
    - tags
  script:
    - echo "starting jenkins job via POST request"
    - PROPERTIES=""
    - OLDVERSION="4.1.1.0-1"
    - SYSTEMS="win10-21h1,win10-x64-21h1"
    - *jenkinsintegrationtest
